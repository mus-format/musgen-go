// Code generated by fvar. DO NOT EDIT.

package musgen

var templates map[string]string

func init() {
	templates = make(map[string]string)
	templates["anon_definitions.tmpl"] = `{{/* {Map: map[data.AnonSerName]data.AnonData, Ops: genops.Options} */}}
{{- if gt (len .Map)  0 }}
	{{- $gops := .Ops }}
	var (
		{{- $constructorName := "" }}
		{{- range $name, $ad := .Map }}
{{- /* string type */}}
			{{- if eq $ad.Kind.String "string" }}
				{{- if ne $ad.LenVl "nil" }}
					{{- $constructorName = "NewValidStringSer" }}
				{{- else }}
					{{- $constructorName = "NewStringSer" }}
				{{- end }}
				{{ $name }} = ord.{{ $constructorName }}({{ StringOps $ad }})
			{{- end }}
{{- /* array type */}}
			{{- if eq $ad.Kind.String "array" }}
				{{- $elemSer := AnonElemSer $ad $gops }}
				{{- if ne $ad.ElemVl "nil" }}
					{{- $constructorName = "NewValidArraySer" }}
				{{- else }}
					{{- $constructorName = "NewArraySer" }}
				{{- end }}
				{{ $name }} = ord.{{ $constructorName }}[{{ RelName $ad.ArrType $gops }}, {{ RelName $ad.ElemType $gops }}]({{ $elemSer }}{{ WithComma (ArrayOps $ad) }})
			{{- end }}
{{- /* byte slice type */}}
			{{- if eq $ad.Kind.String "byteSlice" }}
				{{- if ne $ad.LenVl "nil" }}
					{{- $constructorName = "NewValidByteSliceSer" }}
				{{- else }}
					{{- $constructorName = "NewByteSliceSer" }}
				{{- end }}
				{{ $name }} = ord.{{ $constructorName }}({{ ByteSliceOps $ad }})
			{{- end }}
{{- /* slice type */}}
			{{- if eq $ad.Kind.String "slice" }}
				{{- $elemSer := AnonElemSer $ad $gops }}
				{{- if or (ne $ad.LenVl "nil") (ne $ad.ElemVl "nil") }}
					{{- $constructorName = "NewValidSliceSer" }}
				{{- else }}
					{{- $constructorName = "NewSliceSer" }}
				{{- end }}
				{{ $name }} = ord.{{ $constructorName }}[{{ RelName $ad.ElemType $gops }}]({{ $elemSer }}{{ WithComma (SliceOps $ad) }})
			{{- end }}
{{- /* map type */}}
			{{- if eq $ad.Kind.String "map" }}
				{{- $keySer := AnonKeySer $ad $gops }}
				{{- $elemSer := AnonElemSer $ad $gops }}
				{{- if or (ne $ad.LenVl "nil") (ne $ad.KeyVl "nil") (ne $ad.ElemVl "nil") }}
					{{- $constructorName = "NewValidMapSer" }}
				{{- else}}
					{{- $constructorName = "NewMapSer" }}
				{{- end }}
				{{ $name }} = ord.{{ $constructorName }}[{{ RelName $ad.KeyType $gops }}, {{ RelName $ad.ElemType $gops }}]({{ $keySer}}, {{ $elemSer }}{{ WithComma (MapOps $ad) }})
			{{- end }}
{{- /* ptr type */}}
			{{- if eq $ad.Kind.String "ptr" }}
				{{- $elemSer := AnonElemSer $ad $gops }}
				{{ $name }} = ord.NewPtrSer[{{ RelName $ad.ElemType $gops }}]({{ $elemSer }})
			{{- end }}
		{{- end }}
	)
{{- end }}`
	templates["dtms_definition.tmpl"] = `{{/* []string */}}
const (
  {{- range $i, $name := . }}
    {{ $name }}DTM{{ if eq $i 0 }} com.DTM = iota+1{{ end }}
  {{- end }}
)
`
	templates["field_marshal.tmpl"] = `{{- /* {SerReceiver string, FieldsCount int, Field data.FieldData, Index int, Gops genops.Options} */}}
{{- $mlp := .Gops.MarshalLastParam false }}
{{- if eq .Index 0 }}
	{{- $mlp = .Gops.MarshalLastParam true }}
{{- end}}

{{- $vf := print .SerReceiver "." .Field.FieldName }}
{{- $fieldSer := SerOf .Field.FullName .Tops .Gops }}

{{- $nVar := "n" }}
{{- if gt .Index 0 }}
	{{- $nVar = "n1" }}
{{- end }}

{{- $call := print $fieldSer ".Marshal(" $vf ", " $mlp ")" }}
{{- if eq .FieldsCount 1 }}
	return {{ $call }}
{{- else }}
	{{- if .Gops.Stream }}
		{{- if eq .Index 1 }}
			var n1 int
		{{- end }}
		{{ $nVar }}, err = {{ $call }}
		{{- if ge .Index 1 }}
			n += n1
		{{- end }}
		{{- if eq .Index (minus .FieldsCount 1) }}
			return
		{{- else }}
			if err != nil {
				return
			}		
		{{- end }}
	{{- else }}
		{{- if eq .Index 0 }}
			n = {{ $call }}
		{{- else if eq .Index (minus .FieldsCount 1) }}
			return n + {{ $call }}
		{{- else }}
			n += {{ $call }}
		{{- end }}
	{{- end }}
{{- end }}`
	templates["field_size.tmpl"] = `{{- /* {SerReceiver string, FieldsCount int, Field data.FieldData, Index int, Gops genops.Options} */}}
{{- $vf := print .SerReceiver "." .Field.FieldName }}
{{- $fieldSer := SerOf .Field.FullName .Tops .Gops }}

{{- $call := print $fieldSer ".Size(" $vf ")" }}
{{- if eq .FieldsCount 1 }}
	return {{ $call }}
{{- else }}
	{{- if eq .Index 0 }}
		size = {{ $call }}
	{{- else if eq .Index (minus .FieldsCount 1) }}
		return size + {{ $call }}
	{{- else }}
		size += {{ $call }}
	{{- end }}
{{- end }}`
	templates["field_skip.tmpl"] = `{{- /* {SerReceiver string, FieldsCount int, Field data.FieldData, Index int, Gops genops.Options} */}}
{{- $ulp := .Gops.UnmarshalLastParam false }}
{{- if eq .Index 0 }}
	{{- $ulp = .Gops.UnmarshalLastParam true }}
{{- end}}

{{- $vf := print .SerReceiver "." .Field.FieldName }}
{{- $fieldSer := SerOf .Field.FullName .Tops .Gops }}
{{- if eq .Index 1 }}
	var n1 int
{{- end }}
{{- $nVar := "n" }}
{{- if gt .Index 0 }}
	{{- $nVar = "n1" }}
{{- end }}
{{ $nVar }}, err = {{ $fieldSer }}.Skip({{ $ulp }})
{{- if ge .Index 1 }}
	n += n1
{{- end }}		
{{- if and (ne .FieldsCount 1) (ne .Index (minus .FieldsCount 1))}}
	if err != nil {
		return
	}
{{- end }}`
	templates["field_unmarshal.tmpl"] = `{{- /* {SerReceiver string, FieldsCount int, Field data.FieldData, Index int, Gops genops.Options} */}}
{{- $ulp := .Gops.UnmarshalLastParam false }}
{{- if eq .Index 0 }}
	{{- $ulp = .Gops.UnmarshalLastParam true }}
{{- end}}

{{- $vf := print .SerReceiver "." .Field.FieldName }}
{{- $fieldSer := SerOf .Field.FullName .Tops .Gops }}
{{- if eq .Index 1 }}
	var n1 int
{{- end }}
{{- $nVar := "n" }}
{{- if gt .Index 0 }}
	{{- $nVar = "n1" }}
{{- end }}
{{ $vf }}, {{ $nVar }}, err = {{ $fieldSer }}.Unmarshal({{ $ulp }})
{{- if ge .Index 1 }}
	n += n1
{{- end }}		
{{- if and .Tops (ne .Tops.Validator "") }}
	if err != nil {
		return
	}
	err = {{ .Tops.Validator }}({{ $vf }})
{{- end }}
{{- if and (ne .FieldsCount 1) (ne .Index (minus .FieldsCount 1))}}
	if err != nil {
		return
	}
{{- end }}`
	templates["imports.tmpl"] = `{{/* genops.Options */}}
import (
	com "github.com/mus-format/common-go"
	{{- if .Stream }}
		mus "github.com/mus-format/mus-stream-go"
		"github.com/mus-format/mus-stream-go/ord"
		"github.com/mus-format/mus-stream-go/raw"
		"github.com/mus-format/mus-stream-go/unsafe"
		"github.com/mus-format/mus-stream-go/varint"
		dts "github.com/mus-format/dts-stream-go"
		ext "github.com/mus-format/ext-stream-go"
		arrops "github.com/mus-format/mus-stream-go/options/array"
		bslops "github.com/mus-format/mus-stream-go/options/byte_slice"
		mapops "github.com/mus-format/mus-stream-go/options/map"
		slops "github.com/mus-format/mus-stream-go/options/slice"
		strops "github.com/mus-format/mus-stream-go/options/string"
	{{- else }}
	  "github.com/mus-format/mus-go"
		"github.com/mus-format/mus-go/ord"
		"github.com/mus-format/mus-go/raw"
		"github.com/mus-format/mus-go/unsafe"
		"github.com/mus-format/mus-go/varint"
		dts "github.com/mus-format/dts-go"
		ext "github.com/mus-format/ext-go"
		arrops "github.com/mus-format/mus-go/options/array"
		bslops "github.com/mus-format/mus-go/options/byte_slice"
		mapops "github.com/mus-format/mus-go/options/map"
		slops "github.com/mus-format/mus-go/options/slice"
		strops "github.com/mus-format/mus-go/options/string"
	{{- end }}
	{{- if .Imports }}
		{{- range $i, $imp := .Imports }}
			{{ $imp }}
		{{- end }}
	{{- end }}
)
`
	templates["interface_marshal.tmpl"] = `{{/* data.TypeData */}}
{{- $mlp := .Gops.MarshalLastParam true }}
{{- $v := SerReceiver . }}
{{- $iops := .Iops }}
{{- $gops := .Gops }}
{{- if $iops.Marshaller }}
	{{- $ext := .Gops.ExtPackageName }}
	if m, ok := {{ $v }}.({{ $ext }}.MarshallerTypedMUS); ok {
		return m.MarshalTypedMUS({{ $mlp }})
	}
	panic(fmt.Sprintf("%v doesn't implement the {{ $ext }}.MarshallerTypedMUS interface", reflect.TypeOf({{ $v }})))
{{- else }}
	switch t := {{ $v }}.(type) {
		{{- range $i, $e := .Impls }}
			case {{ RelName $e $gops }}:
				return {{ DTSVar $e }}.Marshal(t, {{ $mlp }})
		{{- end }}
			default:
				panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
{{- end }}
`
	templates["interface_size.tmpl"] = `{{/* data.TypeData */}}
{{- $v := SerReceiver . }}
{{- $iops := .Iops }}
{{- $gops := .Gops }}
{{- if $iops.Marshaller }}
	{{- $ext := .Gops.ExtPackageName }}
	if m, ok := {{ $v }}.({{ $ext }}.MarshallerTypedMUS); ok {
		return m.SizeTypedMUS()
	}
	panic(fmt.Sprintf("%v doesn't implement the {{ $ext }}.MarshallerTypedMUS interface", reflect.TypeOf({{ $v }})))
{{- else }}
	switch t := {{ $v }}.(type) {
	{{- range $i, $e := .Impls }}
		case {{ RelName $e $gops }}:
			return {{ DTSVar $e }}.Size(t)
	{{- end }}
		default:
			panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
{{- end }}
`
	templates["interface_skip.tmpl"] = `{{/* data.TypeData */}}
{{- $fulp := .Gops.UnmarshalLastParam true }}
{{- $ulp := .Gops.UnmarshalLastParam false }}
{{- $v := SerReceiver . }}
{{- $iops := .Iops }}
{{- $gops := .Gops }}
dtm, n, err := dts.DTMSer.Unmarshal({{ $fulp }})
if err != nil {
	return
}
var n1 int
switch dtm {
{{- range $i, $e := .Impls }}
	case {{ DTMVar $e }}:
		n1, err = {{ DTSVar $e }}.SkipData({{ $ulp }})
{{- end }}
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
}
n += n1
return
`
	templates["interface_unmarshal.tmpl"] = `{{/* data.TypeData */}}
{{- $fulp := .Gops.UnmarshalLastParam true }}
{{- $ulp := .Gops.UnmarshalLastParam false }}
{{- $v := SerReceiver . }}
{{- $iops := .Iops }}
{{- $gops := .Gops }}
dtm, n, err := dts.DTMSer.Unmarshal({{ $fulp }})
if err != nil {
	return
}
var n1 int
switch dtm {
{{- range $i, $e := .Impls }}
	case {{ DTMVar $e }}:
		{{ $v }}, n1, err = {{ DTSVar $e }}.UnmarshalData({{ $ulp }})
{{- end }}
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
}
n += n1
return
`
	templates["package.tmpl"] = `{{/* genops.Options */}}
// Code generated by musgen-go. DO NOT EDIT.

package {{ .Package }}
`
	templates["ser_defined_type.tmpl"] = `{{/* data.TypeData */}}
{{- $serVar := SerVar .FullName }}
{{- $serType := SerType .FullName }}
{{- $v := SerReceiver . }}
{{- $tmp := TmpVar . }}
{{- $Type := RelName .FullName .Gops }}
{{- $f := index .Fields 0 }}
{{- $fieldSer := SerOf $f.FullName .Tops .Gops }}
{{- $mslp := .Gops.MarshalSignatureLastParam }}
{{- $mlp := .Gops.MarshalLastParam true }}
{{- $uslp := .Gops.UnmarshalSignatureLastParam }}
{{- $ulp := .Gops.UnmarshalLastParam true}}
{{- $gops := .Gops }}

{{- $ft := RelName $f.FullName .Gops }}
{{- if PtrType $f.FullName }}
  {{- $ft = print "(" (RelName $f.FullName .Gops) ")" }}
{{- end }}

var {{ $serVar }} = {{ $serType }}{}

type {{ $serType }} struct{}

func (s {{ $serType }}) Marshal({{ $v }} {{ $Type }}, {{ $mslp }}) (n int {{ if $gops.Stream }} , err error {{ end }}) {
  return {{ $fieldSer }}.Marshal({{ $ft }}({{ $v }}), {{ $mlp }})
}

func (s {{ $serType }}) Unmarshal({{ $uslp }}) ({{ $v }} {{ $Type }}, n int, err error) {
  {{ $tmp }}, n, err := {{ $fieldSer }}.Unmarshal({{ $ulp }})
    if err != nil {
      return
    }
  {{ $v }} = {{ $Type }}({{ $tmp }})
  {{- if and .Tops (ne .Tops.Validator "") }}
    err = {{ .Tops.Validator }}({{ $v }})
  {{- end }}
  return
}

func (s {{ $serType }}) Size({{ $v }} {{ $Type }}) (size int) {
  return {{ $fieldSer }}.Size({{ $ft }}({{ $v }}))
}

func (s {{ $serType }}) Skip({{ $uslp }}) (n int, err error) {
  return {{ $fieldSer }}.Skip({{ $ulp }})
}`
	templates["ser_dts.tmpl"] = `{{/* data.TypeData */}}
{{- $dtsVar := DTSVar .FullName }}
{{- $dtmVar := DTMVar .FullName }}
{{- $serVar := SerVar .FullName }}
{{- $Type := RelName .FullName .Gops }}

var {{ $dtsVar }} = dts.New[{{ $Type }}]({{ $dtmVar }}, {{ $serVar }})`
	templates["ser_interface.tmpl"] = `{{/* data.TypeData */}}
{{- $serVar := SerVar .FullName }}
{{- $serType := SerType .FullName }}
{{- $v := SerReceiver . }}
{{- $Type := RelName .FullName .Gops }}
{{- $mslp := .Gops.MarshalSignatureLastParam }}
{{- $uslp := .Gops.UnmarshalSignatureLastParam }}
{{- $gops := .Gops }}

var {{ $serVar }} = {{ $serType }}{}

type {{ $serType }} struct{}

func (s {{ $serType }}) Marshal({{ $v }} {{ $Type }}, {{ $mslp }}) (n int {{ if $gops.Stream }} , err error {{ end }}) {
	{{- include "interface_marshal.tmpl" . -}}
}

func (s {{ $serType }}) Unmarshal({{ $uslp }}) ({{ $v }} {{ $Type }}, n int, err error) {
	{{- include "interface_unmarshal.tmpl" . -}}
}

func (s {{ $serType }}) Size({{ $v }} {{ $Type }}) (size int) {
	{{- include "interface_size.tmpl" . -}}
}

func (s {{ $serType }}) Skip({{ $uslp }}) (n int, err error) {
	{{- include "interface_skip.tmpl" . -}}
}
`
	templates["ser_struct.tmpl"] = `{{/* data.TypeData */}}
{{- $serVar := SerVar .FullName }}
{{- $serType := SerType .FullName }}
{{- $v := SerReceiver . }}
{{- $Type := RelName .FullName .Gops }}
{{- $td := . }}
{{- $mslp := .Gops.MarshalSignatureLastParam }}
{{- $uslp := .Gops.UnmarshalSignatureLastParam }}
{{- $gops := .Gops }}

var {{ $serVar }} = {{ $serType }}{}

type {{ $serType }} struct{}

func (s {{ $serType }}) Marshal({{ $v }} {{ $Type }}, {{ $mslp }}) (n int {{ if $gops.Stream }} , err error {{ end }}) {
	{{- if eq (len .SerializedFields) 0}}
		return
	{{- else }}
		{{- range $i, $f := .SerializedFields }}
			{{- include "field_marshal.tmpl" (FieldTmplPipe $td $f $i $gops) }}		
		{{- end }}
	{{- end }}
}

func (s {{ $serType }}) Unmarshal({{ $uslp }}) ({{ $v }} {{ $Type }}, n int, err error) {
	{{- range $i, $f := .SerializedFields }}
			{{- include "field_unmarshal.tmpl" (FieldTmplPipe $td $f $i $gops) }}		
	{{- end }}
	return
}

func (s {{ $serType }}) Size({{ $v }} {{ $Type }}) (size int) {
	{{- if eq (len .Fields) 0}}
		return
	{{- else }}
		{{- range $i, $f := .SerializedFields }}
			{{- include "field_size.tmpl" (FieldTmplPipe $td $f $i $gops) }}		
		{{- end }}
	{{- end }}
}

func (s {{ $serType }}) Skip({{ $uslp }}) (n int, err error) {
	{{- range $i, $f := .SerializedFields }}
		{{- include "field_skip.tmpl" (FieldTmplPipe $td $f $i $gops) }}		
	{{- end }}
	return
}`
}
