{{/* data.TypeData */}}
{{- $serVar := SerVar .FullName }}
{{- $serType := SerType .FullName }}
{{- $v := SerReceiver . }}
{{- $tmp := TmpVar . }}
{{- $Type := RelName .FullName .Gops }}
{{- $f := index .Fields 0 }}
{{- $fieldSer := SerOf $f.FullName .Tops .Gops }}
{{- $mslp := .Gops.MarshalSignatureLastParam }}
{{- $mlp := .Gops.MarshalLastParam true }}
{{- $uslp := .Gops.UnmarshalSignatureLastParam }}
{{- $ulp := .Gops.UnmarshalLastParam true}}
{{- $gops := .Gops }}

{{- $ft := RelName $f.FullName .Gops }}
{{- if PtrType $f.FullName }}
  {{- $ft = print "(" (RelName $f.FullName .Gops) ")" }}
{{- end }}

var {{ $serVar }} = {{ $serType }}{}

type {{ $serType }} struct{}

func (s {{ $serType }}) Marshal({{ $v }} {{ $Type }}, {{ $mslp }}) (n int {{ if $gops.Stream }} , err error {{ end }}) {
  return {{ $fieldSer }}.Marshal({{ $ft }}({{ $v }}), {{ $mlp }})
}

func (s {{ $serType }}) Unmarshal({{ $uslp }}) ({{ $v }} {{ $Type }}, n int, err error) {
  {{ $tmp }}, n, err := {{ $fieldSer }}.Unmarshal({{ $ulp }})
    if err != nil {
      return
    }
  {{ $v }} = {{ $Type }}({{ $tmp }})
  {{- if and .Tops (ne .Tops.Validator "") }}
    err = {{ .Tops.Validator }}({{ $v }})
  {{- end }}
  return
}

func (s {{ $serType }}) Size({{ $v }} {{ $Type }}) (size int) {
  return {{ $fieldSer }}.Size({{ $ft }}({{ $v }}))
}

func (s {{ $serType }}) Skip({{ $uslp }}) (n int, err error) {
  return {{ $fieldSer }}.Skip({{ $ulp }})
}