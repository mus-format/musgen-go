{{- $l := FieldsLen . }}
{{- $r := Receiver .Name }}
{{- $p := .Prefix }}
{{- if eq $l 0 }}
	return
{{- else }}
	{{- $c := .Conf }}
	{{- range $i, $f := Fields . }}
		{{- $a := ArrayType $f.Type}}
		{{- $v := print $r "." $f.Name }}
		{{- $fnCall := GenerateFnCall $c $v "Unmarshal" $f.Type $p $f.Metadata }}
		{{- if or (not $f.Metadata) (not $f.Metadata.Ignore) }}

{{- /* if only one field */}}

			{{- if eq $l 1 }}
				{{- if $a }}
					{{ $r }}{{ $f.Name }}, n, err := {{ $fnCall }}
					if err != nil {
						return
					}
					{{ $v }} = ({{ $f.Type }})({{ $r }}{{ $f.Name }})
				{{- else }}
					{{ $v }}, n, err = {{ $fnCall }}
				{{- end }}

				{{- if and $f.Metadata (ne $f.Metadata.Validator "") }}
					{{- if not $a }}
						if err != nil {
							return
						}
					{{- end }}
					err = {{ $f.Metadata.Validator }}({{ $v }})
				{{- end }}
				return
			{{- else }}

{{- /* if first field */}}

				{{- if eq $i 0 }}
					{{- if $a }}
						{{ $r }}{{ $f.Name }}, n, err := {{ $fnCall }}
						if err != nil {
							return
						}
						{{ $v }} = ({{ $f.Type }})({{ $r }}{{ $f.Name }})
					{{- else }}
						{{ $v }}, n, err = {{ $fnCall }}
					{{- end }}
				{{- end }}

{{- /* if second field */}}

				{{- if eq $i 1 }}
					var n1 int
				{{- end }}

{{- /* if > second field */}}

				{{- if ge $i 1 }}
					{{- if $a }}
						{{ $r }}{{ $f.Name }}, n1, err := {{ $fnCall }}
						n += n1
						if err != nil {
							return
						}
						{{ $v }} = ({{ $f.Type }})({{ $r }}{{ $f.Name }})
					{{- else }}
						{{ $v }}, n1, err = {{ $fnCall }}
						n += n1
					{{- end}}
				{{- end }}

{{- /* if not the last one field */}}

				{{- if lt $i (minus $l 1) }}
					{{- if not $a }}
						if err != nil {
							return
						}
					{{- end }}
					{{- if and $f.Metadata (ne $f.Metadata.Validator "") }}
						if err = {{ $f.Metadata.Validator }}({{ $v }}); err != nil {
							return
						}
					{{- end }}
				{{- end }}

{{- /* if the last one field */}}

				{{- if eq $i (minus $l 1) }}
					{{- if and $f.Metadata (ne $f.Metadata.Validator "") }}
						{{- if not $a }}
							if err != nil {
								return
							}
						{{- end }}
						err = {{ $f.Metadata.Validator }}({{ $v }})
					{{- end }}
					return
				{{- end }}

			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}