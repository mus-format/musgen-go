// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	"fmt"

	dts "github.com/mus-format/dts-go"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/unsafe"
	struct_testdata "github.com/mus-format/musgen-go/testdata/struct"
)

var (
	arrayYG1aU3mzj7YCΣXdHlVHA6gΞΞ = ord.NewArraySer[[3]int, int](unsafe.Int)
	map0cpd2Q2NZF4jnPkBDTXmyQΞΞ   = ord.NewMapSer[float32, map[struct_testdata.MyInt][]struct_testdata.MyStruct](unsafe.Float32, mapjxMKjCaIRYprq63pV1tmDwΞΞ)
	mapjxMKjCaIRYprq63pV1tmDwΞΞ   = ord.NewMapSer[struct_testdata.MyInt, []struct_testdata.MyStruct](MyIntMUS, slicewvXii7kpaecNnuaz4THNdgΞΞ)
	ptrL4jTS4uUTeHFblxqXZDMUAΞΞ   = ord.NewPtrSer[string](unsafe.String)
	ptraoDHz4WKbti833Ox4YL6sQΞΞ   = ord.NewPtrSer[struct_testdata.MyStruct](MyStructMUS)
	ptroUyPK8oJvKYMSfAvZhMLuwΞΞ   = ord.NewPtrSer[[3]int](arrayYG1aU3mzj7YCΣXdHlVHA6gΞΞ)
	sliceoΣoL6ayXUQ8hSkTBoXxDTQΞΞ = ord.NewSliceSer[string](unsafe.String)
	slicewvXii7kpaecNnuaz4THNdgΞΞ = ord.NewSliceSer[struct_testdata.MyStruct](MyStructMUS)
)

var MyIntMUS = myIntMUS{}

type myIntMUS struct{}

func (s myIntMUS) Marshal(v struct_testdata.MyInt, bs []byte) (n int) {
	return unsafe.Int.Marshal(int(v), bs)
}

func (s myIntMUS) Unmarshal(bs []byte) (v struct_testdata.MyInt, n int, err error) {
	tmp, n, err := unsafe.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = struct_testdata.MyInt(tmp)
	return
}

func (s myIntMUS) Size(v struct_testdata.MyInt) (size int) {
	return unsafe.Int.Size(int(v))
}

func (s myIntMUS) Skip(bs []byte) (n int, err error) {
	return unsafe.Int.Skip(bs)
}

var MySliceMUS = mySliceMUS{}

type mySliceMUS struct{}

func (s mySliceMUS) Marshal(v struct_testdata.MySlice, bs []byte) (n int) {
	return sliceoΣoL6ayXUQ8hSkTBoXxDTQΞΞ.Marshal([]string(v), bs)
}

func (s mySliceMUS) Unmarshal(bs []byte) (v struct_testdata.MySlice, n int, err error) {
	tmp, n, err := sliceoΣoL6ayXUQ8hSkTBoXxDTQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = struct_testdata.MySlice(tmp)
	return
}

func (s mySliceMUS) Size(v struct_testdata.MySlice) (size int) {
	return sliceoΣoL6ayXUQ8hSkTBoXxDTQΞΞ.Size([]string(v))
}

func (s mySliceMUS) Skip(bs []byte) (n int, err error) {
	return sliceoΣoL6ayXUQ8hSkTBoXxDTQΞΞ.Skip(bs)
}

var MyStructMUS = myStructMUS{}

type myStructMUS struct{}

func (s myStructMUS) Marshal(v struct_testdata.MyStruct, bs []byte) (n int) {
	n = unsafe.Int.Marshal(v.Int, bs)
	return n + unsafe.String.Marshal(v.Str, bs[n:])
}

func (s myStructMUS) Unmarshal(bs []byte) (v struct_testdata.MyStruct, n int, err error) {
	v.Int, n, err = unsafe.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	v.Str, n1, err = unsafe.String.Unmarshal(bs[n:])
	n += n1
	return
}

func (s myStructMUS) Size(v struct_testdata.MyStruct) (size int) {
	size = unsafe.Int.Size(v.Int)
	return size + unsafe.String.Size(v.Str)
}

func (s myStructMUS) Skip(bs []byte) (n int, err error) {
	n, err = unsafe.Int.Skip(bs)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.String.Skip(bs[n:])
	n += n1
	return
}

var MyIntDTS = dts.New[struct_testdata.MyInt](MyIntDTM, MyIntMUS)

var MyInterfaceMUS = myInterfaceMUS{}

type myInterfaceMUS struct{}

func (s myInterfaceMUS) Marshal(v struct_testdata.MyInterface, bs []byte) (n int) {
	switch t := v.(type) {
	case struct_testdata.MyInt:
		return MyIntDTS.Marshal(t, bs)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s myInterfaceMUS) Unmarshal(bs []byte) (v struct_testdata.MyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case MyIntDTM:
		v, n1, err = MyIntDTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myInterfaceMUS) Size(v struct_testdata.MyInterface) (size int) {
	switch t := v.(type) {
	case struct_testdata.MyInt:
		return MyIntDTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s myInterfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case MyIntDTM:
		n1, err = MyIntDTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

var ComplexStructMUS = complexStructMUS{}

type complexStructMUS struct{}

func (s complexStructMUS) Marshal(v struct_testdata.ComplexStruct, bs []byte) (n int) {
	n = unsafe.Bool.Marshal(v.Bool, bs)
	n += unsafe.Uint8.Marshal(v.Byte, bs[n:])
	n += unsafe.Int8.Marshal(v.Int8, bs[n:])
	n += unsafe.Int16.Marshal(v.Int16, bs[n:])
	n += unsafe.Int32.Marshal(v.Int32, bs[n:])
	n += unsafe.Int64.Marshal(v.Int64, bs[n:])
	n += unsafe.Uint8.Marshal(v.Uint8, bs[n:])
	n += unsafe.Uint16.Marshal(v.Uint16, bs[n:])
	n += unsafe.Uint32.Marshal(v.Uint32, bs[n:])
	n += unsafe.Uint64.Marshal(v.Uint64, bs[n:])
	n += unsafe.Float32.Marshal(v.Float32, bs[n:])
	n += unsafe.Float64.Marshal(v.Float64, bs[n:])
	n += unsafe.String.Marshal(v.String, bs[n:])
	n += unsafe.ByteSlice.Marshal(v.ByteSlice, bs[n:])
	n += slicewvXii7kpaecNnuaz4THNdgΞΞ.Marshal(v.StructSlice, bs[n:])
	n += arrayYG1aU3mzj7YCΣXdHlVHA6gΞΞ.Marshal(v.Array, bs[n:])
	n += ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Marshal(v.PtrString, bs[n:])
	n += ptraoDHz4WKbti833Ox4YL6sQΞΞ.Marshal(v.PtrStruct, bs[n:])
	n += ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Marshal(v.NilPtr, bs[n:])
	n += ptroUyPK8oJvKYMSfAvZhMLuwΞΞ.Marshal(v.PtrArray, bs[n:])
	n += map0cpd2Q2NZF4jnPkBDTXmyQΞΞ.Marshal(v.Map, bs[n:])
	n += unsafe.TimeUnix.Marshal(v.Time, bs[n:])
	n += MySliceMUS.Marshal(v.Alias, bs[n:])
	return n + MyInterfaceMUS.Marshal(v.Interface, bs[n:])
}

func (s complexStructMUS) Unmarshal(bs []byte) (v struct_testdata.ComplexStruct, n int, err error) {
	v.Bool, n, err = unsafe.Bool.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	v.Byte, n1, err = unsafe.Uint8.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int8, n1, err = unsafe.Int8.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int16, n1, err = unsafe.Int16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int32, n1, err = unsafe.Int32.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int64, n1, err = unsafe.Int64.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint8, n1, err = unsafe.Uint8.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint16, n1, err = unsafe.Uint16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint32, n1, err = unsafe.Uint32.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint64, n1, err = unsafe.Uint64.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Float32, n1, err = unsafe.Float32.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Float64, n1, err = unsafe.Float64.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.String, n1, err = unsafe.String.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.ByteSlice, n1, err = unsafe.ByteSlice.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.StructSlice, n1, err = slicewvXii7kpaecNnuaz4THNdgΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Array, n1, err = arrayYG1aU3mzj7YCΣXdHlVHA6gΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.PtrString, n1, err = ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.PtrStruct, n1, err = ptraoDHz4WKbti833Ox4YL6sQΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.NilPtr, n1, err = ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.PtrArray, n1, err = ptroUyPK8oJvKYMSfAvZhMLuwΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Map, n1, err = map0cpd2Q2NZF4jnPkBDTXmyQΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Time, n1, err = unsafe.TimeUnix.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Alias, n1, err = MySliceMUS.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Interface, n1, err = MyInterfaceMUS.Unmarshal(bs[n:])
	n += n1
	return
}

func (s complexStructMUS) Size(v struct_testdata.ComplexStruct) (size int) {
	size = unsafe.Bool.Size(v.Bool)
	size += unsafe.Uint8.Size(v.Byte)
	size += unsafe.Int8.Size(v.Int8)
	size += unsafe.Int16.Size(v.Int16)
	size += unsafe.Int32.Size(v.Int32)
	size += unsafe.Int64.Size(v.Int64)
	size += unsafe.Uint8.Size(v.Uint8)
	size += unsafe.Uint16.Size(v.Uint16)
	size += unsafe.Uint32.Size(v.Uint32)
	size += unsafe.Uint64.Size(v.Uint64)
	size += unsafe.Float32.Size(v.Float32)
	size += unsafe.Float64.Size(v.Float64)
	size += unsafe.String.Size(v.String)
	size += unsafe.ByteSlice.Size(v.ByteSlice)
	size += slicewvXii7kpaecNnuaz4THNdgΞΞ.Size(v.StructSlice)
	size += arrayYG1aU3mzj7YCΣXdHlVHA6gΞΞ.Size(v.Array)
	size += ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Size(v.PtrString)
	size += ptraoDHz4WKbti833Ox4YL6sQΞΞ.Size(v.PtrStruct)
	size += ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Size(v.NilPtr)
	size += ptroUyPK8oJvKYMSfAvZhMLuwΞΞ.Size(v.PtrArray)
	size += map0cpd2Q2NZF4jnPkBDTXmyQΞΞ.Size(v.Map)
	size += unsafe.TimeUnix.Size(v.Time)
	size += MySliceMUS.Size(v.Alias)
	return size + MyInterfaceMUS.Size(v.Interface)
}

func (s complexStructMUS) Skip(bs []byte) (n int, err error) {
	n, err = unsafe.Bool.Skip(bs)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.Uint8.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int8.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int32.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int64.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint8.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint32.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint64.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Float32.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Float64.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.String.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.ByteSlice.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = slicewvXii7kpaecNnuaz4THNdgΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = arrayYG1aU3mzj7YCΣXdHlVHA6gΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptraoDHz4WKbti833Ox4YL6sQΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrL4jTS4uUTeHFblxqXZDMUAΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptroUyPK8oJvKYMSfAvZhMLuwΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = map0cpd2Q2NZF4jnPkBDTXmyQΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.TimeUnix.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceMUS.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = MyInterfaceMUS.Skip(bs[n:])
	n += n1
	return
}
