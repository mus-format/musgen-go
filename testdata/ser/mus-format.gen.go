// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	"fmt"

	com "github.com/mus-format/common-go"
	dts "github.com/mus-format/dts-go"
	"github.com/mus-format/mus-go/ord"
	another "github.com/mus-format/musgen-go/testdata/ser/pkg"
)

var (
	sliceutdRM5F3Mq1QtIDΣkUispAΞΞ = ord.NewSliceSer[another.MyInt](another.MyAwesomeIntMUS)
)

var MySliceMUS = mySliceMUS{}

type mySliceMUS struct{}

func (s mySliceMUS) Marshal(v MySlice, bs []byte) (n int) {
	return sliceutdRM5F3Mq1QtIDΣkUispAΞΞ.Marshal([]another.MyInt(v), bs)
}

func (s mySliceMUS) Unmarshal(bs []byte) (v MySlice, n int, err error) {
	tmp, n, err := sliceutdRM5F3Mq1QtIDΣkUispAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MySlice(tmp)
	return
}

func (s mySliceMUS) Size(v MySlice) (size int) {
	return sliceutdRM5F3Mq1QtIDΣkUispAΞΞ.Size([]another.MyInt(v))
}

func (s mySliceMUS) Skip(bs []byte) (n int, err error) {
	return sliceutdRM5F3Mq1QtIDΣkUispAΞΞ.Skip(bs)
}

var MyAwesomeStructMUS = myAwesomeStructMUS{}

type myAwesomeStructMUS struct{}

func (s myAwesomeStructMUS) Marshal(v MyStruct, bs []byte) (n int) {
	return another.MyAwesomeIntMUS.Marshal(v.MyInt, bs)
}

func (s myAwesomeStructMUS) Unmarshal(bs []byte) (v MyStruct, n int, err error) {
	v.MyInt, n, err = another.MyAwesomeIntMUS.Unmarshal(bs)
	return
}

func (s myAwesomeStructMUS) Size(v MyStruct) (size int) {
	return another.MyAwesomeIntMUS.Size(v.MyInt)
}

func (s myAwesomeStructMUS) Skip(bs []byte) (n int, err error) {
	n, err = another.MyAwesomeIntMUS.Skip(bs)
	return
}

var MyAwesomeStructDTS = dts.New[MyStruct](MyAwesomeStructDTM, MyAwesomeStructMUS)

var MyAwesomeInterfaceMUS = myAwesomeInterfaceMUS{}

type myAwesomeInterfaceMUS struct{}

func (s myAwesomeInterfaceMUS) Marshal(v MyInterface, bs []byte) (n int) {
	switch t := v.(type) {
	case another.MyInt:
		return another.MyAwesomeIntDTS.Marshal(t, bs)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myAwesomeInterfaceMUS) Unmarshal(bs []byte) (v MyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case another.MyAwesomeIntDTM:
		v, n1, err = another.MyAwesomeIntDTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myAwesomeInterfaceMUS) Size(v MyInterface) (size int) {
	switch t := v.(type) {
	case another.MyInt:
		return another.MyAwesomeIntDTS.Size(t)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myAwesomeInterfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case another.MyAwesomeIntDTM:
		n1, err = another.MyAwesomeIntDTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
