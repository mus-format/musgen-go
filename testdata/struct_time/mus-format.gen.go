// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	"time"

	"github.com/mus-format/mus-go/raw"
)

var MyMicroTimeMUS = myMicroTimeMUS{}

type myMicroTimeMUS struct{}

func (s myMicroTimeMUS) Marshal(v MyMicroTime, bs []byte) (n int) {
	return raw.TimeUnixMicro.Marshal(time.Time(v), bs)
}

func (s myMicroTimeMUS) Unmarshal(bs []byte) (v MyMicroTime, n int, err error) {
	tmp, n, err := raw.TimeUnixMicro.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyMicroTime(tmp)
	return
}

func (s myMicroTimeMUS) Size(v MyMicroTime) (size int) {
	return raw.TimeUnixMicro.Size(time.Time(v))
}

func (s myMicroTimeMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixMicro.Skip(bs)
}

var MyDefaultTimeMUS = myDefaultTimeMUS{}

type myDefaultTimeMUS struct{}

func (s myDefaultTimeMUS) Marshal(v MyDefaultTime, bs []byte) (n int) {
	return raw.TimeUnix.Marshal(time.Time(v), bs)
}

func (s myDefaultTimeMUS) Unmarshal(bs []byte) (v MyDefaultTime, n int, err error) {
	tmp, n, err := raw.TimeUnix.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyDefaultTime(tmp)
	return
}

func (s myDefaultTimeMUS) Size(v MyDefaultTime) (size int) {
	return raw.TimeUnix.Size(time.Time(v))
}

func (s myDefaultTimeMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnix.Skip(bs)
}
