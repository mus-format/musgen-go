// Code generated by musgen-go. DO NOT EDIT.

package pkg1

import (
	muss "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/ord"
	"github.com/mus-format/mus-stream-go/varint"
)

func MarshalStreamIntAliasMUS(v IntAlias, w muss.Writer) (n int, err error) {
	return varint.MarshalInt(int(v), w)
}

func UnmarshalStreamIntAliasMUS(r muss.Reader) (v IntAlias, n int, err error) {
	va, n, err := varint.UnmarshalInt(r)
	if err != nil {
		return
	}
	v = IntAlias(va)
	return
}

func SizeStreamIntAliasMUS(v IntAlias) (size int) {
	return varint.SizeInt(int(v))
}

func SkipStreamIntAliasMUS(r muss.Reader) (n int, err error) {
	return varint.SkipInt(r)
}

func MarshalStreamByteSliceAliasMUS(v ByteSliceAlias, w muss.Writer) (n int, err error) {
	return ord.MarshalByteSlice([]uint8(v),
		nil,
		w)
}

func UnmarshalStreamByteSliceAliasMUS(r muss.Reader) (v ByteSliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalByteSlice(nil,
		r)
	if err != nil {
		return
	}
	v = ByteSliceAlias(va)
	return
}

func SizeStreamByteSliceAliasMUS(v ByteSliceAlias) (size int) {
	return ord.SizeByteSlice([]uint8(v),
		nil)
}

func SkipStreamByteSliceAliasMUS(r muss.Reader) (n int, err error) {
	return ord.SkipByteSlice(nil,
		r)
}

func MarshalStreamSliceAliasMUS(v SliceAlias, w muss.Writer) (n int, err error) {
	return ord.MarshalSlice[int]([]int(v),
		nil,
		muss.MarshallerFn[int](varint.MarshalInt),
		w)
}

func UnmarshalStreamSliceAliasMUS(r muss.Reader) (v SliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalSlice[int](nil,
		muss.UnmarshallerFn[int](varint.UnmarshalInt),
		r)
	if err != nil {
		return
	}
	v = SliceAlias(va)
	return
}

func SizeStreamSliceAliasMUS(v SliceAlias) (size int) {
	return ord.SizeSlice[int]([]int(v),
		nil,
		muss.SizerFn[int](varint.SizeInt))
}

func SkipStreamSliceAliasMUS(r muss.Reader) (n int, err error) {
	return ord.SkipSlice(nil,
		muss.SkipperFn(varint.SkipInt),
		r)
}
