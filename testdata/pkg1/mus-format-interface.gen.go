// Code generated by musgen-go. DO NOT EDIT.\n\npackage

package pkg1

import (
	"fmt"

	dts "github.com/mus-format/mus-dts-go"
)

func MarshalInterfaceMUS(v Interface, bs []byte) (n int) {
	switch tp := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Marshal(tp, bs[n:])
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Marshal(tp, bs[n:])
	default:
		panic(fmt.Errorf("unexpected %v type", tp))
	}
}

func UnmarshalInterfaceMUS(bs []byte) (v Interface, n int, err error) {
	dtm, n, err := dts.UnmarshalDTM(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		v, n1, err = InterfaceImpl1DTS.UnmarshalData(bs[n:])
	case InterfaceImpl2DTM:
		v, n1, err = InterfaceImpl2DTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func SizeInterfaceMUS(v Interface) (size int) {
	switch tp := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Size(tp)
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Size(tp)
	default:
		panic(fmt.Errorf("unexpected %v type", tp))
	}
}

func SkipInterfaceMUS(bs []byte) (n int, err error) {
	dtm, n, err := dts.UnmarshalDTM(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		n1, err = InterfaceImpl1DTS.SkipData(bs[n:])
	case InterfaceImpl2DTM:
		n1, err = InterfaceImpl2DTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
