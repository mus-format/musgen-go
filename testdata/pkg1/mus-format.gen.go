// Code generated by musgen-go. DO NOT EDIT.

package pkg1

import (
	"fmt"
	"time"

	com "github.com/mus-format/common-go"
	dts "github.com/mus-format/mus-dts-go"
	arrops "github.com/mus-format/mus-go/options/array"
	bslops "github.com/mus-format/mus-go/options/byte_slice"
	mapops "github.com/mus-format/mus-go/options/map"
	slops "github.com/mus-format/mus-go/options/slice"
	strops "github.com/mus-format/mus-go/options/string"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/raw"
	"github.com/mus-format/mus-go/varint"
	"github.com/mus-format/musgen-go/testdata"
	"github.com/mus-format/musgen-go/testdata/pkg2"
)

var (
	arrayRuX3ffcBMbWzRHkOFcnegAΞΞ      = ord.NewArraySer[[3]int, int](3, raw.Int)
	arrayZZrMuafde4zs9nWQ9V29GQΞΞ      = ord.NewValidArraySer[[3]int, int](3, raw.Int, arrops.WithLenSer[int](raw.Int), arrops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	arraycrM9UZcGb9US7pO18XSo2wΞΞ      = ord.NewArraySer[[3]int, int](3, varint.Int, arrops.WithLenSer[int](raw.Int))
	arrayr4wy7nYWZsCSpVj9NWA6awΞΞ      = ord.NewArraySer[[3]int, int](3, varint.Int)
	arrayrGTVpvMKsXWK7EdLjJ2VwQΞΞ      = ord.NewArraySer[[3]int, int](3, varint.Int)
	arrayrwzdrNpi3ynΔqO1zΔn7rmwΞΞ      = ord.NewValidArraySer[[3]int, int](3, varint.Int, arrops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	byte_sliceDcCgbxlDhn4GkcmK8YCyΔAΞΞ = ord.NewValidByteSliceSer(bslops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
	byte_sliceoQ9IRuMdcV5ml2YRw53jjwΞΞ = ord.NewValidByteSliceSer(bslops.WithLenSer(raw.Int), bslops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
	byte_sliceuivYF4GycfHkNaAtJaA7gAΞΞ = ord.NewByteSliceSer(bslops.WithLenSer(raw.Int))
	map0LSMnwmCsOA77HuΣMun3JQΞΞ        = ord.NewMapSer[int, int](varint.Int, varint.Int)
	map2lsFWNc17ZLpZkUeycFdCwΞΞ        = ord.NewValidMapSer[int, int](raw.Int, raw.Int, mapops.WithLenSer[int, int](raw.Int), mapops.WithLenValidator[int, int](com.ValidatorFn[int](testdata.ValidateLength)), mapops.WithKeyValidator[int, int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])), mapops.WithValueValidator[int, int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	map3PMuzhUAOypD4DqSnnWKagΞΞ        = ord.NewValidMapSer[int, int](varint.Int, varint.Int, mapops.WithValueValidator[int, int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	map43fUS2Δt05YvrYGcEuvKNAΞΞ        = ord.NewMapSer[int, int](varint.Int, raw.Int)
	mapFANab1bxFDU2CxNSnYEESQΞΞ        = ord.NewValidMapSer[int, int](varint.Int, varint.Int, mapops.WithLenValidator[int, int](com.ValidatorFn[int](testdata.ValidateLength)))
	mapPzIcvjΣwfJGjQIn9lMmKΔwΞΞ        = ord.NewMapSer[MyInt, []SimpleStruct](MyIntMUS, sliceJ9mM3TwH9NGSRg9dRM34dAΞΞ)
	mapgΔPfXh6ykvALhZI24oΣUwgΞΞ        = ord.NewValidMapSer[int, int](varint.Int, varint.Int, mapops.WithKeyValidator[int, int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	maph2OI1HM8rEDN92oicn3y0QΞΞ        = ord.NewMapSer[int, int](varint.Int, varint.Int, mapops.WithLenSer[int, int](raw.Int))
	mapsHWUiae8MVARLFKhf3bGHwΞΞ        = ord.NewMapSer[int, int](raw.Int, varint.Int)
	mapuK6uyoyios3ppjQeSCtptAΞΞ        = ord.NewMapSer[int, int](varint.Int, varint.Int)
	mapwpOMFlKEe81rTT4qnhycUAΞΞ        = ord.NewMapSer[float32, map[MyInt][]SimpleStruct](varint.Float32, mapPzIcvjΣwfJGjQIn9lMmKΔwΞΞ)
	ptr4ΣGeyl4njXOpw7dXGWlhlwΞΞ        = ord.NewPtrSer[*Interface](ptrRt47LK07JBJ3WPm4bGwgvgΞΞ)
	ptrLGSRJu6LxqOYCY4EvJlaXgΞΞ        = ord.NewPtrSer[int](varint.Int)
	ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ        = ord.NewPtrSer[string](ord.String)
	ptrRt47LK07JBJ3WPm4bGwgvgΞΞ        = ord.NewPtrSer[Interface](InterfaceMUS)
	ptreTXEΔQvZPl1AWyH50l7g8QΞΞ        = ord.NewPtrSer[int](raw.Int)
	ptrikbRqA7BO81F7es2ThTZΔgΞΞ        = ord.NewPtrSer[[3]int](arrayr4wy7nYWZsCSpVj9NWA6awΞΞ)
	ptriwXcXXMJxv0fwmlU8fBUFQΞΞ        = ord.NewPtrSer[int](varint.Int)
	ptrvDcVHNNl1fY23xdΔryHx7wΞΞ        = ord.NewPtrSer[SimpleStruct](SimpleStructMUS)
	slice7v8xiCJyDayHEcMoBUAERQΞΞ      = ord.NewSliceSer[int](varint.Int, slops.WithLenSer[int](raw.Int))
	slice8Bmgo57SJrl1jkVk3uFkvwΞΞ      = ord.NewValidSliceSer[int](varint.Int, slops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	sliceJ9mM3TwH9NGSRg9dRM34dAΞΞ      = ord.NewSliceSer[SimpleStruct](SimpleStructMUS)
	sliceRJD1qΔgsYzv84V3Gfz6c0wΞΞ      = ord.NewSliceSer[int](raw.Int)
	sliceXsiMRO2Fc4hG6R7wrB7GIAΞΞ      = ord.NewValidSliceSer[int](varint.Int, slops.WithLenValidator[int](com.ValidatorFn[int](testdata.ValidateLength)))
	slicenXQ4BhwΔjyAbWO9CVN0bXgΞΞ      = ord.NewValidSliceSer[int](raw.Int, slops.WithLenSer[int](raw.Int), slops.WithLenValidator[int](com.ValidatorFn[int](testdata.ValidateLength)), slops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	slicewNkFf0X21pMEy6cgry3oZQΞΞ      = ord.NewSliceSer[int](varint.Int)
	string6DO1S6ZwcLfItΣZS8XhRmwΞΞ     = ord.NewValidStringSer(strops.WithLenSer(raw.Int), strops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
	stringoykcSTYdDaq1pqAVTzfp3QΞΞ     = ord.NewValidStringSer(strops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
	stringpoyvVnsIiYmxsyLX8PnMRQΞΞ     = ord.NewStringSer(strops.WithLenSer(raw.Int))
)

var MyIntMUS = myIntMUS{}

type myIntMUS struct{}

func (s myIntMUS) Marshal(v MyInt, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s myIntMUS) Unmarshal(bs []byte) (v MyInt, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyInt(tmp)
	return
}

func (s myIntMUS) Size(v MyInt) (size int) {
	return varint.Int.Size(int(v))
}

func (s myIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var RawMyIntMUS = rawMyIntMUS{}

type rawMyIntMUS struct{}

func (s rawMyIntMUS) Marshal(v RawMyInt, bs []byte) (n int) {
	return raw.Int.Marshal(int(v), bs)
}

func (s rawMyIntMUS) Unmarshal(bs []byte) (v RawMyInt, n int, err error) {
	tmp, n, err := raw.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = RawMyInt(tmp)
	return
}

func (s rawMyIntMUS) Size(v RawMyInt) (size int) {
	return raw.Int.Size(int(v))
}

func (s rawMyIntMUS) Skip(bs []byte) (n int, err error) {
	return raw.Int.Skip(bs)
}

var VarintPositiveMyIntMUS = varintPositiveMyIntMUS{}

type varintPositiveMyIntMUS struct{}

func (s varintPositiveMyIntMUS) Marshal(v VarintPositiveMyInt, bs []byte) (n int) {
	return varint.PositiveInt.Marshal(int(v), bs)
}

func (s varintPositiveMyIntMUS) Unmarshal(bs []byte) (v VarintPositiveMyInt, n int, err error) {
	tmp, n, err := varint.PositiveInt.Unmarshal(bs)
	if err != nil {
		return
	}
	v = VarintPositiveMyInt(tmp)
	return
}

func (s varintPositiveMyIntMUS) Size(v VarintPositiveMyInt) (size int) {
	return varint.PositiveInt.Size(int(v))
}

func (s varintPositiveMyIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.PositiveInt.Skip(bs)
}

var ValidMyIntMUS = validMyIntMUS{}

type validMyIntMUS struct{}

func (s validMyIntMUS) Marshal(v ValidMyInt, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s validMyIntMUS) Unmarshal(bs []byte) (v ValidMyInt, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyInt(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s validMyIntMUS) Size(v ValidMyInt) (size int) {
	return varint.Int.Size(int(v))
}

func (s validMyIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var AllMyIntMUS = allMyIntMUS{}

type allMyIntMUS struct{}

func (s allMyIntMUS) Marshal(v AllMyInt, bs []byte) (n int) {
	return raw.Int.Marshal(int(v), bs)
}

func (s allMyIntMUS) Unmarshal(bs []byte) (v AllMyInt, n int, err error) {
	tmp, n, err := raw.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyInt(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s allMyIntMUS) Size(v AllMyInt) (size int) {
	return raw.Int.Size(int(v))
}

func (s allMyIntMUS) Skip(bs []byte) (n int, err error) {
	return raw.Int.Skip(bs)
}

var MyStringMUS = myStringMUS{}

type myStringMUS struct{}

func (s myStringMUS) Marshal(v MyString, bs []byte) (n int) {
	return ord.String.Marshal(string(v), bs)
}

func (s myStringMUS) Unmarshal(bs []byte) (v MyString, n int, err error) {
	tmp, n, err := ord.String.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyString(tmp)
	return
}

func (s myStringMUS) Size(v MyString) (size int) {
	return ord.String.Size(string(v))
}

func (s myStringMUS) Skip(bs []byte) (n int, err error) {
	return ord.String.Skip(bs)
}

var LenEncodingMyStringMUS = lenEncodingMyStringMUS{}

type lenEncodingMyStringMUS struct{}

func (s lenEncodingMyStringMUS) Marshal(v LenEncodingMyString, bs []byte) (n int) {
	return stringpoyvVnsIiYmxsyLX8PnMRQΞΞ.Marshal(string(v), bs)
}

func (s lenEncodingMyStringMUS) Unmarshal(bs []byte) (v LenEncodingMyString, n int, err error) {
	tmp, n, err := stringpoyvVnsIiYmxsyLX8PnMRQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyString(tmp)
	return
}

func (s lenEncodingMyStringMUS) Size(v LenEncodingMyString) (size int) {
	return stringpoyvVnsIiYmxsyLX8PnMRQΞΞ.Size(string(v))
}

func (s lenEncodingMyStringMUS) Skip(bs []byte) (n int, err error) {
	return stringpoyvVnsIiYmxsyLX8PnMRQΞΞ.Skip(bs)
}

var LenValidMyStringMUS = lenValidMyStringMUS{}

type lenValidMyStringMUS struct{}

func (s lenValidMyStringMUS) Marshal(v LenValidMyString, bs []byte) (n int) {
	return stringoykcSTYdDaq1pqAVTzfp3QΞΞ.Marshal(string(v), bs)
}

func (s lenValidMyStringMUS) Unmarshal(bs []byte) (v LenValidMyString, n int, err error) {
	tmp, n, err := stringoykcSTYdDaq1pqAVTzfp3QΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMyString(tmp)
	return
}

func (s lenValidMyStringMUS) Size(v LenValidMyString) (size int) {
	return stringoykcSTYdDaq1pqAVTzfp3QΞΞ.Size(string(v))
}

func (s lenValidMyStringMUS) Skip(bs []byte) (n int, err error) {
	return stringoykcSTYdDaq1pqAVTzfp3QΞΞ.Skip(bs)
}

var ValidMyStringMUS = validMyStringMUS{}

type validMyStringMUS struct{}

func (s validMyStringMUS) Marshal(v ValidMyString, bs []byte) (n int) {
	return ord.String.Marshal(string(v), bs)
}

func (s validMyStringMUS) Unmarshal(bs []byte) (v ValidMyString, n int, err error) {
	tmp, n, err := ord.String.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyString(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s validMyStringMUS) Size(v ValidMyString) (size int) {
	return ord.String.Size(string(v))
}

func (s validMyStringMUS) Skip(bs []byte) (n int, err error) {
	return ord.String.Skip(bs)
}

var AllMyStringMUS = allMyStringMUS{}

type allMyStringMUS struct{}

func (s allMyStringMUS) Marshal(v AllMyString, bs []byte) (n int) {
	return string6DO1S6ZwcLfItΣZS8XhRmwΞΞ.Marshal(string(v), bs)
}

func (s allMyStringMUS) Unmarshal(bs []byte) (v AllMyString, n int, err error) {
	tmp, n, err := string6DO1S6ZwcLfItΣZS8XhRmwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyString(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s allMyStringMUS) Size(v AllMyString) (size int) {
	return string6DO1S6ZwcLfItΣZS8XhRmwΞΞ.Size(string(v))
}

func (s allMyStringMUS) Skip(bs []byte) (n int, err error) {
	return string6DO1S6ZwcLfItΣZS8XhRmwΞΞ.Skip(bs)
}

var MyTimeMUS = myTimeMUS{}

type myTimeMUS struct{}

func (s myTimeMUS) Marshal(v MyTime, bs []byte) (n int) {
	return raw.TimeUnix.Marshal(time.Time(v), bs)
}

func (s myTimeMUS) Unmarshal(bs []byte) (v MyTime, n int, err error) {
	tmp, n, err := raw.TimeUnix.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTime(tmp)
	return
}

func (s myTimeMUS) Size(v MyTime) (size int) {
	return raw.TimeUnix.Size(time.Time(v))
}

func (s myTimeMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnix.Skip(bs)
}

var MyTimeSecMUS = myTimeSecMUS{}

type myTimeSecMUS struct{}

func (s myTimeSecMUS) Marshal(v MyTimeSec, bs []byte) (n int) {
	return raw.TimeUnix.Marshal(time.Time(v), bs)
}

func (s myTimeSecMUS) Unmarshal(bs []byte) (v MyTimeSec, n int, err error) {
	tmp, n, err := raw.TimeUnix.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeSec(tmp)
	return
}

func (s myTimeSecMUS) Size(v MyTimeSec) (size int) {
	return raw.TimeUnix.Size(time.Time(v))
}

func (s myTimeSecMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnix.Skip(bs)
}

var MyTimeMilliMUS = myTimeMilliMUS{}

type myTimeMilliMUS struct{}

func (s myTimeMilliMUS) Marshal(v MyTimeMilli, bs []byte) (n int) {
	return raw.TimeUnixMilli.Marshal(time.Time(v), bs)
}

func (s myTimeMilliMUS) Unmarshal(bs []byte) (v MyTimeMilli, n int, err error) {
	tmp, n, err := raw.TimeUnixMilli.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeMilli(tmp)
	return
}

func (s myTimeMilliMUS) Size(v MyTimeMilli) (size int) {
	return raw.TimeUnixMilli.Size(time.Time(v))
}

func (s myTimeMilliMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixMilli.Skip(bs)
}

var MyTimeMicroMUS = myTimeMicroMUS{}

type myTimeMicroMUS struct{}

func (s myTimeMicroMUS) Marshal(v MyTimeMicro, bs []byte) (n int) {
	return raw.TimeUnixMicro.Marshal(time.Time(v), bs)
}

func (s myTimeMicroMUS) Unmarshal(bs []byte) (v MyTimeMicro, n int, err error) {
	tmp, n, err := raw.TimeUnixMicro.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeMicro(tmp)
	return
}

func (s myTimeMicroMUS) Size(v MyTimeMicro) (size int) {
	return raw.TimeUnixMicro.Size(time.Time(v))
}

func (s myTimeMicroMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixMicro.Skip(bs)
}

var MyTimeNanoMUS = myTimeNanoMUS{}

type myTimeNanoMUS struct{}

func (s myTimeNanoMUS) Marshal(v MyTimeNano, bs []byte) (n int) {
	return raw.TimeUnixNano.Marshal(time.Time(v), bs)
}

func (s myTimeNanoMUS) Unmarshal(bs []byte) (v MyTimeNano, n int, err error) {
	tmp, n, err := raw.TimeUnixNano.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeNano(tmp)
	return
}

func (s myTimeNanoMUS) Size(v MyTimeNano) (size int) {
	return raw.TimeUnixNano.Size(time.Time(v))
}

func (s myTimeNanoMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixNano.Skip(bs)
}

var MyTimeSecUTCMUS = myTimeSecUTCMUS{}

type myTimeSecUTCMUS struct{}

func (s myTimeSecUTCMUS) Marshal(v MyTimeSecUTC, bs []byte) (n int) {
	return raw.TimeUnixUTC.Marshal(time.Time(v), bs)
}

func (s myTimeSecUTCMUS) Unmarshal(bs []byte) (v MyTimeSecUTC, n int, err error) {
	tmp, n, err := raw.TimeUnixUTC.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeSecUTC(tmp)
	return
}

func (s myTimeSecUTCMUS) Size(v MyTimeSecUTC) (size int) {
	return raw.TimeUnixUTC.Size(time.Time(v))
}

func (s myTimeSecUTCMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixUTC.Skip(bs)
}

var MyTimeMilliUTCMUS = myTimeMilliUTCMUS{}

type myTimeMilliUTCMUS struct{}

func (s myTimeMilliUTCMUS) Marshal(v MyTimeMilliUTC, bs []byte) (n int) {
	return raw.TimeUnixMilliUTC.Marshal(time.Time(v), bs)
}

func (s myTimeMilliUTCMUS) Unmarshal(bs []byte) (v MyTimeMilliUTC, n int, err error) {
	tmp, n, err := raw.TimeUnixMilliUTC.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeMilliUTC(tmp)
	return
}

func (s myTimeMilliUTCMUS) Size(v MyTimeMilliUTC) (size int) {
	return raw.TimeUnixMilliUTC.Size(time.Time(v))
}

func (s myTimeMilliUTCMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixMilliUTC.Skip(bs)
}

var MyTimeMicroUTCMUS = myTimeMicroUTCMUS{}

type myTimeMicroUTCMUS struct{}

func (s myTimeMicroUTCMUS) Marshal(v MyTimeMicroUTC, bs []byte) (n int) {
	return raw.TimeUnixMicroUTC.Marshal(time.Time(v), bs)
}

func (s myTimeMicroUTCMUS) Unmarshal(bs []byte) (v MyTimeMicroUTC, n int, err error) {
	tmp, n, err := raw.TimeUnixMicroUTC.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeMicroUTC(tmp)
	return
}

func (s myTimeMicroUTCMUS) Size(v MyTimeMicroUTC) (size int) {
	return raw.TimeUnixMicroUTC.Size(time.Time(v))
}

func (s myTimeMicroUTCMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixMicroUTC.Skip(bs)
}

var MyTimeNanoUTCMUS = myTimeNanoUTCMUS{}

type myTimeNanoUTCMUS struct{}

func (s myTimeNanoUTCMUS) Marshal(v MyTimeNanoUTC, bs []byte) (n int) {
	return raw.TimeUnixNanoUTC.Marshal(time.Time(v), bs)
}

func (s myTimeNanoUTCMUS) Unmarshal(bs []byte) (v MyTimeNanoUTC, n int, err error) {
	tmp, n, err := raw.TimeUnixNanoUTC.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyTimeNanoUTC(tmp)
	return
}

func (s myTimeNanoUTCMUS) Size(v MyTimeNanoUTC) (size int) {
	return raw.TimeUnixNanoUTC.Size(time.Time(v))
}

func (s myTimeNanoUTCMUS) Skip(bs []byte) (n int, err error) {
	return raw.TimeUnixNanoUTC.Skip(bs)
}

var MyArrayMUS = myArrayMUS{}

type myArrayMUS struct{}

func (s myArrayMUS) Marshal(v MyArray, bs []byte) (n int) {
	return arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Marshal([3]int(v), bs)
}

func (s myArrayMUS) Unmarshal(bs []byte) (v MyArray, n int, err error) {
	tmp, n, err := arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyArray(tmp)
	return
}

func (s myArrayMUS) Size(v MyArray) (size int) {
	return arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Size([3]int(v))
}

func (s myArrayMUS) Skip(bs []byte) (n int, err error) {
	return arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Skip(bs)
}

var LenEncodingMyArrayMUS = lenEncodingMyArrayMUS{}

type lenEncodingMyArrayMUS struct{}

func (s lenEncodingMyArrayMUS) Marshal(v LenEncodingMyArray, bs []byte) (n int) {
	return arraycrM9UZcGb9US7pO18XSo2wΞΞ.Marshal([3]int(v), bs)
}

func (s lenEncodingMyArrayMUS) Unmarshal(bs []byte) (v LenEncodingMyArray, n int, err error) {
	tmp, n, err := arraycrM9UZcGb9US7pO18XSo2wΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyArray(tmp)
	return
}

func (s lenEncodingMyArrayMUS) Size(v LenEncodingMyArray) (size int) {
	return arraycrM9UZcGb9US7pO18XSo2wΞΞ.Size([3]int(v))
}

func (s lenEncodingMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arraycrM9UZcGb9US7pO18XSo2wΞΞ.Skip(bs)
}

var ElemEncodingMyArrayMUS = elemEncodingMyArrayMUS{}

type elemEncodingMyArrayMUS struct{}

func (s elemEncodingMyArrayMUS) Marshal(v ElemEncodingMyArray, bs []byte) (n int) {
	return arrayRuX3ffcBMbWzRHkOFcnegAΞΞ.Marshal([3]int(v), bs)
}

func (s elemEncodingMyArrayMUS) Unmarshal(bs []byte) (v ElemEncodingMyArray, n int, err error) {
	tmp, n, err := arrayRuX3ffcBMbWzRHkOFcnegAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemEncodingMyArray(tmp)
	return
}

func (s elemEncodingMyArrayMUS) Size(v ElemEncodingMyArray) (size int) {
	return arrayRuX3ffcBMbWzRHkOFcnegAΞΞ.Size([3]int(v))
}

func (s elemEncodingMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arrayRuX3ffcBMbWzRHkOFcnegAΞΞ.Skip(bs)
}

var ElemValidMyArrayMUS = elemValidMyArrayMUS{}

type elemValidMyArrayMUS struct{}

func (s elemValidMyArrayMUS) Marshal(v ElemValidMyArray, bs []byte) (n int) {
	return arrayrwzdrNpi3ynΔqO1zΔn7rmwΞΞ.Marshal([3]int(v), bs)
}

func (s elemValidMyArrayMUS) Unmarshal(bs []byte) (v ElemValidMyArray, n int, err error) {
	tmp, n, err := arrayrwzdrNpi3ynΔqO1zΔn7rmwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemValidMyArray(tmp)
	return
}

func (s elemValidMyArrayMUS) Size(v ElemValidMyArray) (size int) {
	return arrayrwzdrNpi3ynΔqO1zΔn7rmwΞΞ.Size([3]int(v))
}

func (s elemValidMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arrayrwzdrNpi3ynΔqO1zΔn7rmwΞΞ.Skip(bs)
}

var ValidMyArrayMUS = validMyArrayMUS{}

type validMyArrayMUS struct{}

func (s validMyArrayMUS) Marshal(v ValidMyArray, bs []byte) (n int) {
	return arrayrGTVpvMKsXWK7EdLjJ2VwQΞΞ.Marshal([3]int(v), bs)
}

func (s validMyArrayMUS) Unmarshal(bs []byte) (v ValidMyArray, n int, err error) {
	tmp, n, err := arrayrGTVpvMKsXWK7EdLjJ2VwQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyArray(tmp)
	err = testdata.ValidateZeroValue[[3]int](v)
	return
}

func (s validMyArrayMUS) Size(v ValidMyArray) (size int) {
	return arrayrGTVpvMKsXWK7EdLjJ2VwQΞΞ.Size([3]int(v))
}

func (s validMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arrayrGTVpvMKsXWK7EdLjJ2VwQΞΞ.Skip(bs)
}

var AllMyArrayMUS = allMyArrayMUS{}

type allMyArrayMUS struct{}

func (s allMyArrayMUS) Marshal(v AllMyArray, bs []byte) (n int) {
	return arrayZZrMuafde4zs9nWQ9V29GQΞΞ.Marshal([3]int(v), bs)
}

func (s allMyArrayMUS) Unmarshal(bs []byte) (v AllMyArray, n int, err error) {
	tmp, n, err := arrayZZrMuafde4zs9nWQ9V29GQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyArray(tmp)
	err = testdata.ValidateZeroValue[[3]int](v)
	return
}

func (s allMyArrayMUS) Size(v AllMyArray) (size int) {
	return arrayZZrMuafde4zs9nWQ9V29GQΞΞ.Size([3]int(v))
}

func (s allMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arrayZZrMuafde4zs9nWQ9V29GQΞΞ.Skip(bs)
}

var MyByteSliceMUS = myByteSliceMUS{}

type myByteSliceMUS struct{}

func (s myByteSliceMUS) Marshal(v MyByteSlice, bs []byte) (n int) {
	return ord.ByteSlice.Marshal([]uint8(v), bs)
}

func (s myByteSliceMUS) Unmarshal(bs []byte) (v MyByteSlice, n int, err error) {
	tmp, n, err := ord.ByteSlice.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyByteSlice(tmp)
	return
}

func (s myByteSliceMUS) Size(v MyByteSlice) (size int) {
	return ord.ByteSlice.Size([]uint8(v))
}

func (s myByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return ord.ByteSlice.Skip(bs)
}

var LenEncodingMyByteSliceMUS = lenEncodingMyByteSliceMUS{}

type lenEncodingMyByteSliceMUS struct{}

func (s lenEncodingMyByteSliceMUS) Marshal(v LenEncodingMyByteSlice, bs []byte) (n int) {
	return byte_sliceuivYF4GycfHkNaAtJaA7gAΞΞ.Marshal([]uint8(v), bs)
}

func (s lenEncodingMyByteSliceMUS) Unmarshal(bs []byte) (v LenEncodingMyByteSlice, n int, err error) {
	tmp, n, err := byte_sliceuivYF4GycfHkNaAtJaA7gAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyByteSlice(tmp)
	return
}

func (s lenEncodingMyByteSliceMUS) Size(v LenEncodingMyByteSlice) (size int) {
	return byte_sliceuivYF4GycfHkNaAtJaA7gAΞΞ.Size([]uint8(v))
}

func (s lenEncodingMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return byte_sliceuivYF4GycfHkNaAtJaA7gAΞΞ.Skip(bs)
}

var LenValidMyByteSliceMUS = lenValidMyByteSliceMUS{}

type lenValidMyByteSliceMUS struct{}

func (s lenValidMyByteSliceMUS) Marshal(v LenValidMyByteSlice, bs []byte) (n int) {
	return byte_sliceDcCgbxlDhn4GkcmK8YCyΔAΞΞ.Marshal([]uint8(v), bs)
}

func (s lenValidMyByteSliceMUS) Unmarshal(bs []byte) (v LenValidMyByteSlice, n int, err error) {
	tmp, n, err := byte_sliceDcCgbxlDhn4GkcmK8YCyΔAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMyByteSlice(tmp)
	return
}

func (s lenValidMyByteSliceMUS) Size(v LenValidMyByteSlice) (size int) {
	return byte_sliceDcCgbxlDhn4GkcmK8YCyΔAΞΞ.Size([]uint8(v))
}

func (s lenValidMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return byte_sliceDcCgbxlDhn4GkcmK8YCyΔAΞΞ.Skip(bs)
}

var ValidMyByteSliceMUS = validMyByteSliceMUS{}

type validMyByteSliceMUS struct{}

func (s validMyByteSliceMUS) Marshal(v ValidMyByteSlice, bs []byte) (n int) {
	return ord.ByteSlice.Marshal([]uint8(v), bs)
}

func (s validMyByteSliceMUS) Unmarshal(bs []byte) (v ValidMyByteSlice, n int, err error) {
	tmp, n, err := ord.ByteSlice.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyByteSlice(tmp)
	err = ValidateByteSlice1(v)
	return
}

func (s validMyByteSliceMUS) Size(v ValidMyByteSlice) (size int) {
	return ord.ByteSlice.Size([]uint8(v))
}

func (s validMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return ord.ByteSlice.Skip(bs)
}

var AllMyByteSliceMUS = allMyByteSliceMUS{}

type allMyByteSliceMUS struct{}

func (s allMyByteSliceMUS) Marshal(v AllMyByteSlice, bs []byte) (n int) {
	return byte_sliceoQ9IRuMdcV5ml2YRw53jjwΞΞ.Marshal([]uint8(v), bs)
}

func (s allMyByteSliceMUS) Unmarshal(bs []byte) (v AllMyByteSlice, n int, err error) {
	tmp, n, err := byte_sliceoQ9IRuMdcV5ml2YRw53jjwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyByteSlice(tmp)
	err = ValidateByteSlice2(v)
	return
}

func (s allMyByteSliceMUS) Size(v AllMyByteSlice) (size int) {
	return byte_sliceoQ9IRuMdcV5ml2YRw53jjwΞΞ.Size([]uint8(v))
}

func (s allMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return byte_sliceoQ9IRuMdcV5ml2YRw53jjwΞΞ.Skip(bs)
}

var MySliceMUS = mySliceMUS{}

type mySliceMUS struct{}

func (s mySliceMUS) Marshal(v MySlice, bs []byte) (n int) {
	return slicewNkFf0X21pMEy6cgry3oZQΞΞ.Marshal([]int(v), bs)
}

func (s mySliceMUS) Unmarshal(bs []byte) (v MySlice, n int, err error) {
	tmp, n, err := slicewNkFf0X21pMEy6cgry3oZQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MySlice(tmp)
	return
}

func (s mySliceMUS) Size(v MySlice) (size int) {
	return slicewNkFf0X21pMEy6cgry3oZQΞΞ.Size([]int(v))
}

func (s mySliceMUS) Skip(bs []byte) (n int, err error) {
	return slicewNkFf0X21pMEy6cgry3oZQΞΞ.Skip(bs)
}

var LenEncodingMySliceMUS = lenEncodingMySliceMUS{}

type lenEncodingMySliceMUS struct{}

func (s lenEncodingMySliceMUS) Marshal(v LenEncodingMySlice, bs []byte) (n int) {
	return slice7v8xiCJyDayHEcMoBUAERQΞΞ.Marshal([]int(v), bs)
}

func (s lenEncodingMySliceMUS) Unmarshal(bs []byte) (v LenEncodingMySlice, n int, err error) {
	tmp, n, err := slice7v8xiCJyDayHEcMoBUAERQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMySlice(tmp)
	return
}

func (s lenEncodingMySliceMUS) Size(v LenEncodingMySlice) (size int) {
	return slice7v8xiCJyDayHEcMoBUAERQΞΞ.Size([]int(v))
}

func (s lenEncodingMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slice7v8xiCJyDayHEcMoBUAERQΞΞ.Skip(bs)
}

var LenValidMySliceMUS = lenValidMySliceMUS{}

type lenValidMySliceMUS struct{}

func (s lenValidMySliceMUS) Marshal(v LenValidMySlice, bs []byte) (n int) {
	return sliceXsiMRO2Fc4hG6R7wrB7GIAΞΞ.Marshal([]int(v), bs)
}

func (s lenValidMySliceMUS) Unmarshal(bs []byte) (v LenValidMySlice, n int, err error) {
	tmp, n, err := sliceXsiMRO2Fc4hG6R7wrB7GIAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMySlice(tmp)
	return
}

func (s lenValidMySliceMUS) Size(v LenValidMySlice) (size int) {
	return sliceXsiMRO2Fc4hG6R7wrB7GIAΞΞ.Size([]int(v))
}

func (s lenValidMySliceMUS) Skip(bs []byte) (n int, err error) {
	return sliceXsiMRO2Fc4hG6R7wrB7GIAΞΞ.Skip(bs)
}

var ElemEncodingMySliceMUS = elemEncodingMySliceMUS{}

type elemEncodingMySliceMUS struct{}

func (s elemEncodingMySliceMUS) Marshal(v ElemEncodingMySlice, bs []byte) (n int) {
	return sliceRJD1qΔgsYzv84V3Gfz6c0wΞΞ.Marshal([]int(v), bs)
}

func (s elemEncodingMySliceMUS) Unmarshal(bs []byte) (v ElemEncodingMySlice, n int, err error) {
	tmp, n, err := sliceRJD1qΔgsYzv84V3Gfz6c0wΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemEncodingMySlice(tmp)
	return
}

func (s elemEncodingMySliceMUS) Size(v ElemEncodingMySlice) (size int) {
	return sliceRJD1qΔgsYzv84V3Gfz6c0wΞΞ.Size([]int(v))
}

func (s elemEncodingMySliceMUS) Skip(bs []byte) (n int, err error) {
	return sliceRJD1qΔgsYzv84V3Gfz6c0wΞΞ.Skip(bs)
}

var ElemValidMySliceMUS = elemValidMySliceMUS{}

type elemValidMySliceMUS struct{}

func (s elemValidMySliceMUS) Marshal(v ElemValidMySlice, bs []byte) (n int) {
	return slice8Bmgo57SJrl1jkVk3uFkvwΞΞ.Marshal([]int(v), bs)
}

func (s elemValidMySliceMUS) Unmarshal(bs []byte) (v ElemValidMySlice, n int, err error) {
	tmp, n, err := slice8Bmgo57SJrl1jkVk3uFkvwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemValidMySlice(tmp)
	return
}

func (s elemValidMySliceMUS) Size(v ElemValidMySlice) (size int) {
	return slice8Bmgo57SJrl1jkVk3uFkvwΞΞ.Size([]int(v))
}

func (s elemValidMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slice8Bmgo57SJrl1jkVk3uFkvwΞΞ.Skip(bs)
}

var AllMySliceMUS = allMySliceMUS{}

type allMySliceMUS struct{}

func (s allMySliceMUS) Marshal(v AllMySlice, bs []byte) (n int) {
	return slicenXQ4BhwΔjyAbWO9CVN0bXgΞΞ.Marshal([]int(v), bs)
}

func (s allMySliceMUS) Unmarshal(bs []byte) (v AllMySlice, n int, err error) {
	tmp, n, err := slicenXQ4BhwΔjyAbWO9CVN0bXgΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMySlice(tmp)
	return
}

func (s allMySliceMUS) Size(v AllMySlice) (size int) {
	return slicenXQ4BhwΔjyAbWO9CVN0bXgΞΞ.Size([]int(v))
}

func (s allMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slicenXQ4BhwΔjyAbWO9CVN0bXgΞΞ.Skip(bs)
}

var MyMapMUS = myMapMUS{}

type myMapMUS struct{}

func (s myMapMUS) Marshal(v MyMap, bs []byte) (n int) {
	return map0LSMnwmCsOA77HuΣMun3JQΞΞ.Marshal(map[int]int(v), bs)
}

func (s myMapMUS) Unmarshal(bs []byte) (v MyMap, n int, err error) {
	tmp, n, err := map0LSMnwmCsOA77HuΣMun3JQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyMap(tmp)
	return
}

func (s myMapMUS) Size(v MyMap) (size int) {
	return map0LSMnwmCsOA77HuΣMun3JQΞΞ.Size(map[int]int(v))
}

func (s myMapMUS) Skip(bs []byte) (n int, err error) {
	return map0LSMnwmCsOA77HuΣMun3JQΞΞ.Skip(bs)
}

var LenEncodingMyMapMUS = lenEncodingMyMapMUS{}

type lenEncodingMyMapMUS struct{}

func (s lenEncodingMyMapMUS) Marshal(v LenEncodingMyMap, bs []byte) (n int) {
	return maph2OI1HM8rEDN92oicn3y0QΞΞ.Marshal(map[int]int(v), bs)
}

func (s lenEncodingMyMapMUS) Unmarshal(bs []byte) (v LenEncodingMyMap, n int, err error) {
	tmp, n, err := maph2OI1HM8rEDN92oicn3y0QΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyMap(tmp)
	return
}

func (s lenEncodingMyMapMUS) Size(v LenEncodingMyMap) (size int) {
	return maph2OI1HM8rEDN92oicn3y0QΞΞ.Size(map[int]int(v))
}

func (s lenEncodingMyMapMUS) Skip(bs []byte) (n int, err error) {
	return maph2OI1HM8rEDN92oicn3y0QΞΞ.Skip(bs)
}

var LenValidMyMapMUS = lenValidMyMapMUS{}

type lenValidMyMapMUS struct{}

func (s lenValidMyMapMUS) Marshal(v LenValidMyMap, bs []byte) (n int) {
	return mapFANab1bxFDU2CxNSnYEESQΞΞ.Marshal(map[int]int(v), bs)
}

func (s lenValidMyMapMUS) Unmarshal(bs []byte) (v LenValidMyMap, n int, err error) {
	tmp, n, err := mapFANab1bxFDU2CxNSnYEESQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMyMap(tmp)
	return
}

func (s lenValidMyMapMUS) Size(v LenValidMyMap) (size int) {
	return mapFANab1bxFDU2CxNSnYEESQΞΞ.Size(map[int]int(v))
}

func (s lenValidMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapFANab1bxFDU2CxNSnYEESQΞΞ.Skip(bs)
}

var KeyEncodingMyMapMUS = keyEncodingMyMapMUS{}

type keyEncodingMyMapMUS struct{}

func (s keyEncodingMyMapMUS) Marshal(v KeyEncodingMyMap, bs []byte) (n int) {
	return mapsHWUiae8MVARLFKhf3bGHwΞΞ.Marshal(map[int]int(v), bs)
}

func (s keyEncodingMyMapMUS) Unmarshal(bs []byte) (v KeyEncodingMyMap, n int, err error) {
	tmp, n, err := mapsHWUiae8MVARLFKhf3bGHwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = KeyEncodingMyMap(tmp)
	return
}

func (s keyEncodingMyMapMUS) Size(v KeyEncodingMyMap) (size int) {
	return mapsHWUiae8MVARLFKhf3bGHwΞΞ.Size(map[int]int(v))
}

func (s keyEncodingMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapsHWUiae8MVARLFKhf3bGHwΞΞ.Skip(bs)
}

var KeyValidMyMapMUS = keyValidMyMapMUS{}

type keyValidMyMapMUS struct{}

func (s keyValidMyMapMUS) Marshal(v KeyValidMyMap, bs []byte) (n int) {
	return mapgΔPfXh6ykvALhZI24oΣUwgΞΞ.Marshal(map[int]int(v), bs)
}

func (s keyValidMyMapMUS) Unmarshal(bs []byte) (v KeyValidMyMap, n int, err error) {
	tmp, n, err := mapgΔPfXh6ykvALhZI24oΣUwgΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = KeyValidMyMap(tmp)
	return
}

func (s keyValidMyMapMUS) Size(v KeyValidMyMap) (size int) {
	return mapgΔPfXh6ykvALhZI24oΣUwgΞΞ.Size(map[int]int(v))
}

func (s keyValidMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapgΔPfXh6ykvALhZI24oΣUwgΞΞ.Skip(bs)
}

var ElemEncodingMyMapMUS = elemEncodingMyMapMUS{}

type elemEncodingMyMapMUS struct{}

func (s elemEncodingMyMapMUS) Marshal(v ElemEncodingMyMap, bs []byte) (n int) {
	return map43fUS2Δt05YvrYGcEuvKNAΞΞ.Marshal(map[int]int(v), bs)
}

func (s elemEncodingMyMapMUS) Unmarshal(bs []byte) (v ElemEncodingMyMap, n int, err error) {
	tmp, n, err := map43fUS2Δt05YvrYGcEuvKNAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemEncodingMyMap(tmp)
	return
}

func (s elemEncodingMyMapMUS) Size(v ElemEncodingMyMap) (size int) {
	return map43fUS2Δt05YvrYGcEuvKNAΞΞ.Size(map[int]int(v))
}

func (s elemEncodingMyMapMUS) Skip(bs []byte) (n int, err error) {
	return map43fUS2Δt05YvrYGcEuvKNAΞΞ.Skip(bs)
}

var ElemValidMyMapMUS = elemValidMyMapMUS{}

type elemValidMyMapMUS struct{}

func (s elemValidMyMapMUS) Marshal(v ElemValidMyMap, bs []byte) (n int) {
	return map3PMuzhUAOypD4DqSnnWKagΞΞ.Marshal(map[int]int(v), bs)
}

func (s elemValidMyMapMUS) Unmarshal(bs []byte) (v ElemValidMyMap, n int, err error) {
	tmp, n, err := map3PMuzhUAOypD4DqSnnWKagΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemValidMyMap(tmp)
	return
}

func (s elemValidMyMapMUS) Size(v ElemValidMyMap) (size int) {
	return map3PMuzhUAOypD4DqSnnWKagΞΞ.Size(map[int]int(v))
}

func (s elemValidMyMapMUS) Skip(bs []byte) (n int, err error) {
	return map3PMuzhUAOypD4DqSnnWKagΞΞ.Skip(bs)
}

var ValidMyMapMUS = validMyMapMUS{}

type validMyMapMUS struct{}

func (s validMyMapMUS) Marshal(v ValidMyMap, bs []byte) (n int) {
	return mapuK6uyoyios3ppjQeSCtptAΞΞ.Marshal(map[int]int(v), bs)
}

func (s validMyMapMUS) Unmarshal(bs []byte) (v ValidMyMap, n int, err error) {
	tmp, n, err := mapuK6uyoyios3ppjQeSCtptAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyMap(tmp)
	err = ValidateMyMap1(v)
	return
}

func (s validMyMapMUS) Size(v ValidMyMap) (size int) {
	return mapuK6uyoyios3ppjQeSCtptAΞΞ.Size(map[int]int(v))
}

func (s validMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapuK6uyoyios3ppjQeSCtptAΞΞ.Skip(bs)
}

var AllMyMapMUS = allMyMapMUS{}

type allMyMapMUS struct{}

func (s allMyMapMUS) Marshal(v AllMyMap, bs []byte) (n int) {
	return map2lsFWNc17ZLpZkUeycFdCwΞΞ.Marshal(map[int]int(v), bs)
}

func (s allMyMapMUS) Unmarshal(bs []byte) (v AllMyMap, n int, err error) {
	tmp, n, err := map2lsFWNc17ZLpZkUeycFdCwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyMap(tmp)
	err = ValidateMyMap2(v)
	return
}

func (s allMyMapMUS) Size(v AllMyMap) (size int) {
	return map2lsFWNc17ZLpZkUeycFdCwΞΞ.Size(map[int]int(v))
}

func (s allMyMapMUS) Skip(bs []byte) (n int, err error) {
	return map2lsFWNc17ZLpZkUeycFdCwΞΞ.Skip(bs)
}

var MyIntPtrMUS = myIntPtrMUS{}

type myIntPtrMUS struct{}

func (s myIntPtrMUS) Marshal(v MyIntPtr, bs []byte) (n int) {
	return ptriwXcXXMJxv0fwmlU8fBUFQΞΞ.Marshal((*int)(v), bs)
}

func (s myIntPtrMUS) Unmarshal(bs []byte) (v MyIntPtr, n int, err error) {
	tmp, n, err := ptriwXcXXMJxv0fwmlU8fBUFQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyIntPtr(tmp)
	return
}

func (s myIntPtrMUS) Size(v MyIntPtr) (size int) {
	return ptriwXcXXMJxv0fwmlU8fBUFQΞΞ.Size((*int)(v))
}

func (s myIntPtrMUS) Skip(bs []byte) (n int, err error) {
	return ptriwXcXXMJxv0fwmlU8fBUFQΞΞ.Skip(bs)
}

var ElemNumEncodingMyIntPtrMUS = elemNumEncodingMyIntPtrMUS{}

type elemNumEncodingMyIntPtrMUS struct{}

func (s elemNumEncodingMyIntPtrMUS) Marshal(v ElemNumEncodingMyIntPtr, bs []byte) (n int) {
	return ptreTXEΔQvZPl1AWyH50l7g8QΞΞ.Marshal((*int)(v), bs)
}

func (s elemNumEncodingMyIntPtrMUS) Unmarshal(bs []byte) (v ElemNumEncodingMyIntPtr, n int, err error) {
	tmp, n, err := ptreTXEΔQvZPl1AWyH50l7g8QΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemNumEncodingMyIntPtr(tmp)
	return
}

func (s elemNumEncodingMyIntPtrMUS) Size(v ElemNumEncodingMyIntPtr) (size int) {
	return ptreTXEΔQvZPl1AWyH50l7g8QΞΞ.Size((*int)(v))
}

func (s elemNumEncodingMyIntPtrMUS) Skip(bs []byte) (n int, err error) {
	return ptreTXEΔQvZPl1AWyH50l7g8QΞΞ.Skip(bs)
}

var ValidMyIntPtrMUS = validMyIntPtrMUS{}

type validMyIntPtrMUS struct{}

func (s validMyIntPtrMUS) Marshal(v ValidMyIntPtr, bs []byte) (n int) {
	return ptrLGSRJu6LxqOYCY4EvJlaXgΞΞ.Marshal((*int)(v), bs)
}

func (s validMyIntPtrMUS) Unmarshal(bs []byte) (v ValidMyIntPtr, n int, err error) {
	tmp, n, err := ptrLGSRJu6LxqOYCY4EvJlaXgΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyIntPtr(tmp)
	err = testdata.ValidateZeroValue[*int](v)
	return
}

func (s validMyIntPtrMUS) Size(v ValidMyIntPtr) (size int) {
	return ptrLGSRJu6LxqOYCY4EvJlaXgΞΞ.Size((*int)(v))
}

func (s validMyIntPtrMUS) Skip(bs []byte) (n int, err error) {
	return ptrLGSRJu6LxqOYCY4EvJlaXgΞΞ.Skip(bs)
}

var SimpleStructMyIntPtrMUS = simpleStructMyIntPtrMUS{}

type simpleStructMyIntPtrMUS struct{}

func (s simpleStructMyIntPtrMUS) Marshal(v SimpleStructMyIntPtr, bs []byte) (n int) {
	return ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Marshal((*SimpleStruct)(v), bs)
}

func (s simpleStructMyIntPtrMUS) Unmarshal(bs []byte) (v SimpleStructMyIntPtr, n int, err error) {
	tmp, n, err := ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = SimpleStructMyIntPtr(tmp)
	return
}

func (s simpleStructMyIntPtrMUS) Size(v SimpleStructMyIntPtr) (size int) {
	return ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Size((*SimpleStruct)(v))
}

func (s simpleStructMyIntPtrMUS) Skip(bs []byte) (n int, err error) {
	return ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Skip(bs)
}

var SimpleStructMUS = simpleStructMUS{}

type simpleStructMUS struct{}

func (s simpleStructMUS) Marshal(v SimpleStruct, bs []byte) (n int) {
	return varint.Int.Marshal(v.Int, bs)
}

func (s simpleStructMUS) Unmarshal(bs []byte) (v SimpleStruct, n int, err error) {
	v.Int, n, err = varint.Int.Unmarshal(bs)
	return
}

func (s simpleStructMUS) Size(v SimpleStruct) (size int) {
	return varint.Int.Size(v.Int)
}

func (s simpleStructMUS) Skip(bs []byte) (n int, err error) {
	n, err = varint.Int.Skip(bs)
	return
}

var AnotherStructMUS = anotherStructMUS{}

type anotherStructMUS struct{}

func (s anotherStructMUS) Marshal(v AnotherStruct, bs []byte) (n int) {
	return varint.Int.Marshal(v.Int, bs)
}

func (s anotherStructMUS) Unmarshal(bs []byte) (v AnotherStruct, n int, err error) {
	v.Int, n, err = varint.Int.Unmarshal(bs)
	return
}

func (s anotherStructMUS) Size(v AnotherStruct) (size int) {
	return varint.Int.Size(v.Int)
}

func (s anotherStructMUS) Skip(bs []byte) (n int, err error) {
	n, err = varint.Int.Skip(bs)
	return
}

var ComplexStructMUS = complexStructMUS{}

type complexStructMUS struct{}

func (s complexStructMUS) Marshal(v ComplexStruct, bs []byte) (n int) {
	n = ord.Bool.Marshal(v.Bool, bs)
	n += varint.Uint8.Marshal(v.Byte, bs[n:])
	n += varint.Int8.Marshal(v.Int8, bs[n:])
	n += varint.Int16.Marshal(v.Int16, bs[n:])
	n += varint.Int32.Marshal(v.Int32, bs[n:])
	n += varint.Int64.Marshal(v.Int64, bs[n:])
	n += varint.Uint8.Marshal(v.Uint8, bs[n:])
	n += varint.Uint16.Marshal(v.Uint16, bs[n:])
	n += varint.Uint32.Marshal(v.Uint32, bs[n:])
	n += varint.Uint64.Marshal(v.Uint64, bs[n:])
	n += varint.Float32.Marshal(v.Float32, bs[n:])
	n += varint.Float64.Marshal(v.Float64, bs[n:])
	n += ord.String.Marshal(v.String, bs[n:])
	n += MySliceMUS.Marshal(v.Alias, bs[n:])
	n += pkg2.StructMUS.Marshal(v.AnotherPkgStruct, bs[n:])
	n += InterfaceMUS.Marshal(v.Interface, bs[n:])
	n += ord.ByteSlice.Marshal(v.ByteSlice, bs[n:])
	n += sliceJ9mM3TwH9NGSRg9dRM34dAΞΞ.Marshal(v.StructSlice, bs[n:])
	n += arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Marshal(v.Array, bs[n:])
	n += ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Marshal(v.PtrString, bs[n:])
	n += ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Marshal(v.PtrStruct, bs[n:])
	n += ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Marshal(v.NilPtr, bs[n:])
	n += ptrikbRqA7BO81F7es2ThTZΔgΞΞ.Marshal(v.PtrArray, bs[n:])
	return n + mapwpOMFlKEe81rTT4qnhycUAΞΞ.Marshal(v.Map, bs[n:])
}

func (s complexStructMUS) Unmarshal(bs []byte) (v ComplexStruct, n int, err error) {
	v.Bool, n, err = ord.Bool.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	v.Byte, n1, err = varint.Uint8.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int8, n1, err = varint.Int8.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int16, n1, err = varint.Int16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int32, n1, err = varint.Int32.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Int64, n1, err = varint.Int64.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint8, n1, err = varint.Uint8.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint16, n1, err = varint.Uint16.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint32, n1, err = varint.Uint32.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Uint64, n1, err = varint.Uint64.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Float32, n1, err = varint.Float32.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Float64, n1, err = varint.Float64.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.String, n1, err = ord.String.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Alias, n1, err = MySliceMUS.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.AnotherPkgStruct, n1, err = pkg2.StructMUS.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Interface, n1, err = InterfaceMUS.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.ByteSlice, n1, err = ord.ByteSlice.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.StructSlice, n1, err = sliceJ9mM3TwH9NGSRg9dRM34dAΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Array, n1, err = arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.PtrString, n1, err = ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.PtrStruct, n1, err = ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.NilPtr, n1, err = ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.PtrArray, n1, err = ptrikbRqA7BO81F7es2ThTZΔgΞΞ.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Map, n1, err = mapwpOMFlKEe81rTT4qnhycUAΞΞ.Unmarshal(bs[n:])
	n += n1
	return
}

func (s complexStructMUS) Size(v ComplexStruct) (size int) {
	size = ord.Bool.Size(v.Bool)
	size += varint.Uint8.Size(v.Byte)
	size += varint.Int8.Size(v.Int8)
	size += varint.Int16.Size(v.Int16)
	size += varint.Int32.Size(v.Int32)
	size += varint.Int64.Size(v.Int64)
	size += varint.Uint8.Size(v.Uint8)
	size += varint.Uint16.Size(v.Uint16)
	size += varint.Uint32.Size(v.Uint32)
	size += varint.Uint64.Size(v.Uint64)
	size += varint.Float32.Size(v.Float32)
	size += varint.Float64.Size(v.Float64)
	size += ord.String.Size(v.String)
	size += MySliceMUS.Size(v.Alias)
	size += pkg2.StructMUS.Size(v.AnotherPkgStruct)
	size += InterfaceMUS.Size(v.Interface)
	size += ord.ByteSlice.Size(v.ByteSlice)
	size += sliceJ9mM3TwH9NGSRg9dRM34dAΞΞ.Size(v.StructSlice)
	size += arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Size(v.Array)
	size += ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Size(v.PtrString)
	size += ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Size(v.PtrStruct)
	size += ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Size(v.NilPtr)
	size += ptrikbRqA7BO81F7es2ThTZΔgΞΞ.Size(v.PtrArray)
	return size + mapwpOMFlKEe81rTT4qnhycUAΞΞ.Size(v.Map)
}

func (s complexStructMUS) Skip(bs []byte) (n int, err error) {
	n, err = ord.Bool.Skip(bs)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Uint8.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int8.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int32.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int64.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint8.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint16.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint32.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint64.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float32.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float64.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceMUS.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = pkg2.StructMUS.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = InterfaceMUS.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = sliceJ9mM3TwH9NGSRg9dRM34dAΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = arrayr4wy7nYWZsCSpVj9NWA6awΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrvDcVHNNl1fY23xdΔryHx7wΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrNH6kCQLrIU4OIzE2n0WW3gΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrikbRqA7BO81F7es2ThTZΔgΞΞ.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = mapwpOMFlKEe81rTT4qnhycUAΞΞ.Skip(bs[n:])
	n += n1
	return
}

var InterfaceImpl1MUS = interfaceImpl1MUS{}

type interfaceImpl1MUS struct{}

func (s interfaceImpl1MUS) Marshal(v InterfaceImpl1, bs []byte) (n int) {
	return ord.String.Marshal(v.Str, bs)
}

func (s interfaceImpl1MUS) Unmarshal(bs []byte) (v InterfaceImpl1, n int, err error) {
	v.Str, n, err = ord.String.Unmarshal(bs)
	return
}

func (s interfaceImpl1MUS) Size(v InterfaceImpl1) (size int) {
	return ord.String.Size(v.Str)
}

func (s interfaceImpl1MUS) Skip(bs []byte) (n int, err error) {
	n, err = ord.String.Skip(bs)
	return
}

var InterfaceImpl2MUS = interfaceImpl2MUS{}

type interfaceImpl2MUS struct{}

func (s interfaceImpl2MUS) Marshal(v InterfaceImpl2, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s interfaceImpl2MUS) Unmarshal(bs []byte) (v InterfaceImpl2, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = InterfaceImpl2(tmp)
	return
}

func (s interfaceImpl2MUS) Size(v InterfaceImpl2) (size int) {
	return varint.Int.Size(int(v))
}

func (s interfaceImpl2MUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var InterfaceImpl1DTS = dts.New[InterfaceImpl1](InterfaceImpl1DTM, InterfaceImpl1MUS)
var InterfaceImpl2DTS = dts.New[InterfaceImpl2](InterfaceImpl2DTM, InterfaceImpl2MUS)

var InterfaceMUS = interfaceMUS{}

type interfaceMUS struct{}

func (s interfaceMUS) Marshal(v Interface, bs []byte) (n int) {
	switch t := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Marshal(t, bs)
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Marshal(t, bs)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceMUS) Unmarshal(bs []byte) (v Interface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		v, n1, err = InterfaceImpl1DTS.UnmarshalData(bs[n:])
	case InterfaceImpl2DTM:
		v, n1, err = InterfaceImpl2DTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s interfaceMUS) Size(v Interface) (size int) {
	switch t := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Size(t)
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		n1, err = InterfaceImpl1DTS.SkipData(bs[n:])
	case InterfaceImpl2DTM:
		n1, err = InterfaceImpl2DTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

var AnotherInterfaceMUS = anotherInterfaceMUS{}

type anotherInterfaceMUS struct{}

func (s anotherInterfaceMUS) Marshal(v AnotherInterface, bs []byte) (n int) {
	switch t := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Marshal(t, bs)
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Marshal(t, bs)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s anotherInterfaceMUS) Unmarshal(bs []byte) (v AnotherInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		v, n1, err = InterfaceImpl1DTS.UnmarshalData(bs[n:])
	case InterfaceImpl2DTM:
		v, n1, err = InterfaceImpl2DTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s anotherInterfaceMUS) Size(v AnotherInterface) (size int) {
	switch t := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Size(t)
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s anotherInterfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		n1, err = InterfaceImpl1DTS.SkipData(bs[n:])
	case InterfaceImpl2DTM:
		n1, err = InterfaceImpl2DTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

var InterfaceDoubleMyIntPtrMUS = interfaceDoubleMyIntPtrMUS{}

type interfaceDoubleMyIntPtrMUS struct{}

func (s interfaceDoubleMyIntPtrMUS) Marshal(v InterfaceDoubleMyIntPtr, bs []byte) (n int) {
	return ptr4ΣGeyl4njXOpw7dXGWlhlwΞΞ.Marshal((**Interface)(v), bs)
}

func (s interfaceDoubleMyIntPtrMUS) Unmarshal(bs []byte) (v InterfaceDoubleMyIntPtr, n int, err error) {
	tmp, n, err := ptr4ΣGeyl4njXOpw7dXGWlhlwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = InterfaceDoubleMyIntPtr(tmp)
	return
}

func (s interfaceDoubleMyIntPtrMUS) Size(v InterfaceDoubleMyIntPtr) (size int) {
	return ptr4ΣGeyl4njXOpw7dXGWlhlwΞΞ.Size((**Interface)(v))
}

func (s interfaceDoubleMyIntPtrMUS) Skip(bs []byte) (n int, err error) {
	return ptr4ΣGeyl4njXOpw7dXGWlhlwΞΞ.Skip(bs)
}
