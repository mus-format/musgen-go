// Code generated by musgen-go. DO NOT EDIT.

package pkg1

import (
	com "github.com/mus-format/common-go"
	"github.com/mus-format/mus-go"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/raw"
	"github.com/mus-format/mus-go/varint"
	"github.com/mus-format/musgen-go/testdata"
)

func MarshalIntAliasMUS(v IntAlias, bs []byte) (n int) {
	return varint.MarshalInt(int(v), bs[n:])
}

func UnmarshalIntAliasMUS(bs []byte) (v IntAlias, n int, err error) {
	va, n, err := varint.UnmarshalInt(bs[n:])
	if err != nil {
		return
	}
	v = IntAlias(va)
	return
}

func SizeIntAliasMUS(v IntAlias) (size int) {
	return varint.SizeInt(int(v))
}

func SkipIntAliasMUS(bs []byte) (n int, err error) {
	return varint.SkipInt(bs[n:])
}

func MarshalRawIntAliasMUS(v IntAlias, bs []byte) (n int) {
	return raw.MarshalInt(int(v), bs[n:])
}

func UnmarshalRawIntAliasMUS(bs []byte) (v IntAlias, n int, err error) {
	va, n, err := raw.UnmarshalInt(bs[n:])
	if err != nil {
		return
	}
	v = IntAlias(va)
	return
}

func SizeRawIntAliasMUS(v IntAlias) (size int) {
	return raw.SizeInt(int(v))
}

func SkipRawIntAliasMUS(bs []byte) (n int, err error) {
	return raw.SkipInt(bs[n:])
}

func MarshalVarintPositiveIntAliasMUS(v IntAlias, bs []byte) (n int) {
	return varint.MarshalPositiveInt(int(v), bs[n:])
}

func UnmarshalVarintPositiveIntAliasMUS(bs []byte) (v IntAlias, n int, err error) {
	va, n, err := varint.UnmarshalPositiveInt(bs[n:])
	if err != nil {
		return
	}
	v = IntAlias(va)
	return
}

func SizeVarintPositiveIntAliasMUS(v IntAlias) (size int) {
	return varint.SizePositiveInt(int(v))
}

func SkipVarintPositiveIntAliasMUS(bs []byte) (n int, err error) {
	return varint.SkipPositiveInt(bs[n:])
}

func MarshalValidIntAliasMUS(v IntAlias, bs []byte) (n int) {
	return varint.MarshalInt(int(v), bs[n:])
}

func UnmarshalValidIntAliasMUS(bs []byte) (v IntAlias, n int, err error) {
	va, n, err := varint.UnmarshalInt(bs[n:])
	if err != nil {
		return
	}
	if err = testdata.ValidateZeroValue[int](va); err != nil {
		return
	}
	v = IntAlias(va)
	return
}

func SizeValidIntAliasMUS(v IntAlias) (size int) {
	return varint.SizeInt(int(v))
}

func SkipValidIntAliasMUS(bs []byte) (n int, err error) {
	return varint.SkipInt(bs[n:])
}

func MarshalStringAliasMUS(v StringAlias, bs []byte) (n int) {
	return ord.MarshalString(string(v), nil, bs[n:])
}

func UnmarshalStringAliasMUS(bs []byte) (v StringAlias, n int, err error) {
	va, n, err := ord.UnmarshalString(nil, bs[n:])
	if err != nil {
		return
	}
	v = StringAlias(va)
	return
}

func SizeStringAliasMUS(v StringAlias) (size int) {
	return ord.SizeString(string(v), nil)
}

func SkipStringAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipString(nil, bs[n:])
}

func MarshalLenEncodingStringAliasMUS(v StringAlias, bs []byte) (n int) {
	return ord.MarshalString(string(v), mus.MarshallerFn[int](raw.MarshalInt), bs[n:])
}

func UnmarshalLenEncodingStringAliasMUS(bs []byte) (v StringAlias, n int, err error) {
	va, n, err := ord.UnmarshalString(mus.UnmarshallerFn[int](raw.UnmarshalInt), bs[n:])
	if err != nil {
		return
	}
	v = StringAlias(va)
	return
}

func SizeLenEncodingStringAliasMUS(v StringAlias) (size int) {
	return ord.SizeString(string(v), mus.SizerFn[int](raw.SizeInt))
}

func SkipLenEncodingStringAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipString(mus.UnmarshallerFn[int](raw.UnmarshalInt), bs[n:])
}

func MarshalLenValidatorStringAliasMUS(v StringAlias, bs []byte) (n int) {
	return ord.MarshalString(string(v), nil, bs[n:])
}

func UnmarshalLenValidatorStringAliasMUS(bs []byte) (v StringAlias, n int, err error) {
	va, n, err := ord.UnmarshalValidString(nil,
		com.ValidatorFn[int](testdata.ValidateLength),
		false,
		bs[n:])
	if err != nil {
		return
	}
	v = StringAlias(va)
	return
}

func SizeLenValidatorStringAliasMUS(v StringAlias) (size int) {
	return ord.SizeString(string(v), nil)
}

func SkipLenValidatorStringAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipString(nil, bs[n:])
}

func MarshalValidStringAliasMUS(v StringAlias, bs []byte) (n int) {
	return ord.MarshalString(string(v), nil, bs[n:])
}

func UnmarshalValidStringAliasMUS(bs []byte) (v StringAlias, n int, err error) {
	va, n, err := ord.UnmarshalString(nil, bs[n:])
	if err != nil {
		return
	}
	if err = testdata.ValidateZeroValue[string](va); err != nil {
		return
	}
	v = StringAlias(va)
	return
}

func SizeValidStringAliasMUS(v StringAlias) (size int) {
	return ord.SizeString(string(v), nil)
}

func SkipValidStringAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipString(nil, bs[n:])
}

func MarshalSliceAliasMUS(v SliceAlias, bs []byte) (n int) {
	return ord.MarshalSlice[int]([]int(v),
		nil,
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalSliceAliasMUS(bs []byte) (v SliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalSlice[int](nil,
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = SliceAlias(va)
	return
}

func SizeSliceAliasMUS(v SliceAlias) (size int) {
	return ord.SizeSlice[int]([]int(v),
		nil,
		mus.SizerFn[int](varint.SizeInt))
}

func SkipSliceAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipSlice(nil,
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalLenEncodingSliceAliasMUS(v SliceAlias, bs []byte) (n int) {
	return ord.MarshalSlice[int]([]int(v),
		mus.MarshallerFn[int](raw.MarshalInt),
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalLenEncodingSliceAliasMUS(bs []byte) (v SliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalSlice[int](mus.UnmarshallerFn[int](raw.UnmarshalInt),
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = SliceAlias(va)
	return
}

func SizeLenEncodingSliceAliasMUS(v SliceAlias) (size int) {
	return ord.SizeSlice[int]([]int(v),
		mus.SizerFn[int](raw.SizeInt),
		mus.SizerFn[int](varint.SizeInt))
}

func SkipLenEncodingSliceAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipSlice(mus.UnmarshallerFn[int](raw.UnmarshalInt),
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalLenValidatorSliceAliasMUS(v SliceAlias, bs []byte) (n int) {
	return ord.MarshalSlice[int]([]int(v),
		nil,
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalLenValidatorSliceAliasMUS(bs []byte) (v SliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalValidSlice[int](nil,
		com.ValidatorFn[int](testdata.ValidateLength),
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		nil,
		nil,
		bs[n:])
	if err != nil {
		return
	}
	v = SliceAlias(va)
	return
}

func SizeLenValidatorSliceAliasMUS(v SliceAlias) (size int) {
	return ord.SizeSlice[int]([]int(v),
		nil,
		mus.SizerFn[int](varint.SizeInt))
}

func SkipLenValidatorSliceAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipSlice(nil,
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalElemEncodingSliceAliasMUS(v SliceAlias, bs []byte) (n int) {
	return ord.MarshalSlice[int]([]int(v),
		nil,
		mus.MarshallerFn[int](raw.MarshalInt),
		bs[n:])
}

func UnmarshalElemEncodingSliceAliasMUS(bs []byte) (v SliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalSlice[int](nil,
		mus.UnmarshallerFn[int](raw.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = SliceAlias(va)
	return
}

func SizeElemEncodingSliceAliasMUS(v SliceAlias) (size int) {
	return ord.SizeSlice[int]([]int(v),
		nil,
		mus.SizerFn[int](raw.SizeInt))
}

func SkipElemEncodingSliceAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipSlice(nil,
		mus.SkipperFn(raw.SkipInt),
		bs[n:])
}

func MarshalElemValidatorSliceAliasMUS(v SliceAlias, bs []byte) (n int) {
	return ord.MarshalSlice[int]([]int(v),
		nil,
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalElemValidatorSliceAliasMUS(bs []byte) (v SliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalValidSlice[int](nil,
		nil,
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		com.ValidatorFn[int](testdata.ValidateZeroValue[int]),
		nil,
		bs[n:])
	if err != nil {
		return
	}
	v = SliceAlias(va)
	return
}

func SizeElemValidatorSliceAliasMUS(v SliceAlias) (size int) {
	return ord.SizeSlice[int]([]int(v),
		nil,
		mus.SizerFn[int](varint.SizeInt))
}

func SkipElemValidatorSliceAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipSlice(nil,
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalArrayAliasMUS(v ArrayAlias, bs []byte) (n int) {
	va := [3]int(v)
	return ord.MarshalSlice[int](va[:],
		nil,
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalArrayAliasMUS(bs []byte) (v ArrayAlias, n int, err error) {
	va, n, err := ord.UnmarshalSlice[int](nil,
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = ArrayAlias(([3]int)(va))
	return
}

func SizeArrayAliasMUS(v ArrayAlias) (size int) {
	va := [3]int(v)
	return ord.SizeSlice[int](va[:],
		nil,
		mus.SizerFn[int](varint.SizeInt))
}

func SkipArrayAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipSlice(nil,
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalMapAliasMUS(v MapAlias, bs []byte) (n int) {
	return ord.MarshalMap[string, int](map[string]int(v), nil,
		mus.MarshallerFn[string](func(t string, bs []byte) (n int) { return ord.MarshalString(t, nil, bs[n:]) }),
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalMapAliasMUS(bs []byte) (v MapAlias, n int, err error) {
	va, n, err := ord.UnmarshalMap[string, int](nil,
		mus.UnmarshallerFn[string](func(bs []byte) (t string, n int, err error) { return ord.UnmarshalString(nil, bs[n:]) }),
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = MapAlias(va)
	return
}

func SizeMapAliasMUS(v MapAlias) (size int) {
	return ord.SizeMap[string, int](map[string]int(v), nil,
		mus.SizerFn[string](func(t string) (size int) { return ord.SizeString(t, nil) }),
		mus.SizerFn[int](varint.SizeInt))
}

func SkipMapAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipMap(nil,
		mus.SkipperFn(func(bs []byte) (n int, err error) { return ord.SkipString(nil, bs[n:]) }),
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalLenEncodingMapAliasMUS(v MapAlias, bs []byte) (n int) {
	return ord.MarshalMap[string, int](map[string]int(v), mus.MarshallerFn[int](raw.MarshalInt),
		mus.MarshallerFn[string](func(t string, bs []byte) (n int) { return ord.MarshalString(t, nil, bs[n:]) }),
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalLenEncodingMapAliasMUS(bs []byte) (v MapAlias, n int, err error) {
	va, n, err := ord.UnmarshalMap[string, int](mus.UnmarshallerFn[int](raw.UnmarshalInt),
		mus.UnmarshallerFn[string](func(bs []byte) (t string, n int, err error) { return ord.UnmarshalString(nil, bs[n:]) }),
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = MapAlias(va)
	return
}

func SizeLenEncodingMapAliasMUS(v MapAlias) (size int) {
	return ord.SizeMap[string, int](map[string]int(v), mus.SizerFn[int](raw.SizeInt),
		mus.SizerFn[string](func(t string) (size int) { return ord.SizeString(t, nil) }),
		mus.SizerFn[int](varint.SizeInt))
}

func SkipLenEncodingMapAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipMap(mus.UnmarshallerFn[int](raw.UnmarshalInt),
		mus.SkipperFn(func(bs []byte) (n int, err error) { return ord.SkipString(nil, bs[n:]) }),
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalLenValidatorMapAliasMUS(v MapAlias, bs []byte) (n int) {
	return ord.MarshalMap[string, int](map[string]int(v), nil,
		mus.MarshallerFn[string](func(t string, bs []byte) (n int) { return ord.MarshalString(t, nil, bs[n:]) }),
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalLenValidatorMapAliasMUS(bs []byte) (v MapAlias, n int, err error) {
	va, n, err := ord.UnmarshalValidMap[string, int](nil, com.ValidatorFn[int](testdata.ValidateLength),
		mus.UnmarshallerFn[string](func(bs []byte) (t string, n int, err error) { return ord.UnmarshalString(nil, bs[n:]) }),
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		nil,
		nil,
		nil,
		nil,
		bs[n:])
	if err != nil {
		return
	}
	v = MapAlias(va)
	return
}

func SizeLenValidatorMapAliasMUS(v MapAlias) (size int) {
	return ord.SizeMap[string, int](map[string]int(v), nil,
		mus.SizerFn[string](func(t string) (size int) { return ord.SizeString(t, nil) }),
		mus.SizerFn[int](varint.SizeInt))
}

func SkipLenValidatorMapAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipMap(nil,
		mus.SkipperFn(func(bs []byte) (n int, err error) { return ord.SkipString(nil, bs[n:]) }),
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalKeyValidatorMapAliasMUS(v MapAlias, bs []byte) (n int) {
	return ord.MarshalMap[string, int](map[string]int(v), nil,
		mus.MarshallerFn[string](func(t string, bs []byte) (n int) { return ord.MarshalString(t, nil, bs[n:]) }),
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalKeyValidatorMapAliasMUS(bs []byte) (v MapAlias, n int, err error) {
	va, n, err := ord.UnmarshalValidMap[string, int](nil, nil,
		mus.UnmarshallerFn[string](func(bs []byte) (t string, n int, err error) { return ord.UnmarshalString(nil, bs[n:]) }),
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		com.ValidatorFn[string](testdata.ValidateZeroValue[string]),
		nil,
		nil,
		nil,
		bs[n:])
	if err != nil {
		return
	}
	v = MapAlias(va)
	return
}

func SizeKeyValidatorMapAliasMUS(v MapAlias) (size int) {
	return ord.SizeMap[string, int](map[string]int(v), nil,
		mus.SizerFn[string](func(t string) (size int) { return ord.SizeString(t, nil) }),
		mus.SizerFn[int](varint.SizeInt))
}

func SkipKeyValidatorMapAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipMap(nil,
		mus.SkipperFn(func(bs []byte) (n int, err error) { return ord.SkipString(nil, bs[n:]) }),
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}

func MarshalElemValidatorMapAliasMUS(v MapAlias, bs []byte) (n int) {
	return ord.MarshalMap[string, int](map[string]int(v), nil,
		mus.MarshallerFn[string](func(t string, bs []byte) (n int) { return ord.MarshalString(t, nil, bs[n:]) }),
		mus.MarshallerFn[int](varint.MarshalInt),
		bs[n:])
}

func UnmarshalElemValidatorMapAliasMUS(bs []byte) (v MapAlias, n int, err error) {
	va, n, err := ord.UnmarshalValidMap[string, int](nil, nil,
		mus.UnmarshallerFn[string](func(bs []byte) (t string, n int, err error) { return ord.UnmarshalString(nil, bs[n:]) }),
		mus.UnmarshallerFn[int](varint.UnmarshalInt),
		nil,
		com.ValidatorFn[int](testdata.ValidateZeroValue[int]),
		nil,
		nil,
		bs[n:])
	if err != nil {
		return
	}
	v = MapAlias(va)
	return
}

func SizeElemValidatorMapAliasMUS(v MapAlias) (size int) {
	return ord.SizeMap[string, int](map[string]int(v), nil,
		mus.SizerFn[string](func(t string) (size int) { return ord.SizeString(t, nil) }),
		mus.SizerFn[int](varint.SizeInt))
}

func SkipElemValidatorMapAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipMap(nil,
		mus.SkipperFn(func(bs []byte) (n int, err error) { return ord.SkipString(nil, bs[n:]) }),
		mus.SkipperFn(varint.SkipInt),
		bs[n:])
}
