// Code generated by musgen-go. DO NOT EDIT.\n\npackage

package pkg1

import (
	"github.com/mus-format/mus-go"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/unsafe"
)

func MarshalUnsafeBoolAliasMUS(v BoolAlias, bs []byte) (n int) {
	return unsafe.MarshalBool(bool(v), bs[n:])
}

func UnmarshalUnsafeBoolAliasMUS(bs []byte) (v BoolAlias, n int, err error) {
	va, n, err := unsafe.UnmarshalBool(bs[n:])
	if err != nil {
		return
	}
	v = BoolAlias(va)
	return
}

func SizeUnsafeBoolAliasMUS(v BoolAlias) (size int) {
	return unsafe.SizeBool(bool(v))
}

func SkipUnsafeBoolAliasMUS(bs []byte) (n int, err error) {
	return unsafe.SkipBool(bs[n:])
}

func MarshalUnsafeByteAliasMUS(v ByteAlias, bs []byte) (n int) {
	return unsafe.MarshalUint8(uint8(v), bs[n:])
}

func UnmarshalUnsafeByteAliasMUS(bs []byte) (v ByteAlias, n int, err error) {
	va, n, err := unsafe.UnmarshalUint8(bs[n:])
	if err != nil {
		return
	}
	v = ByteAlias(va)
	return
}

func SizeUnsafeByteAliasMUS(v ByteAlias) (size int) {
	return unsafe.SizeUint8(uint8(v))
}

func SkipUnsafeByteAliasMUS(bs []byte) (n int, err error) {
	return unsafe.SkipUint8(bs[n:])
}

func MarshalUnsafeIntAliasMUS(v IntAlias, bs []byte) (n int) {
	return unsafe.MarshalInt(int(v), bs[n:])
}

func UnmarshalUnsafeIntAliasMUS(bs []byte) (v IntAlias, n int, err error) {
	va, n, err := unsafe.UnmarshalInt(bs[n:])
	if err != nil {
		return
	}
	v = IntAlias(va)
	return
}

func SizeUnsafeIntAliasMUS(v IntAlias) (size int) {
	return unsafe.SizeInt(int(v))
}

func SkipUnsafeIntAliasMUS(bs []byte) (n int, err error) {
	return unsafe.SkipInt(bs[n:])
}

func MarshalUnsafeStringAliasMUS(v StringAlias, bs []byte) (n int) {
	return unsafe.MarshalString(string(v), nil, bs[n:])
}

func UnmarshalUnsafeStringAliasMUS(bs []byte) (v StringAlias, n int, err error) {
	va, n, err := unsafe.UnmarshalString(nil, bs[n:])
	if err != nil {
		return
	}
	v = StringAlias(va)
	return
}

func SizeUnsafeStringAliasMUS(v StringAlias) (size int) {
	return unsafe.SizeString(string(v), nil)
}

func SkipUnsafeStringAliasMUS(bs []byte) (n int, err error) {
	return unsafe.SkipString(nil, bs[n:])
}

func MarshalUnsafeFloat32AliasMUS(v Float32Alias, bs []byte) (n int) {
	return unsafe.MarshalFloat32(float32(v), bs[n:])
}

func UnmarshalUnsafeFloat32AliasMUS(bs []byte) (v Float32Alias, n int, err error) {
	va, n, err := unsafe.UnmarshalFloat32(bs[n:])
	if err != nil {
		return
	}
	v = Float32Alias(va)
	return
}

func SizeUnsafeFloat32AliasMUS(v Float32Alias) (size int) {
	return unsafe.SizeFloat32(float32(v))
}

func SkipUnsafeFloat32AliasMUS(bs []byte) (n int, err error) {
	return unsafe.SkipFloat32(bs[n:])
}

func MarshalUnsafeSliceAliasMUS(v SliceAlias, bs []byte) (n int) {
	return ord.MarshalSlice[int]([]int(v),
		nil,
		mus.MarshallerFn[int](unsafe.MarshalInt),
		bs[n:])
}

func UnmarshalUnsafeSliceAliasMUS(bs []byte) (v SliceAlias, n int, err error) {
	va, n, err := ord.UnmarshalSlice[int](nil,
		mus.UnmarshallerFn[int](unsafe.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = SliceAlias(va)
	return
}

func SizeUnsafeSliceAliasMUS(v SliceAlias) (size int) {
	return ord.SizeSlice[int]([]int(v),
		nil,
		mus.SizerFn[int](unsafe.SizeInt))
}

func SkipUnsafeSliceAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipSlice(nil,
		mus.SkipperFn(unsafe.SkipInt),
		bs[n:])
}

func MarshalUnsafeMapAliasMUS(v MapAlias, bs []byte) (n int) {
	return ord.MarshalMap[string, int](map[string]int(v), nil,
		mus.MarshallerFn[string](func(t string, bs []byte) (n int) { return unsafe.MarshalString(t, nil, bs[n:]) }),
		mus.MarshallerFn[int](unsafe.MarshalInt),
		bs[n:])
}

func UnmarshalUnsafeMapAliasMUS(bs []byte) (v MapAlias, n int, err error) {
	va, n, err := ord.UnmarshalMap[string, int](nil,
		mus.UnmarshallerFn[string](func(bs []byte) (t string, n int, err error) { return unsafe.UnmarshalString(nil, bs[n:]) }),
		mus.UnmarshallerFn[int](unsafe.UnmarshalInt),
		bs[n:])
	if err != nil {
		return
	}
	v = MapAlias(va)
	return
}

func SizeUnsafeMapAliasMUS(v MapAlias) (size int) {
	return ord.SizeMap[string, int](map[string]int(v), nil,
		mus.SizerFn[string](func(t string) (size int) { return unsafe.SizeString(t, nil) }),
		mus.SizerFn[int](unsafe.SizeInt))
}

func SkipUnsafeMapAliasMUS(bs []byte) (n int, err error) {
	return ord.SkipMap(nil,
		mus.SkipperFn(func(bs []byte) (n int, err error) { return unsafe.SkipString(nil, bs[n:]) }),
		mus.SkipperFn(unsafe.SkipInt),
		bs[n:])
}
