// Code generated by musgen-go. DO NOT EDIT.

package pkg1

import (
	"fmt"

	dts "github.com/mus-format/mus-stream-dts-go"
	muss "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/ord"
	"github.com/mus-format/mus-stream-go/varint"
	"github.com/mus-format/musgen-go/testdata/pkg2"
)

var (
	arrayiPZBrΔvΣtuyiSe3E0BBΔZAΞΞ = ord.NewArraySer[[3]int, int](3, varint.Int)
	mapXOR1E9UYBE4vZVdxrG6qngΞΞ   = ord.NewMapSer[float32, map[IntAliasStream][]SimpleStructStream](varint.Float32, maph5T9ΔE27gYoRRZWA8cIMmAΞΞ)
	maph5T9ΔE27gYoRRZWA8cIMmAΞΞ   = ord.NewMapSer[IntAliasStream, []SimpleStructStream](IntAliasStreamMUS, slice56OiSlDΣiBN8xiRNXjFu1AΞΞ)
	ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ   = ord.NewPtrSer[string](ord.String)
	ptrryzF15r3UQX0mWyEIuftXwΞΞ   = ord.NewPtrSer[SimpleStructStream](SimpleStructStreamMUS)
	ptrzvaAxrtkbvHKhrwΣIJM9cAΞΞ   = ord.NewPtrSer[[3]int](arrayiPZBrΔvΣtuyiSe3E0BBΔZAΞΞ)
	slice3VVTpis4uDBxiJkaΔSxelQΞΞ = ord.NewSliceSer[int](varint.Int)
	slice56OiSlDΣiBN8xiRNXjFu1AΞΞ = ord.NewSliceSer[SimpleStructStream](SimpleStructStreamMUS)
)

var IntAliasStreamMUS = intAliasStreamMUS{}

type intAliasStreamMUS struct{}

func (s intAliasStreamMUS) Marshal(v IntAliasStream, w muss.Writer) (n int, err error) {
	return varint.Int.Marshal(int(v), w)
}

func (s intAliasStreamMUS) Unmarshal(r muss.Reader) (v IntAliasStream, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = IntAliasStream(tmp)
	return
}

func (s intAliasStreamMUS) Size(v IntAliasStream) (size int) {
	return varint.Int.Size(int(v))
}

func (s intAliasStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return varint.Int.Skip(r)
}

var SliceAliasStreamMUS = sliceAliasStreamMUS{}

type sliceAliasStreamMUS struct{}

func (s sliceAliasStreamMUS) Marshal(v SliceAliasStream, w muss.Writer) (n int, err error) {
	return slice3VVTpis4uDBxiJkaΔSxelQΞΞ.Marshal([]int(v), w)
}

func (s sliceAliasStreamMUS) Unmarshal(r muss.Reader) (v SliceAliasStream, n int, err error) {
	tmp, n, err := slice3VVTpis4uDBxiJkaΔSxelQΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = SliceAliasStream(tmp)
	return
}

func (s sliceAliasStreamMUS) Size(v SliceAliasStream) (size int) {
	return slice3VVTpis4uDBxiJkaΔSxelQΞΞ.Size([]int(v))
}

func (s sliceAliasStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return slice3VVTpis4uDBxiJkaΔSxelQΞΞ.Skip(r)
}

var SimpleStructStreamMUS = simpleStructStreamMUS{}

type simpleStructStreamMUS struct{}

func (s simpleStructStreamMUS) Marshal(v SimpleStructStream, w muss.Writer) (n int, err error) {
	return varint.Int.Marshal(v.Int, w)
}

func (s simpleStructStreamMUS) Unmarshal(r muss.Reader) (v SimpleStructStream, n int, err error) {
	v.Int, n, err = varint.Int.Unmarshal(r)
	return
}

func (s simpleStructStreamMUS) Size(v SimpleStructStream) (size int) {
	return varint.Int.Size(v.Int)
}

func (s simpleStructStreamMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = varint.Int.Skip(r)
	return
}

var ComplexStructStreamMUS = complexStructStreamMUS{}

type complexStructStreamMUS struct{}

func (s complexStructStreamMUS) Marshal(v ComplexStructStream, w muss.Writer) (n int, err error) {
	n, err = ord.Bool.Marshal(v.Bool, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Uint8.Marshal(v.Byte, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int8.Marshal(v.Int8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Marshal(v.Int16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int32.Marshal(v.Int32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int64.Marshal(v.Int64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint8.Marshal(v.Uint8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint16.Marshal(v.Uint16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint32.Marshal(v.Uint32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint64.Marshal(v.Uint64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float32.Marshal(v.Float32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float64.Marshal(v.Float64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Marshal(v.String, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = SliceAliasStreamMUS.Marshal(v.Alias, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = pkg2.StructStreamMUS.Marshal(v.AnotherPkgStruct, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = InterfaceStreamMUS.Marshal(v.Interface, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Marshal(v.ByteSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = slice56OiSlDΣiBN8xiRNXjFu1AΞΞ.Marshal(v.StructSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = arrayiPZBrΔvΣtuyiSe3E0BBΔZAΞΞ.Marshal(v.Array, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Marshal(v.PtrString, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrryzF15r3UQX0mWyEIuftXwΞΞ.Marshal(v.PtrStruct, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Marshal(v.NilPtr, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrzvaAxrtkbvHKhrwΣIJM9cAΞΞ.Marshal(v.PtrArray, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = mapXOR1E9UYBE4vZVdxrG6qngΞΞ.Marshal(v.Map, w)
	n += n1
	return
}

func (s complexStructStreamMUS) Unmarshal(r muss.Reader) (v ComplexStructStream, n int, err error) {
	v.Bool, n, err = ord.Bool.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Byte, n1, err = varint.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int8, n1, err = varint.Int8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int16, n1, err = varint.Int16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int32, n1, err = varint.Int32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int64, n1, err = varint.Int64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint8, n1, err = varint.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint16, n1, err = varint.Uint16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint32, n1, err = varint.Uint32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint64, n1, err = varint.Uint64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float32, n1, err = varint.Float32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float64, n1, err = varint.Float64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.String, n1, err = ord.String.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Alias, n1, err = SliceAliasStreamMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.AnotherPkgStruct, n1, err = pkg2.StructStreamMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Interface, n1, err = InterfaceStreamMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.ByteSlice, n1, err = ord.ByteSlice.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.StructSlice, n1, err = slice56OiSlDΣiBN8xiRNXjFu1AΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Array, n1, err = arrayiPZBrΔvΣtuyiSe3E0BBΔZAΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrString, n1, err = ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrStruct, n1, err = ptrryzF15r3UQX0mWyEIuftXwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.NilPtr, n1, err = ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrArray, n1, err = ptrzvaAxrtkbvHKhrwΣIJM9cAΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Map, n1, err = mapXOR1E9UYBE4vZVdxrG6qngΞΞ.Unmarshal(r)
	n += n1
	return
}

func (s complexStructStreamMUS) Size(v ComplexStructStream) (size int) {
	size = ord.Bool.Size(v.Bool)
	size += varint.Uint8.Size(v.Byte)
	size += varint.Int8.Size(v.Int8)
	size += varint.Int16.Size(v.Int16)
	size += varint.Int32.Size(v.Int32)
	size += varint.Int64.Size(v.Int64)
	size += varint.Uint8.Size(v.Uint8)
	size += varint.Uint16.Size(v.Uint16)
	size += varint.Uint32.Size(v.Uint32)
	size += varint.Uint64.Size(v.Uint64)
	size += varint.Float32.Size(v.Float32)
	size += varint.Float64.Size(v.Float64)
	size += ord.String.Size(v.String)
	size += SliceAliasStreamMUS.Size(v.Alias)
	size += pkg2.StructStreamMUS.Size(v.AnotherPkgStruct)
	size += InterfaceStreamMUS.Size(v.Interface)
	size += ord.ByteSlice.Size(v.ByteSlice)
	size += slice56OiSlDΣiBN8xiRNXjFu1AΞΞ.Size(v.StructSlice)
	size += arrayiPZBrΔvΣtuyiSe3E0BBΔZAΞΞ.Size(v.Array)
	size += ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Size(v.PtrString)
	size += ptrryzF15r3UQX0mWyEIuftXwΞΞ.Size(v.PtrStruct)
	size += ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Size(v.NilPtr)
	size += ptrzvaAxrtkbvHKhrwΣIJM9cAΞΞ.Size(v.PtrArray)
	return size + mapXOR1E9UYBE4vZVdxrG6qngΞΞ.Size(v.Map)
}

func (s complexStructStreamMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = ord.Bool.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = SliceAliasStreamMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = pkg2.StructStreamMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = InterfaceStreamMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = slice56OiSlDΣiBN8xiRNXjFu1AΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = arrayiPZBrΔvΣtuyiSe3E0BBΔZAΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrryzF15r3UQX0mWyEIuftXwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrR2Xmw2fVSjWhntYt9CΣ7SwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrzvaAxrtkbvHKhrwΣIJM9cAΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = mapXOR1E9UYBE4vZVdxrG6qngΞΞ.Skip(r)
	n += n1
	return
}

var InterfaceImpl1StreamMUS = interfaceImpl1StreamMUS{}

type interfaceImpl1StreamMUS struct{}

func (s interfaceImpl1StreamMUS) Marshal(v InterfaceImpl1Stream, w muss.Writer) (n int, err error) {
	return
}

func (s interfaceImpl1StreamMUS) Unmarshal(r muss.Reader) (v InterfaceImpl1Stream, n int, err error) {
	return
}

func (s interfaceImpl1StreamMUS) Size(v InterfaceImpl1Stream) (size int) {
	return
}

func (s interfaceImpl1StreamMUS) Skip(r muss.Reader) (n int, err error) {
	return
}

var InterfaceImpl2StreamMUS = interfaceImpl2StreamMUS{}

type interfaceImpl2StreamMUS struct{}

func (s interfaceImpl2StreamMUS) Marshal(v InterfaceImpl2Stream, w muss.Writer) (n int, err error) {
	return varint.Int.Marshal(int(v), w)
}

func (s interfaceImpl2StreamMUS) Unmarshal(r muss.Reader) (v InterfaceImpl2Stream, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = InterfaceImpl2Stream(tmp)
	return
}

func (s interfaceImpl2StreamMUS) Size(v InterfaceImpl2Stream) (size int) {
	return varint.Int.Size(int(v))
}

func (s interfaceImpl2StreamMUS) Skip(r muss.Reader) (n int, err error) {
	return varint.Int.Skip(r)
}

var InterfaceImpl1StreamDTS = dts.New[InterfaceImpl1Stream](InterfaceImpl1StreamDTM, InterfaceImpl1StreamMUS)
var InterfaceImpl2StreamDTS = dts.New[InterfaceImpl2Stream](InterfaceImpl2StreamDTM, InterfaceImpl2StreamMUS)

var InterfaceStreamMUS = interfaceStreamMUS{}

type interfaceStreamMUS struct{}

func (s interfaceStreamMUS) Marshal(v InterfaceStream, w muss.Writer) (n int, err error) {
	switch t := v.(type) {
	case InterfaceImpl1Stream:
		return InterfaceImpl1StreamDTS.Marshal(t, w)
	case InterfaceImpl2Stream:
		return InterfaceImpl2StreamDTS.Marshal(t, w)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceStreamMUS) Unmarshal(r muss.Reader) (v InterfaceStream, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1StreamDTM:
		v, n1, err = InterfaceImpl1StreamDTS.UnmarshalData(r)
	case InterfaceImpl2StreamDTM:
		v, n1, err = InterfaceImpl2StreamDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s interfaceStreamMUS) Size(v InterfaceStream) (size int) {
	switch t := v.(type) {
	case InterfaceImpl1Stream:
		return InterfaceImpl1StreamDTS.Size(t)
	case InterfaceImpl2Stream:
		return InterfaceImpl2StreamDTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceStreamMUS) Skip(r muss.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1StreamDTM:
		n1, err = InterfaceImpl1StreamDTS.SkipData(r)
	case InterfaceImpl2StreamDTM:
		n1, err = InterfaceImpl2StreamDTS.SkipData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
