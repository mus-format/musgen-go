// Code generated by musgen-go. DO NOT EDIT.

package pkg1

import (
	"fmt"
	"reflect"

	com "github.com/mus-format/common-go"
	exts "github.com/mus-format/ext-mus-stream-go"
	dts "github.com/mus-format/mus-stream-dts-go"
	muss "github.com/mus-format/mus-stream-go"
	arrops "github.com/mus-format/mus-stream-go/options/array"
	bslops "github.com/mus-format/mus-stream-go/options/byte_slice"
	mapops "github.com/mus-format/mus-stream-go/options/map"
	slops "github.com/mus-format/mus-stream-go/options/slice"
	strops "github.com/mus-format/mus-stream-go/options/string"
	"github.com/mus-format/mus-stream-go/ord"
	"github.com/mus-format/mus-stream-go/varint"
	"github.com/mus-format/musgen-go/testdata"
	"github.com/mus-format/musgen-go/testdata/pkg2"
)

var (
	arrayTmIΔ0PpG8w7aD1a6FYb8ΔQΞΞ      = ord.NewArraySer[[3]int, int](varint.Int)
	arrayd3UCTuS0HΔTyQFB1AR47mwΞΞ      = ord.NewValidArraySer[[3]int, int](varint.Int, arrops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	byte_sliceuvZKF7pSWKcTOpuVCUtR6wΞΞ = ord.NewValidByteSliceSer(bslops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
	mapWY5BjxP7fZfΔ8y3u5ΣyNAwΞΞ        = ord.NewValidMapSer[int, int](varint.Int, varint.Int, mapops.WithLenValidator[int, int](com.ValidatorFn[int](testdata.ValidateLength)))
	mapoo8ΣM84YHYspIΣOQWKrAbgΞΞ        = ord.NewMapSer[float32, map[MyIntStream][]SimpleStructStream](varint.Float32, mapΔqVacXL5gHBZo7mX1Q8ΔKQΞΞ)
	mapΔqVacXL5gHBZo7mX1Q8ΔKQΞΞ        = ord.NewMapSer[MyIntStream, []SimpleStructStream](MyIntStreamMUS, slicessnkΔvgHOhepPlHcDJ0wLQΞΞ)
	ptrpDXLUgdWgSHAfUBnMyIURwΞΞ        = ord.NewPtrSer[[3]int](arrayTmIΔ0PpG8w7aD1a6FYb8ΔQΞΞ)
	ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ        = ord.NewPtrSer[string](ord.String)
	ptrxOrkEmVctmuTnDp5kqk2lAΞΞ        = ord.NewPtrSer[SimpleStructStream](SimpleStructStreamMUS)
	slicekIYZkyxblkxWz0wWOYc4swΞΞ      = ord.NewValidSliceSer[int](varint.Int, slops.WithLenValidator[int](com.ValidatorFn[int](testdata.ValidateLength)))
	slicessnkΔvgHOhepPlHcDJ0wLQΞΞ      = ord.NewSliceSer[SimpleStructStream](SimpleStructStreamMUS)
	sliceΔyyAUELCQJUtjEJqbBIddQΞΞ      = ord.NewSliceSer[int](varint.Int)
	stringbgyTSVIWHIuEhXq5k7HdswΞΞ     = ord.NewValidStringSer(strops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
)

var MyIntStreamMUS = myIntStreamMUS{}

type myIntStreamMUS struct{}

func (s myIntStreamMUS) Marshal(v MyIntStream, w muss.Writer) (n int, err error) {
	return varint.Int.Marshal(int(v), w)
}

func (s myIntStreamMUS) Unmarshal(r muss.Reader) (v MyIntStream, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = MyIntStream(tmp)
	return
}

func (s myIntStreamMUS) Size(v MyIntStream) (size int) {
	return varint.Int.Size(int(v))
}

func (s myIntStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return varint.Int.Skip(r)
}

var MySliceStreamMUS = mySliceStreamMUS{}

type mySliceStreamMUS struct{}

func (s mySliceStreamMUS) Marshal(v MySliceStream, w muss.Writer) (n int, err error) {
	return sliceΔyyAUELCQJUtjEJqbBIddQΞΞ.Marshal([]int(v), w)
}

func (s mySliceStreamMUS) Unmarshal(r muss.Reader) (v MySliceStream, n int, err error) {
	tmp, n, err := sliceΔyyAUELCQJUtjEJqbBIddQΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = MySliceStream(tmp)
	return
}

func (s mySliceStreamMUS) Size(v MySliceStream) (size int) {
	return sliceΔyyAUELCQJUtjEJqbBIddQΞΞ.Size([]int(v))
}

func (s mySliceStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return sliceΔyyAUELCQJUtjEJqbBIddQΞΞ.Skip(r)
}

var ValidMyStringStreamMUS = validMyStringStreamMUS{}

type validMyStringStreamMUS struct{}

func (s validMyStringStreamMUS) Marshal(v ValidMyStringStream, w muss.Writer) (n int, err error) {
	return stringbgyTSVIWHIuEhXq5k7HdswΞΞ.Marshal(string(v), w)
}

func (s validMyStringStreamMUS) Unmarshal(r muss.Reader) (v ValidMyStringStream, n int, err error) {
	tmp, n, err := stringbgyTSVIWHIuEhXq5k7HdswΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = ValidMyStringStream(tmp)
	return
}

func (s validMyStringStreamMUS) Size(v ValidMyStringStream) (size int) {
	return stringbgyTSVIWHIuEhXq5k7HdswΞΞ.Size(string(v))
}

func (s validMyStringStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return stringbgyTSVIWHIuEhXq5k7HdswΞΞ.Skip(r)
}

var ValidMyArrayStreamMUS = validMyArrayStreamMUS{}

type validMyArrayStreamMUS struct{}

func (s validMyArrayStreamMUS) Marshal(v ValidMyArrayStream, w muss.Writer) (n int, err error) {
	return arrayd3UCTuS0HΔTyQFB1AR47mwΞΞ.Marshal([3]int(v), w)
}

func (s validMyArrayStreamMUS) Unmarshal(r muss.Reader) (v ValidMyArrayStream, n int, err error) {
	tmp, n, err := arrayd3UCTuS0HΔTyQFB1AR47mwΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = ValidMyArrayStream(tmp)
	return
}

func (s validMyArrayStreamMUS) Size(v ValidMyArrayStream) (size int) {
	return arrayd3UCTuS0HΔTyQFB1AR47mwΞΞ.Size([3]int(v))
}

func (s validMyArrayStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return arrayd3UCTuS0HΔTyQFB1AR47mwΞΞ.Skip(r)
}

var ValidMyByteSliceStreamMUS = validMyByteSliceStreamMUS{}

type validMyByteSliceStreamMUS struct{}

func (s validMyByteSliceStreamMUS) Marshal(v ValidMyByteSliceStream, w muss.Writer) (n int, err error) {
	return byte_sliceuvZKF7pSWKcTOpuVCUtR6wΞΞ.Marshal([]uint8(v), w)
}

func (s validMyByteSliceStreamMUS) Unmarshal(r muss.Reader) (v ValidMyByteSliceStream, n int, err error) {
	tmp, n, err := byte_sliceuvZKF7pSWKcTOpuVCUtR6wΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = ValidMyByteSliceStream(tmp)
	return
}

func (s validMyByteSliceStreamMUS) Size(v ValidMyByteSliceStream) (size int) {
	return byte_sliceuvZKF7pSWKcTOpuVCUtR6wΞΞ.Size([]uint8(v))
}

func (s validMyByteSliceStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return byte_sliceuvZKF7pSWKcTOpuVCUtR6wΞΞ.Skip(r)
}

var ValidMySliceStreamMUS = validMySliceStreamMUS{}

type validMySliceStreamMUS struct{}

func (s validMySliceStreamMUS) Marshal(v ValidMySliceStream, w muss.Writer) (n int, err error) {
	return slicekIYZkyxblkxWz0wWOYc4swΞΞ.Marshal([]int(v), w)
}

func (s validMySliceStreamMUS) Unmarshal(r muss.Reader) (v ValidMySliceStream, n int, err error) {
	tmp, n, err := slicekIYZkyxblkxWz0wWOYc4swΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = ValidMySliceStream(tmp)
	return
}

func (s validMySliceStreamMUS) Size(v ValidMySliceStream) (size int) {
	return slicekIYZkyxblkxWz0wWOYc4swΞΞ.Size([]int(v))
}

func (s validMySliceStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return slicekIYZkyxblkxWz0wWOYc4swΞΞ.Skip(r)
}

var ValidMyMapStreamMUS = validMyMapStreamMUS{}

type validMyMapStreamMUS struct{}

func (s validMyMapStreamMUS) Marshal(v ValidMyMapStream, w muss.Writer) (n int, err error) {
	return mapWY5BjxP7fZfΔ8y3u5ΣyNAwΞΞ.Marshal(map[int]int(v), w)
}

func (s validMyMapStreamMUS) Unmarshal(r muss.Reader) (v ValidMyMapStream, n int, err error) {
	tmp, n, err := mapWY5BjxP7fZfΔ8y3u5ΣyNAwΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = ValidMyMapStream(tmp)
	return
}

func (s validMyMapStreamMUS) Size(v ValidMyMapStream) (size int) {
	return mapWY5BjxP7fZfΔ8y3u5ΣyNAwΞΞ.Size(map[int]int(v))
}

func (s validMyMapStreamMUS) Skip(r muss.Reader) (n int, err error) {
	return mapWY5BjxP7fZfΔ8y3u5ΣyNAwΞΞ.Skip(r)
}

var SimpleStructStreamMUS = simpleStructStreamMUS{}

type simpleStructStreamMUS struct{}

func (s simpleStructStreamMUS) Marshal(v SimpleStructStream, w muss.Writer) (n int, err error) {
	return varint.Int.Marshal(v.Int, w)
}

func (s simpleStructStreamMUS) Unmarshal(r muss.Reader) (v SimpleStructStream, n int, err error) {
	v.Int, n, err = varint.Int.Unmarshal(r)
	return
}

func (s simpleStructStreamMUS) Size(v SimpleStructStream) (size int) {
	return varint.Int.Size(v.Int)
}

func (s simpleStructStreamMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = varint.Int.Skip(r)
	return
}

var ComplexStructStreamMUS = complexStructStreamMUS{}

type complexStructStreamMUS struct{}

func (s complexStructStreamMUS) Marshal(v ComplexStructStream, w muss.Writer) (n int, err error) {
	n, err = ord.Bool.Marshal(v.Bool, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Uint8.Marshal(v.Byte, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int8.Marshal(v.Int8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Marshal(v.Int16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int32.Marshal(v.Int32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int64.Marshal(v.Int64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint8.Marshal(v.Uint8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint16.Marshal(v.Uint16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint32.Marshal(v.Uint32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint64.Marshal(v.Uint64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float32.Marshal(v.Float32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float64.Marshal(v.Float64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Marshal(v.String, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceStreamMUS.Marshal(v.Alias, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = pkg2.StructStreamMUS.Marshal(v.AnotherPkgStruct, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = InterfaceStreamMUS.Marshal(v.Interface, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Marshal(v.ByteSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = slicessnkΔvgHOhepPlHcDJ0wLQΞΞ.Marshal(v.StructSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = arrayTmIΔ0PpG8w7aD1a6FYb8ΔQΞΞ.Marshal(v.Array, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Marshal(v.PtrString, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrxOrkEmVctmuTnDp5kqk2lAΞΞ.Marshal(v.PtrStruct, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Marshal(v.NilPtr, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrpDXLUgdWgSHAfUBnMyIURwΞΞ.Marshal(v.PtrArray, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = mapoo8ΣM84YHYspIΣOQWKrAbgΞΞ.Marshal(v.Map, w)
	n += n1
	return
}

func (s complexStructStreamMUS) Unmarshal(r muss.Reader) (v ComplexStructStream, n int, err error) {
	v.Bool, n, err = ord.Bool.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Byte, n1, err = varint.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int8, n1, err = varint.Int8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int16, n1, err = varint.Int16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int32, n1, err = varint.Int32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int64, n1, err = varint.Int64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint8, n1, err = varint.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint16, n1, err = varint.Uint16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint32, n1, err = varint.Uint32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint64, n1, err = varint.Uint64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float32, n1, err = varint.Float32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float64, n1, err = varint.Float64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.String, n1, err = ord.String.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Alias, n1, err = MySliceStreamMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.AnotherPkgStruct, n1, err = pkg2.StructStreamMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Interface, n1, err = InterfaceStreamMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.ByteSlice, n1, err = ord.ByteSlice.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.StructSlice, n1, err = slicessnkΔvgHOhepPlHcDJ0wLQΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Array, n1, err = arrayTmIΔ0PpG8w7aD1a6FYb8ΔQΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrString, n1, err = ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrStruct, n1, err = ptrxOrkEmVctmuTnDp5kqk2lAΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.NilPtr, n1, err = ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrArray, n1, err = ptrpDXLUgdWgSHAfUBnMyIURwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Map, n1, err = mapoo8ΣM84YHYspIΣOQWKrAbgΞΞ.Unmarshal(r)
	n += n1
	return
}

func (s complexStructStreamMUS) Size(v ComplexStructStream) (size int) {
	size = ord.Bool.Size(v.Bool)
	size += varint.Uint8.Size(v.Byte)
	size += varint.Int8.Size(v.Int8)
	size += varint.Int16.Size(v.Int16)
	size += varint.Int32.Size(v.Int32)
	size += varint.Int64.Size(v.Int64)
	size += varint.Uint8.Size(v.Uint8)
	size += varint.Uint16.Size(v.Uint16)
	size += varint.Uint32.Size(v.Uint32)
	size += varint.Uint64.Size(v.Uint64)
	size += varint.Float32.Size(v.Float32)
	size += varint.Float64.Size(v.Float64)
	size += ord.String.Size(v.String)
	size += MySliceStreamMUS.Size(v.Alias)
	size += pkg2.StructStreamMUS.Size(v.AnotherPkgStruct)
	size += InterfaceStreamMUS.Size(v.Interface)
	size += ord.ByteSlice.Size(v.ByteSlice)
	size += slicessnkΔvgHOhepPlHcDJ0wLQΞΞ.Size(v.StructSlice)
	size += arrayTmIΔ0PpG8w7aD1a6FYb8ΔQΞΞ.Size(v.Array)
	size += ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Size(v.PtrString)
	size += ptrxOrkEmVctmuTnDp5kqk2lAΞΞ.Size(v.PtrStruct)
	size += ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Size(v.NilPtr)
	size += ptrpDXLUgdWgSHAfUBnMyIURwΞΞ.Size(v.PtrArray)
	return size + mapoo8ΣM84YHYspIΣOQWKrAbgΞΞ.Size(v.Map)
}

func (s complexStructStreamMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = ord.Bool.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceStreamMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = pkg2.StructStreamMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = InterfaceStreamMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = slicessnkΔvgHOhepPlHcDJ0wLQΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = arrayTmIΔ0PpG8w7aD1a6FYb8ΔQΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrxOrkEmVctmuTnDp5kqk2lAΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrsZ1jCgUntHdxyz2i5pCsBQΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrpDXLUgdWgSHAfUBnMyIURwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = mapoo8ΣM84YHYspIΣOQWKrAbgΞΞ.Skip(r)
	n += n1
	return
}

var InterfaceImpl1StreamMUS = interfaceImpl1StreamMUS{}

type interfaceImpl1StreamMUS struct{}

func (s interfaceImpl1StreamMUS) Marshal(v InterfaceImpl1Stream, w muss.Writer) (n int, err error) {
	return
}

func (s interfaceImpl1StreamMUS) Unmarshal(r muss.Reader) (v InterfaceImpl1Stream, n int, err error) {
	return
}

func (s interfaceImpl1StreamMUS) Size(v InterfaceImpl1Stream) (size int) {
	return
}

func (s interfaceImpl1StreamMUS) Skip(r muss.Reader) (n int, err error) {
	return
}

var InterfaceImpl2StreamMUS = interfaceImpl2StreamMUS{}

type interfaceImpl2StreamMUS struct{}

func (s interfaceImpl2StreamMUS) Marshal(v InterfaceImpl2Stream, w muss.Writer) (n int, err error) {
	return varint.Int.Marshal(int(v), w)
}

func (s interfaceImpl2StreamMUS) Unmarshal(r muss.Reader) (v InterfaceImpl2Stream, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = InterfaceImpl2Stream(tmp)
	return
}

func (s interfaceImpl2StreamMUS) Size(v InterfaceImpl2Stream) (size int) {
	return varint.Int.Size(int(v))
}

func (s interfaceImpl2StreamMUS) Skip(r muss.Reader) (n int, err error) {
	return varint.Int.Skip(r)
}

var InterfaceImpl1StreamDTS = dts.New[InterfaceImpl1Stream](InterfaceImpl1StreamDTM, InterfaceImpl1StreamMUS)
var InterfaceImpl2StreamDTS = dts.New[InterfaceImpl2Stream](InterfaceImpl2StreamDTM, InterfaceImpl2StreamMUS)

var InterfaceStreamMUS = interfaceStreamMUS{}

type interfaceStreamMUS struct{}

func (s interfaceStreamMUS) Marshal(v InterfaceStream, w muss.Writer) (n int, err error) {
	switch t := v.(type) {
	case InterfaceImpl1Stream:
		return InterfaceImpl1StreamDTS.Marshal(t, w)
	case InterfaceImpl2Stream:
		return InterfaceImpl2StreamDTS.Marshal(t, w)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceStreamMUS) Unmarshal(r muss.Reader) (v InterfaceStream, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1StreamDTM:
		v, n1, err = InterfaceImpl1StreamDTS.UnmarshalData(r)
	case InterfaceImpl2StreamDTM:
		v, n1, err = InterfaceImpl2StreamDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s interfaceStreamMUS) Size(v InterfaceStream) (size int) {
	switch t := v.(type) {
	case InterfaceImpl1Stream:
		return InterfaceImpl1StreamDTS.Size(t)
	case InterfaceImpl2Stream:
		return InterfaceImpl2StreamDTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceStreamMUS) Skip(r muss.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1StreamDTM:
		n1, err = InterfaceImpl1StreamDTS.SkipData(r)
	case InterfaceImpl2StreamDTM:
		n1, err = InterfaceImpl2StreamDTS.SkipData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

var InterfaceMarshallerStreamMUS = interfaceMarshallerStreamMUS{}

type interfaceMarshallerStreamMUS struct{}

func (s interfaceMarshallerStreamMUS) Marshal(v InterfaceMarshallerStream, w muss.Writer) (n int, err error) {
	if m, ok := v.(exts.MarshallerTypedMUS); ok {
		return m.MarshalTypedMUS(w)
	}
	panic(fmt.Sprintf("%v doesn't implement exts.MarshallerTypedMUS interface", reflect.TypeOf(v)))
}

func (s interfaceMarshallerStreamMUS) Unmarshal(r muss.Reader) (v InterfaceMarshallerStream, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1StreamDTM:
		v, n1, err = InterfaceImpl1StreamDTS.UnmarshalData(r)
	case InterfaceImpl2StreamDTM:
		v, n1, err = InterfaceImpl2StreamDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s interfaceMarshallerStreamMUS) Size(v InterfaceMarshallerStream) (size int) {
	if m, ok := v.(exts.MarshallerTypedMUS); ok {
		return m.SizeTypedMUS()
	}
	panic(fmt.Sprintf("%v doesn't implement exts.MarshallerTypedMUS interface", reflect.TypeOf(v)))
}

func (s interfaceMarshallerStreamMUS) Skip(r muss.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1StreamDTM:
		n1, err = InterfaceImpl1StreamDTS.SkipData(r)
	case InterfaceImpl2StreamDTM:
		n1, err = InterfaceImpl2StreamDTS.SkipData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
