// Code generated by musgen-go. DO NOT EDIT.

package pkg1

import (
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/unsafe"
)

var StructNotUnsafeMUS = structNotUnsafeMUS{}

type structNotUnsafeMUS struct{}

func (s structNotUnsafeMUS) Marshal(v StructNotUnsafe, bs []byte) (n int) {
	n = ord.String.Marshal(v.String, bs)
	n += unsafe.Int.Marshal(v.Int, bs[n:])
	return n + unsafe.TimeUnix.Marshal(v.Time, bs[n:])
}

func (s structNotUnsafeMUS) Unmarshal(bs []byte) (v StructNotUnsafe, n int, err error) {
	v.String, n, err = ord.String.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	v.Int, n1, err = unsafe.Int.Unmarshal(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Time, n1, err = unsafe.TimeUnix.Unmarshal(bs[n:])
	n += n1
	return
}

func (s structNotUnsafeMUS) Size(v StructNotUnsafe) (size int) {
	size = ord.String.Size(v.String)
	size += unsafe.Int.Size(v.Int)
	return size + unsafe.TimeUnix.Size(v.Time)
}

func (s structNotUnsafeMUS) Skip(bs []byte) (n int, err error) {
	n, err = ord.String.Skip(bs)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.Int.Skip(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.TimeUnix.Skip(bs[n:])
	n += n1
	return
}
