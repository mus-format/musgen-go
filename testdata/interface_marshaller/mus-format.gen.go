// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	"fmt"
	"reflect"

	dts "github.com/mus-format/dts-go"
	ext "github.com/mus-format/ext-go"
)

var Impl1MUS = impl1MUS{}

type impl1MUS struct{}

func (s impl1MUS) Marshal(v Impl1, bs []byte) (n int) {
	return
}

func (s impl1MUS) Unmarshal(bs []byte) (v Impl1, n int, err error) {
	return
}

func (s impl1MUS) Size(v Impl1) (size int) {
	return
}

func (s impl1MUS) Skip(bs []byte) (n int, err error) {
	return
}

var Impl1DTS = dts.New[Impl1](Impl1DTM, Impl1MUS)

var Impl2MUS = impl2MUS{}

type impl2MUS struct{}

func (s impl2MUS) Marshal(v Impl2, bs []byte) (n int) {
	return
}

func (s impl2MUS) Unmarshal(bs []byte) (v Impl2, n int, err error) {
	return
}

func (s impl2MUS) Size(v Impl2) (size int) {
	return
}

func (s impl2MUS) Skip(bs []byte) (n int, err error) {
	return
}

var Impl2DTS = dts.New[Impl2](Impl2DTM, Impl2MUS)

var MyInterfaceMUS = myInterfaceMUS{}

type myInterfaceMUS struct{}

func (s myInterfaceMUS) Marshal(v MyInterface, bs []byte) (n int) {
	if m, ok := v.(ext.MarshallerTypedMUS); ok {
		return m.MarshalTypedMUS(bs)
	}
	panic(fmt.Sprintf("%v doesn't implement the ext.MarshallerTypedMUS interface", reflect.TypeOf(v)))
}

func (s myInterfaceMUS) Unmarshal(bs []byte) (v MyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		v, n1, err = Impl1DTS.UnmarshalData(bs[n:])
	case Impl2DTM:
		v, n1, err = Impl2DTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myInterfaceMUS) Size(v MyInterface) (size int) {
	if m, ok := v.(ext.MarshallerTypedMUS); ok {
		return m.SizeTypedMUS()
	}
	panic(fmt.Sprintf("%v doesn't implement the ext.MarshallerTypedMUS interface", reflect.TypeOf(v)))
}

func (s myInterfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		n1, err = Impl1DTS.SkipData(bs[n:])
	case Impl2DTM:
		n1, err = Impl2DTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
