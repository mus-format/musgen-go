// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	"fmt"

	com "github.com/mus-format/common-go"
	dts "github.com/mus-format/dts-go"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/varint"
)

var Impl1MUS = impl1MUS{}

type impl1MUS struct{}

func (s impl1MUS) Marshal(v Impl1, bs []byte) (n int) {
	return ord.String.Marshal(v.Str, bs)
}

func (s impl1MUS) Unmarshal(bs []byte) (v Impl1, n int, err error) {
	v.Str, n, err = ord.String.Unmarshal(bs)
	return
}

func (s impl1MUS) Size(v Impl1) (size int) {
	return ord.String.Size(v.Str)
}

func (s impl1MUS) Skip(bs []byte) (n int, err error) {
	n, err = ord.String.Skip(bs)
	return
}

var Impl1DTS = dts.New[Impl1](Impl1DTM, Impl1MUS)

var Impl2MUS = impl2MUS{}

type impl2MUS struct{}

func (s impl2MUS) Marshal(v Impl2, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s impl2MUS) Unmarshal(bs []byte) (v Impl2, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = Impl2(tmp)
	return
}

func (s impl2MUS) Size(v Impl2) (size int) {
	return varint.Int.Size(int(v))
}

func (s impl2MUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var Impl2DTS = dts.New[Impl2](Impl2DTM, Impl2MUS)

var MyInterfaceMUS = myInterfaceMUS{}

type myInterfaceMUS struct{}

func (s myInterfaceMUS) Marshal(v MyInterface, bs []byte) (n int) {
	switch t := v.(type) {
	case Impl1:
		return Impl1DTS.Marshal(t, bs)
	case Impl2:
		return Impl2DTS.Marshal(t, bs)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myInterfaceMUS) Unmarshal(bs []byte) (v MyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		v, n1, err = Impl1DTS.UnmarshalData(bs[n:])
	case Impl2DTM:
		v, n1, err = Impl2DTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myInterfaceMUS) Size(v MyInterface) (size int) {
	switch t := v.(type) {
	case Impl1:
		return Impl1DTS.Size(t)
	case Impl2:
		return Impl2DTS.Size(t)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myInterfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		n1, err = Impl1DTS.SkipData(bs[n:])
	case Impl2DTM:
		n1, err = Impl2DTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

var MyAnyInterfaceMUS = myAnyInterfaceMUS{}

type myAnyInterfaceMUS struct{}

func (s myAnyInterfaceMUS) Marshal(v MyAnyInterface, bs []byte) (n int) {
	switch t := v.(type) {
	case Impl1:
		return Impl1DTS.Marshal(t, bs)
	case Impl2:
		return Impl2DTS.Marshal(t, bs)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myAnyInterfaceMUS) Unmarshal(bs []byte) (v MyAnyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		v, n1, err = Impl1DTS.UnmarshalData(bs[n:])
	case Impl2DTM:
		v, n1, err = Impl2DTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myAnyInterfaceMUS) Size(v MyAnyInterface) (size int) {
	switch t := v.(type) {
	case Impl1:
		return Impl1DTS.Size(t)
	case Impl2:
		return Impl2DTS.Size(t)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myAnyInterfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		n1, err = Impl1DTS.SkipData(bs[n:])
	case Impl2DTM:
		n1, err = Impl2DTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
