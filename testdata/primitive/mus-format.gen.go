// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	com "github.com/mus-format/common-go"
	strops "github.com/mus-format/mus-go/options/string"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/raw"
	"github.com/mus-format/mus-go/varint"
	"github.com/mus-format/musgen-go/testdata"
)

var (
	stringFΔbClwHVHhWnvbzAlo4mjwΞΞ = ord.NewValidStringSer(strops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength3)))
	stringzmiCzdD2Zas3sJw2nyXGnQΞΞ = ord.NewStringSer(strops.WithLenSer(raw.Int))
	stringzΣQ5DdEWJqaΔmw4lkP8gLAΞΞ = ord.NewValidStringSer(strops.WithLenSer(raw.Int), strops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength3)))
)

var MyBoolMUS = myBoolMUS{}

type myBoolMUS struct{}

func (s myBoolMUS) Marshal(v MyBool, bs []byte) (n int) {
	return ord.Bool.Marshal(bool(v), bs)
}

func (s myBoolMUS) Unmarshal(bs []byte) (v MyBool, n int, err error) {
	tmp, n, err := ord.Bool.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyBool(tmp)
	return
}

func (s myBoolMUS) Size(v MyBool) (size int) {
	return ord.Bool.Size(bool(v))
}

func (s myBoolMUS) Skip(bs []byte) (n int, err error) {
	return ord.Bool.Skip(bs)
}

var MyByteMUS = myByteMUS{}

type myByteMUS struct{}

func (s myByteMUS) Marshal(v MyByte, bs []byte) (n int) {
	return varint.Uint8.Marshal(uint8(v), bs)
}

func (s myByteMUS) Unmarshal(bs []byte) (v MyByte, n int, err error) {
	tmp, n, err := varint.Uint8.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyByte(tmp)
	return
}

func (s myByteMUS) Size(v MyByte) (size int) {
	return varint.Uint8.Size(uint8(v))
}

func (s myByteMUS) Skip(bs []byte) (n int, err error) {
	return varint.Uint8.Skip(bs)
}

var MyFloat32MUS = myFloat32MUS{}

type myFloat32MUS struct{}

func (s myFloat32MUS) Marshal(v MyFloat32, bs []byte) (n int) {
	return varint.Float32.Marshal(float32(v), bs)
}

func (s myFloat32MUS) Unmarshal(bs []byte) (v MyFloat32, n int, err error) {
	tmp, n, err := varint.Float32.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyFloat32(tmp)
	return
}

func (s myFloat32MUS) Size(v MyFloat32) (size int) {
	return varint.Float32.Size(float32(v))
}

func (s myFloat32MUS) Skip(bs []byte) (n int, err error) {
	return varint.Float32.Skip(bs)
}

var MyFloat64MUS = myFloat64MUS{}

type myFloat64MUS struct{}

func (s myFloat64MUS) Marshal(v MyFloat64, bs []byte) (n int) {
	return varint.Float64.Marshal(float64(v), bs)
}

func (s myFloat64MUS) Unmarshal(bs []byte) (v MyFloat64, n int, err error) {
	tmp, n, err := varint.Float64.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyFloat64(tmp)
	return
}

func (s myFloat64MUS) Size(v MyFloat64) (size int) {
	return varint.Float64.Size(float64(v))
}

func (s myFloat64MUS) Skip(bs []byte) (n int, err error) {
	return varint.Float64.Skip(bs)
}

var MyIntMUS = myIntMUS{}

type myIntMUS struct{}

func (s myIntMUS) Marshal(v MyInt, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s myIntMUS) Unmarshal(bs []byte) (v MyInt, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyInt(tmp)
	return
}

func (s myIntMUS) Size(v MyInt) (size int) {
	return varint.Int.Size(int(v))
}

func (s myIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var RawMyIntMUS = rawMyIntMUS{}

type rawMyIntMUS struct{}

func (s rawMyIntMUS) Marshal(v RawMyInt, bs []byte) (n int) {
	return raw.Int.Marshal(int(v), bs)
}

func (s rawMyIntMUS) Unmarshal(bs []byte) (v RawMyInt, n int, err error) {
	tmp, n, err := raw.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = RawMyInt(tmp)
	return
}

func (s rawMyIntMUS) Size(v RawMyInt) (size int) {
	return raw.Int.Size(int(v))
}

func (s rawMyIntMUS) Skip(bs []byte) (n int, err error) {
	return raw.Int.Skip(bs)
}

var VarintPositiveMyIntMUS = varintPositiveMyIntMUS{}

type varintPositiveMyIntMUS struct{}

func (s varintPositiveMyIntMUS) Marshal(v VarintPositiveMyInt, bs []byte) (n int) {
	return varint.PositiveInt.Marshal(int(v), bs)
}

func (s varintPositiveMyIntMUS) Unmarshal(bs []byte) (v VarintPositiveMyInt, n int, err error) {
	tmp, n, err := varint.PositiveInt.Unmarshal(bs)
	if err != nil {
		return
	}
	v = VarintPositiveMyInt(tmp)
	return
}

func (s varintPositiveMyIntMUS) Size(v VarintPositiveMyInt) (size int) {
	return varint.PositiveInt.Size(int(v))
}

func (s varintPositiveMyIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.PositiveInt.Skip(bs)
}

var ValidMyIntMUS = validMyIntMUS{}

type validMyIntMUS struct{}

func (s validMyIntMUS) Marshal(v ValidMyInt, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s validMyIntMUS) Unmarshal(bs []byte) (v ValidMyInt, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyInt(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s validMyIntMUS) Size(v ValidMyInt) (size int) {
	return varint.Int.Size(int(v))
}

func (s validMyIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var AllMyIntMUS = allMyIntMUS{}

type allMyIntMUS struct{}

func (s allMyIntMUS) Marshal(v AllMyInt, bs []byte) (n int) {
	return raw.Int.Marshal(int(v), bs)
}

func (s allMyIntMUS) Unmarshal(bs []byte) (v AllMyInt, n int, err error) {
	tmp, n, err := raw.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyInt(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s allMyIntMUS) Size(v AllMyInt) (size int) {
	return raw.Int.Size(int(v))
}

func (s allMyIntMUS) Skip(bs []byte) (n int, err error) {
	return raw.Int.Skip(bs)
}

var MyStringMUS = myStringMUS{}

type myStringMUS struct{}

func (s myStringMUS) Marshal(v MyString, bs []byte) (n int) {
	return ord.String.Marshal(string(v), bs)
}

func (s myStringMUS) Unmarshal(bs []byte) (v MyString, n int, err error) {
	tmp, n, err := ord.String.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyString(tmp)
	return
}

func (s myStringMUS) Size(v MyString) (size int) {
	return ord.String.Size(string(v))
}

func (s myStringMUS) Skip(bs []byte) (n int, err error) {
	return ord.String.Skip(bs)
}

var LenEncodingMyStringMUS = lenEncodingMyStringMUS{}

type lenEncodingMyStringMUS struct{}

func (s lenEncodingMyStringMUS) Marshal(v LenEncodingMyString, bs []byte) (n int) {
	return stringzmiCzdD2Zas3sJw2nyXGnQΞΞ.Marshal(string(v), bs)
}

func (s lenEncodingMyStringMUS) Unmarshal(bs []byte) (v LenEncodingMyString, n int, err error) {
	tmp, n, err := stringzmiCzdD2Zas3sJw2nyXGnQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyString(tmp)
	return
}

func (s lenEncodingMyStringMUS) Size(v LenEncodingMyString) (size int) {
	return stringzmiCzdD2Zas3sJw2nyXGnQΞΞ.Size(string(v))
}

func (s lenEncodingMyStringMUS) Skip(bs []byte) (n int, err error) {
	return stringzmiCzdD2Zas3sJw2nyXGnQΞΞ.Skip(bs)
}

var LenValidMyStringMUS = lenValidMyStringMUS{}

type lenValidMyStringMUS struct{}

func (s lenValidMyStringMUS) Marshal(v LenValidMyString, bs []byte) (n int) {
	return stringFΔbClwHVHhWnvbzAlo4mjwΞΞ.Marshal(string(v), bs)
}

func (s lenValidMyStringMUS) Unmarshal(bs []byte) (v LenValidMyString, n int, err error) {
	tmp, n, err := stringFΔbClwHVHhWnvbzAlo4mjwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMyString(tmp)
	return
}

func (s lenValidMyStringMUS) Size(v LenValidMyString) (size int) {
	return stringFΔbClwHVHhWnvbzAlo4mjwΞΞ.Size(string(v))
}

func (s lenValidMyStringMUS) Skip(bs []byte) (n int, err error) {
	return stringFΔbClwHVHhWnvbzAlo4mjwΞΞ.Skip(bs)
}

var ValidMyStringMUS = validMyStringMUS{}

type validMyStringMUS struct{}

func (s validMyStringMUS) Marshal(v ValidMyString, bs []byte) (n int) {
	return ord.String.Marshal(string(v), bs)
}

func (s validMyStringMUS) Unmarshal(bs []byte) (v ValidMyString, n int, err error) {
	tmp, n, err := ord.String.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyString(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s validMyStringMUS) Size(v ValidMyString) (size int) {
	return ord.String.Size(string(v))
}

func (s validMyStringMUS) Skip(bs []byte) (n int, err error) {
	return ord.String.Skip(bs)
}

var AllMyStringMUS = allMyStringMUS{}

type allMyStringMUS struct{}

func (s allMyStringMUS) Marshal(v AllMyString, bs []byte) (n int) {
	return stringzΣQ5DdEWJqaΔmw4lkP8gLAΞΞ.Marshal(string(v), bs)
}

func (s allMyStringMUS) Unmarshal(bs []byte) (v AllMyString, n int, err error) {
	tmp, n, err := stringzΣQ5DdEWJqaΔmw4lkP8gLAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyString(tmp)
	err = testdata.ValidateZeroValue(v)
	return
}

func (s allMyStringMUS) Size(v AllMyString) (size int) {
	return stringzΣQ5DdEWJqaΔmw4lkP8gLAΞΞ.Size(string(v))
}

func (s allMyStringMUS) Skip(bs []byte) (n int, err error) {
	return stringzΣQ5DdEWJqaΔmw4lkP8gLAΞΞ.Skip(bs)
}
