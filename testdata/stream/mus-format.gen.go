// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	"fmt"
	"reflect"

	com "github.com/mus-format/common-go"
	dts "github.com/mus-format/dts-stream-go"
	ext "github.com/mus-format/ext-stream-go"
	mus "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/ord"
	"github.com/mus-format/mus-stream-go/raw"
	"github.com/mus-format/mus-stream-go/varint"
	struct_testdata "github.com/mus-format/musgen-go/testdata/struct"
)

var (
	arraylX3pypUDTfeSdHTKlKUv4gΞΞ = ord.NewArraySer[[3]int, int](varint.Int)
	mapH8j46lPZno54hΔtLmGyyxwΞΞ   = ord.NewMapSer[float32, map[struct_testdata.MyInt][]struct_testdata.MyStruct](varint.Float32, mapuLfuCOHEM9SeNΣen4ZΔhiAΞΞ)
	mapuLfuCOHEM9SeNΣen4ZΔhiAΞΞ   = ord.NewMapSer[struct_testdata.MyInt, []struct_testdata.MyStruct](MyIntMUS, slice3n36kGXelM18HLGNy6zeIwΞΞ)
	ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ   = ord.NewPtrSer[string](ord.String)
	ptrNIA7aEb7zdLK8xfbe3euugΞΞ   = ord.NewPtrSer[[3]int](arraylX3pypUDTfeSdHTKlKUv4gΞΞ)
	ptrRrpNZmWjLjBpcOankFymZgΞΞ   = ord.NewPtrSer[struct_testdata.MyStruct](MyStructMUS)
	slice3n36kGXelM18HLGNy6zeIwΞΞ = ord.NewSliceSer[struct_testdata.MyStruct](MyStructMUS)
	slicebjA5KwLApEΣZwLpStNRdJAΞΞ = ord.NewSliceSer[string](ord.String)
)

var MyIntMUS = myIntMUS{}

type myIntMUS struct{}

func (s myIntMUS) Marshal(v struct_testdata.MyInt, w mus.Writer) (n int, err error) {
	return varint.Int.Marshal(int(v), w)
}

func (s myIntMUS) Unmarshal(r mus.Reader) (v struct_testdata.MyInt, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = struct_testdata.MyInt(tmp)
	return
}

func (s myIntMUS) Size(v struct_testdata.MyInt) (size int) {
	return varint.Int.Size(int(v))
}

func (s myIntMUS) Skip(r mus.Reader) (n int, err error) {
	return varint.Int.Skip(r)
}

var MySliceMUS = mySliceMUS{}

type mySliceMUS struct{}

func (s mySliceMUS) Marshal(v struct_testdata.MySlice, w mus.Writer) (n int, err error) {
	return slicebjA5KwLApEΣZwLpStNRdJAΞΞ.Marshal([]string(v), w)
}

func (s mySliceMUS) Unmarshal(r mus.Reader) (v struct_testdata.MySlice, n int, err error) {
	tmp, n, err := slicebjA5KwLApEΣZwLpStNRdJAΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = struct_testdata.MySlice(tmp)
	return
}

func (s mySliceMUS) Size(v struct_testdata.MySlice) (size int) {
	return slicebjA5KwLApEΣZwLpStNRdJAΞΞ.Size([]string(v))
}

func (s mySliceMUS) Skip(r mus.Reader) (n int, err error) {
	return slicebjA5KwLApEΣZwLpStNRdJAΞΞ.Skip(r)
}

var MyStructMUS = myStructMUS{}

type myStructMUS struct{}

func (s myStructMUS) Marshal(v struct_testdata.MyStruct, w mus.Writer) (n int, err error) {
	n, err = varint.Int.Marshal(v.Int, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = ord.String.Marshal(v.Str, w)
	n += n1
	return
}

func (s myStructMUS) Unmarshal(r mus.Reader) (v struct_testdata.MyStruct, n int, err error) {
	v.Int, n, err = varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Str, n1, err = ord.String.Unmarshal(r)
	n += n1
	return
}

func (s myStructMUS) Size(v struct_testdata.MyStruct) (size int) {
	size = varint.Int.Size(v.Int)
	return size + ord.String.Size(v.Str)
}

func (s myStructMUS) Skip(r mus.Reader) (n int, err error) {
	n, err = varint.Int.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = ord.String.Skip(r)
	n += n1
	return
}

var MyIntDTS = dts.New[struct_testdata.MyInt](MyIntDTM, MyIntMUS)

var MyAnotherInterfaceMUS = myAnotherInterfaceMUS{}

type myAnotherInterfaceMUS struct{}

func (s myAnotherInterfaceMUS) Marshal(v struct_testdata.MyInterface, w mus.Writer) (n int, err error) {
	switch t := v.(type) {
	case struct_testdata.MyInt:
		return MyIntDTS.Marshal(t, w)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myAnotherInterfaceMUS) Unmarshal(r mus.Reader) (v struct_testdata.MyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case MyIntDTM:
		v, n1, err = MyIntDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myAnotherInterfaceMUS) Size(v struct_testdata.MyInterface) (size int) {
	switch t := v.(type) {
	case struct_testdata.MyInt:
		return MyIntDTS.Size(t)
	default:
		panic(fmt.Sprintf(com.ErrorPrefix+"unexpected %v type", t))
	}
}

func (s myAnotherInterfaceMUS) Skip(r mus.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case MyIntDTM:
		n1, err = MyIntDTS.SkipData(r)
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

var ComplexStructMUS = complexStructMUS{}

type complexStructMUS struct{}

func (s complexStructMUS) Marshal(v struct_testdata.ComplexStruct, w mus.Writer) (n int, err error) {
	n, err = ord.Bool.Marshal(v.Bool, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Uint8.Marshal(v.Byte, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int8.Marshal(v.Int8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Marshal(v.Int16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int32.Marshal(v.Int32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int64.Marshal(v.Int64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint8.Marshal(v.Uint8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint16.Marshal(v.Uint16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint32.Marshal(v.Uint32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint64.Marshal(v.Uint64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float32.Marshal(v.Float32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float64.Marshal(v.Float64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Marshal(v.String, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Marshal(v.ByteSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = slice3n36kGXelM18HLGNy6zeIwΞΞ.Marshal(v.StructSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = arraylX3pypUDTfeSdHTKlKUv4gΞΞ.Marshal(v.Array, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Marshal(v.PtrString, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrRrpNZmWjLjBpcOankFymZgΞΞ.Marshal(v.PtrStruct, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Marshal(v.NilPtr, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrNIA7aEb7zdLK8xfbe3euugΞΞ.Marshal(v.PtrArray, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = mapH8j46lPZno54hΔtLmGyyxwΞΞ.Marshal(v.Map, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = raw.TimeUnix.Marshal(v.Time, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceMUS.Marshal(v.Alias, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = MyAnotherInterfaceMUS.Marshal(v.Interface, w)
	n += n1
	return
}

func (s complexStructMUS) Unmarshal(r mus.Reader) (v struct_testdata.ComplexStruct, n int, err error) {
	v.Bool, n, err = ord.Bool.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Byte, n1, err = varint.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int8, n1, err = varint.Int8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int16, n1, err = varint.Int16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int32, n1, err = varint.Int32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int64, n1, err = varint.Int64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint8, n1, err = varint.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint16, n1, err = varint.Uint16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint32, n1, err = varint.Uint32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint64, n1, err = varint.Uint64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float32, n1, err = varint.Float32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float64, n1, err = varint.Float64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.String, n1, err = ord.String.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.ByteSlice, n1, err = ord.ByteSlice.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.StructSlice, n1, err = slice3n36kGXelM18HLGNy6zeIwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Array, n1, err = arraylX3pypUDTfeSdHTKlKUv4gΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrString, n1, err = ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrStruct, n1, err = ptrRrpNZmWjLjBpcOankFymZgΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.NilPtr, n1, err = ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrArray, n1, err = ptrNIA7aEb7zdLK8xfbe3euugΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Map, n1, err = mapH8j46lPZno54hΔtLmGyyxwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Time, n1, err = raw.TimeUnix.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Alias, n1, err = MySliceMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Interface, n1, err = MyAnotherInterfaceMUS.Unmarshal(r)
	n += n1
	return
}

func (s complexStructMUS) Size(v struct_testdata.ComplexStruct) (size int) {
	size = ord.Bool.Size(v.Bool)
	size += varint.Uint8.Size(v.Byte)
	size += varint.Int8.Size(v.Int8)
	size += varint.Int16.Size(v.Int16)
	size += varint.Int32.Size(v.Int32)
	size += varint.Int64.Size(v.Int64)
	size += varint.Uint8.Size(v.Uint8)
	size += varint.Uint16.Size(v.Uint16)
	size += varint.Uint32.Size(v.Uint32)
	size += varint.Uint64.Size(v.Uint64)
	size += varint.Float32.Size(v.Float32)
	size += varint.Float64.Size(v.Float64)
	size += ord.String.Size(v.String)
	size += ord.ByteSlice.Size(v.ByteSlice)
	size += slice3n36kGXelM18HLGNy6zeIwΞΞ.Size(v.StructSlice)
	size += arraylX3pypUDTfeSdHTKlKUv4gΞΞ.Size(v.Array)
	size += ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Size(v.PtrString)
	size += ptrRrpNZmWjLjBpcOankFymZgΞΞ.Size(v.PtrStruct)
	size += ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Size(v.NilPtr)
	size += ptrNIA7aEb7zdLK8xfbe3euugΞΞ.Size(v.PtrArray)
	size += mapH8j46lPZno54hΔtLmGyyxwΞΞ.Size(v.Map)
	size += raw.TimeUnix.Size(v.Time)
	size += MySliceMUS.Size(v.Alias)
	return size + MyAnotherInterfaceMUS.Size(v.Interface)
}

func (s complexStructMUS) Skip(r mus.Reader) (n int, err error) {
	n, err = ord.Bool.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Int64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Uint64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.Float64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = slice3n36kGXelM18HLGNy6zeIwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = arraylX3pypUDTfeSdHTKlKUv4gΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrRrpNZmWjLjBpcOankFymZgΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrMaRmyp3Wrvh9pPO5AazZwwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrNIA7aEb7zdLK8xfbe3euugΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = mapH8j46lPZno54hΔtLmGyyxwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = raw.TimeUnix.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = MyAnotherInterfaceMUS.Skip(r)
	n += n1
	return
}

var Impl1MUS = impl1MUS{}

type impl1MUS struct{}

func (s impl1MUS) Marshal(v Impl1, w mus.Writer) (n int, err error) {
	return ord.String.Marshal(v.Str, w)
}

func (s impl1MUS) Unmarshal(r mus.Reader) (v Impl1, n int, err error) {
	v.Str, n, err = ord.String.Unmarshal(r)
	return
}

func (s impl1MUS) Size(v Impl1) (size int) {
	return ord.String.Size(v.Str)
}

func (s impl1MUS) Skip(r mus.Reader) (n int, err error) {
	n, err = ord.String.Skip(r)
	return
}

var Impl1DTS = dts.New[Impl1](Impl1DTM, Impl1MUS)

var Impl2MUS = impl2MUS{}

type impl2MUS struct{}

func (s impl2MUS) Marshal(v Impl2, w mus.Writer) (n int, err error) {
	return varint.Int.Marshal(int(v), w)
}

func (s impl2MUS) Unmarshal(r mus.Reader) (v Impl2, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = Impl2(tmp)
	return
}

func (s impl2MUS) Size(v Impl2) (size int) {
	return varint.Int.Size(int(v))
}

func (s impl2MUS) Skip(r mus.Reader) (n int, err error) {
	return varint.Int.Skip(r)
}

var Impl2DTS = dts.New[Impl2](Impl2DTM, Impl2MUS)

var MyInterfaceMUS = myInterfaceMUS{}

type myInterfaceMUS struct{}

func (s myInterfaceMUS) Marshal(v MyInterface, w mus.Writer) (n int, err error) {
	if m, ok := v.(ext.MarshallerTypedMUS); ok {
		return m.MarshalTypedMUS(w)
	}
	panic(fmt.Sprintf("%v doesn't implement the ext.MarshallerTypedMUS interface", reflect.TypeOf(v)))
}

func (s myInterfaceMUS) Unmarshal(r mus.Reader) (v MyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		v, n1, err = Impl1DTS.UnmarshalData(r)
	case Impl2DTM:
		v, n1, err = Impl2DTS.UnmarshalData(r)
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myInterfaceMUS) Size(v MyInterface) (size int) {
	if m, ok := v.(ext.MarshallerTypedMUS); ok {
		return m.SizeTypedMUS()
	}
	panic(fmt.Sprintf("%v doesn't implement the ext.MarshallerTypedMUS interface", reflect.TypeOf(v)))
}

func (s myInterfaceMUS) Skip(r mus.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case Impl1DTM:
		n1, err = Impl1DTS.SkipData(r)
	case Impl2DTM:
		n1, err = Impl2DTS.SkipData(r)
	default:
		err = fmt.Errorf(com.ErrorPrefix+"unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
