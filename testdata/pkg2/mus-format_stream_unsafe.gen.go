// Code generated by musgen-go. DO NOT EDIT.

package pkg2

import (
	muss "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/unsafe"
)

var StructStreamUnsafeMUS = structStreamUnsafeMUS{}

type structStreamUnsafeMUS struct{}

func (s structStreamUnsafeMUS) Marshal(v StructStreamUnsafe, w muss.Writer) (n int, err error) {
	n, err = unsafe.Float32.Marshal(v.Float32, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.Float64.Marshal(v.Float64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint8.Marshal(v.Byte, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Bool.Marshal(v.Bool, w)
	n += n1
	return
}

func (s structStreamUnsafeMUS) Unmarshal(r muss.Reader) (v StructStreamUnsafe, n int, err error) {
	v.Float32, n, err = unsafe.Float32.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Float64, n1, err = unsafe.Float64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Byte, n1, err = unsafe.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Bool, n1, err = unsafe.Bool.Unmarshal(r)
	n += n1
	return
}

func (s structStreamUnsafeMUS) Size(v StructStreamUnsafe) (size int) {
	size = unsafe.Float32.Size(v.Float32)
	size += unsafe.Float64.Size(v.Float64)
	size += unsafe.Uint8.Size(v.Byte)
	return size + unsafe.Bool.Size(v.Bool)
}

func (s structStreamUnsafeMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = unsafe.Float32.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.Float64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Bool.Skip(r)
	n += n1
	return
}

var TimeStructStreamUnsafeMUS = timeStructStreamUnsafeMUS{}

type timeStructStreamUnsafeMUS struct{}

func (s timeStructStreamUnsafeMUS) Marshal(v TimeStructStreamUnsafe, w muss.Writer) (n int, err error) {
	n, err = unsafe.Float32.Marshal(v.Float32, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.TimeUnix.Marshal(v.Time, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.String.Marshal(v.String, w)
	n += n1
	return
}

func (s timeStructStreamUnsafeMUS) Unmarshal(r muss.Reader) (v TimeStructStreamUnsafe, n int, err error) {
	v.Float32, n, err = unsafe.Float32.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Time, n1, err = unsafe.TimeUnix.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.String, n1, err = unsafe.String.Unmarshal(r)
	n += n1
	return
}

func (s timeStructStreamUnsafeMUS) Size(v TimeStructStreamUnsafe) (size int) {
	size = unsafe.Float32.Size(v.Float32)
	size += unsafe.TimeUnix.Size(v.Time)
	return size + unsafe.String.Size(v.String)
}

func (s timeStructStreamUnsafeMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = unsafe.Float32.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.TimeUnix.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.String.Skip(r)
	n += n1
	return
}
