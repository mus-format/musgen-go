// Code generated by musgen-go. DO NOT EDIT.\n\npackage

package pkg2

import (
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/varint"
	"github.com/mus-format/musgen-go/testdata"
)

func MarshalStructMUS(v Struct, bs []byte) (n int) {
	n = varint.MarshalFloat32(v.Float32, bs[n:])
	n += varint.MarshalFloat64(v.Float64, bs[n:])
	n += varint.MarshalUint8(v.Byte, bs[n:])
	return n + ord.MarshalBool(v.Bool, bs[n:])
}

func UnmarshalStructMUS(bs []byte) (v Struct, n int, err error) {
	v.Float32, n, err = varint.UnmarshalFloat32(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	v.Float64, n1, err = varint.UnmarshalFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Byte, n1, err = varint.UnmarshalUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Bool, n1, err = ord.UnmarshalBool(bs[n:])
	n += n1
	return
}

func SizeStructMUS(v Struct) (size int) {
	size = varint.SizeFloat32(v.Float32)
	size += varint.SizeFloat64(v.Float64)
	size += varint.SizeUint8(v.Byte)
	return size + ord.SizeBool(v.Bool)
}

func SkipStructMUS(bs []byte) (n int, err error) {
	n, err = varint.SkipFloat32(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.SkipFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.SkipUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.SkipBool(bs[n:])
	n += n1
	return
}

func MarshalValidAllFieldsStructMUS(v Struct, bs []byte) (n int) {
	n = varint.MarshalFloat32(v.Float32, bs[n:])
	n += varint.MarshalFloat64(v.Float64, bs[n:])
	n += varint.MarshalUint8(v.Byte, bs[n:])
	return n + ord.MarshalBool(v.Bool, bs[n:])
}

func UnmarshalValidAllFieldsStructMUS(bs []byte) (v Struct, n int, err error) {
	v.Float32, n, err = varint.UnmarshalFloat32(bs[n:])
	if err != nil {
		return
	}
	if err = testdata.ValidateZeroValue[float32](v.Float32); err != nil {
		return
	}
	var n1 int
	v.Float64, n1, err = varint.UnmarshalFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	if err = testdata.ValidateZeroValue[float64](v.Float64); err != nil {
		return
	}
	v.Byte, n1, err = varint.UnmarshalUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Bool, n1, err = ord.UnmarshalBool(bs[n:])
	n += n1
	return
}

func SizeValidAllFieldsStructMUS(v Struct) (size int) {
	size = varint.SizeFloat32(v.Float32)
	size += varint.SizeFloat64(v.Float64)
	size += varint.SizeUint8(v.Byte)
	return size + ord.SizeBool(v.Bool)
}

func SkipValidAllFieldsStructMUS(bs []byte) (n int, err error) {
	n, err = varint.SkipFloat32(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.SkipFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.SkipUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.SkipBool(bs[n:])
	n += n1
	return
}

func MarshalValidateFirstFieldStructMUS(v Struct, bs []byte) (n int) {
	n = varint.MarshalFloat32(v.Float32, bs[n:])
	n += varint.MarshalFloat64(v.Float64, bs[n:])
	n += varint.MarshalUint8(v.Byte, bs[n:])
	return n + ord.MarshalBool(v.Bool, bs[n:])
}

func UnmarshalValidateFirstFieldStructMUS(bs []byte) (v Struct, n int, err error) {
	v.Float32, n, err = varint.UnmarshalFloat32(bs[n:])
	if err != nil {
		return
	}
	if err = testdata.ValidateZeroValue[float32](v.Float32); err != nil {
		return
	}
	var n1 int
	v.Float64, n1, err = varint.UnmarshalFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Byte, n1, err = varint.UnmarshalUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Bool, n1, err = ord.UnmarshalBool(bs[n:])
	n += n1
	return
}

func SizeValidateFirstFieldStructMUS(v Struct) (size int) {
	size = varint.SizeFloat32(v.Float32)
	size += varint.SizeFloat64(v.Float64)
	size += varint.SizeUint8(v.Byte)
	return size + ord.SizeBool(v.Bool)
}

func SkipValidateFirstFieldStructMUS(bs []byte) (n int, err error) {
	n, err = varint.SkipFloat32(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.SkipFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.SkipUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.SkipBool(bs[n:])
	n += n1
	return
}

func MarshalValidateLastFieldStructMUS(v Struct, bs []byte) (n int) {
	n = varint.MarshalFloat32(v.Float32, bs[n:])
	n += varint.MarshalFloat64(v.Float64, bs[n:])
	n += varint.MarshalUint8(v.Byte, bs[n:])
	return n + ord.MarshalBool(v.Bool, bs[n:])
}

func UnmarshalValidateLastFieldStructMUS(bs []byte) (v Struct, n int, err error) {
	v.Float32, n, err = varint.UnmarshalFloat32(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	v.Float64, n1, err = varint.UnmarshalFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Byte, n1, err = varint.UnmarshalUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Bool, n1, err = ord.UnmarshalBool(bs[n:])
	n += n1
	return
}

func SizeValidateLastFieldStructMUS(v Struct) (size int) {
	size = varint.SizeFloat32(v.Float32)
	size += varint.SizeFloat64(v.Float64)
	size += varint.SizeUint8(v.Byte)
	return size + ord.SizeBool(v.Bool)
}

func SkipValidateLastFieldStructMUS(bs []byte) (n int, err error) {
	n, err = varint.SkipFloat32(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.SkipFloat64(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = varint.SkipUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.SkipBool(bs[n:])
	n += n1
	return
}

func MarshalPrefixAnotherStructMUS(v AnotherStruct, bs []byte) (n int) {
	n = MarshalSkipStructMUS(v.Struct1, bs[n:])
	return n + MarshalStructMUS(v.Struct2, bs[n:])
}

func UnmarshalPrefixAnotherStructMUS(bs []byte) (v AnotherStruct, n int, err error) {
	v.Struct1, n, err = UnmarshalSkipStructMUS(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	v.Struct2, n1, err = UnmarshalStructMUS(bs[n:])
	n += n1
	return
}

func SizePrefixAnotherStructMUS(v AnotherStruct) (size int) {
	size = SizeSkipStructMUS(v.Struct1)
	return size + SizeStructMUS(v.Struct2)
}

func SkipPrefixAnotherStructMUS(bs []byte) (n int, err error) {
	n, err = SkipSkipStructMUS(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	n1, err = SkipStructMUS(bs[n:])
	n += n1
	return
}

func MarshalSkipStructMUS(v Struct, bs []byte) (n int) {
	n = varint.MarshalFloat64(v.Float64, bs[n:])
	n += varint.MarshalUint8(v.Byte, bs[n:])
	return n + ord.MarshalBool(v.Bool, bs[n:])
}

func UnmarshalSkipStructMUS(bs []byte) (v Struct, n int, err error) {
	v.Float64, n, err = varint.UnmarshalFloat64(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	v.Byte, n1, err = varint.UnmarshalUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	v.Bool, n1, err = ord.UnmarshalBool(bs[n:])
	n += n1
	return
}

func SizeSkipStructMUS(v Struct) (size int) {
	size = varint.SizeFloat64(v.Float64)
	size += varint.SizeUint8(v.Byte)
	return size + ord.SizeBool(v.Bool)
}

func SkipSkipStructMUS(bs []byte) (n int, err error) {
	n, err = varint.SkipFloat64(bs[n:])
	if err != nil {
		return
	}
	var n1 int
	n1, err = varint.SkipUint8(bs[n:])
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.SkipBool(bs[n:])
	n += n1
	return
}
