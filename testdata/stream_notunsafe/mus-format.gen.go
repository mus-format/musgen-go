// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	"fmt"

	dts "github.com/mus-format/dts-stream-go"
	muss "github.com/mus-format/mus-stream-go"
	"github.com/mus-format/mus-stream-go/ord"
	"github.com/mus-format/mus-stream-go/unsafe"
	struct_testdata "github.com/mus-format/musgen-go/testdata/struct"
)

var (
	array9uKLxr3eGSvem2N3bRAgvQΞΞ = ord.NewArraySer[[3]int, int](unsafe.Int)
	mapK4lLHPPVN5Q6u5niJjZn2QΞΞ   = ord.NewMapSer[struct_testdata.MyInt, []struct_testdata.MyStruct](MyIntMUS, sliceslCn11zsaWfQVGdReH3fGAΞΞ)
	maplQFpexMvkwOA59YRctlFLwΞΞ   = ord.NewMapSer[float32, map[struct_testdata.MyInt][]struct_testdata.MyStruct](unsafe.Float32, mapK4lLHPPVN5Q6u5niJjZn2QΞΞ)
	ptrX5YRX6Σq6dZ7AEhpIΣ2LagΞΞ   = ord.NewPtrSer[[3]int](array9uKLxr3eGSvem2N3bRAgvQΞΞ)
	ptrawIsoDu8N7DjfPXV9i5ntwΞΞ   = ord.NewPtrSer[struct_testdata.MyStruct](MyStructMUS)
	ptrpf4Anxqayoi8bPts2puSwwΞΞ   = ord.NewPtrSer[string](ord.String)
	slice37YkNgdLyJUZkzuLspUeΣgΞΞ = ord.NewSliceSer[string](ord.String)
	sliceslCn11zsaWfQVGdReH3fGAΞΞ = ord.NewSliceSer[struct_testdata.MyStruct](MyStructMUS)
)

var MyIntMUS = myIntMUS{}

type myIntMUS struct{}

func (s myIntMUS) Marshal(v struct_testdata.MyInt, w muss.Writer) (n int, err error) {
	return unsafe.Int.Marshal(int(v), w)
}

func (s myIntMUS) Unmarshal(r muss.Reader) (v struct_testdata.MyInt, n int, err error) {
	tmp, n, err := unsafe.Int.Unmarshal(r)
	if err != nil {
		return
	}
	v = struct_testdata.MyInt(tmp)
	return
}

func (s myIntMUS) Size(v struct_testdata.MyInt) (size int) {
	return unsafe.Int.Size(int(v))
}

func (s myIntMUS) Skip(r muss.Reader) (n int, err error) {
	return unsafe.Int.Skip(r)
}

var MySliceMUS = mySliceMUS{}

type mySliceMUS struct{}

func (s mySliceMUS) Marshal(v struct_testdata.MySlice, w muss.Writer) (n int, err error) {
	return slice37YkNgdLyJUZkzuLspUeΣgΞΞ.Marshal([]string(v), w)
}

func (s mySliceMUS) Unmarshal(r muss.Reader) (v struct_testdata.MySlice, n int, err error) {
	tmp, n, err := slice37YkNgdLyJUZkzuLspUeΣgΞΞ.Unmarshal(r)
	if err != nil {
		return
	}
	v = struct_testdata.MySlice(tmp)
	return
}

func (s mySliceMUS) Size(v struct_testdata.MySlice) (size int) {
	return slice37YkNgdLyJUZkzuLspUeΣgΞΞ.Size([]string(v))
}

func (s mySliceMUS) Skip(r muss.Reader) (n int, err error) {
	return slice37YkNgdLyJUZkzuLspUeΣgΞΞ.Skip(r)
}

var MyStructMUS = myStructMUS{}

type myStructMUS struct{}

func (s myStructMUS) Marshal(v struct_testdata.MyStruct, w muss.Writer) (n int, err error) {
	n, err = unsafe.Int.Marshal(v.Int, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = ord.String.Marshal(v.Str, w)
	n += n1
	return
}

func (s myStructMUS) Unmarshal(r muss.Reader) (v struct_testdata.MyStruct, n int, err error) {
	v.Int, n, err = unsafe.Int.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Str, n1, err = ord.String.Unmarshal(r)
	n += n1
	return
}

func (s myStructMUS) Size(v struct_testdata.MyStruct) (size int) {
	size = unsafe.Int.Size(v.Int)
	return size + ord.String.Size(v.Str)
}

func (s myStructMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = unsafe.Int.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = ord.String.Skip(r)
	n += n1
	return
}

var MyIntDTS = dts.New[struct_testdata.MyInt](MyIntDTM, MyIntMUS)

var MyInterfaceMUS = myInterfaceMUS{}

type myInterfaceMUS struct{}

func (s myInterfaceMUS) Marshal(v struct_testdata.MyInterface, w muss.Writer) (n int, err error) {
	switch t := v.(type) {
	case struct_testdata.MyInt:
		return MyIntDTS.Marshal(t, w)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s myInterfaceMUS) Unmarshal(r muss.Reader) (v struct_testdata.MyInterface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case MyIntDTM:
		v, n1, err = MyIntDTS.UnmarshalData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s myInterfaceMUS) Size(v struct_testdata.MyInterface) (size int) {
	switch t := v.(type) {
	case struct_testdata.MyInt:
		return MyIntDTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s myInterfaceMUS) Skip(r muss.Reader) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case MyIntDTM:
		n1, err = MyIntDTS.SkipData(r)
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

var ComplexStructMUS = complexStructMUS{}

type complexStructMUS struct{}

func (s complexStructMUS) Marshal(v struct_testdata.ComplexStruct, w muss.Writer) (n int, err error) {
	n, err = unsafe.Bool.Marshal(v.Bool, w)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.Uint8.Marshal(v.Byte, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int8.Marshal(v.Int8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int16.Marshal(v.Int16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int32.Marshal(v.Int32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int64.Marshal(v.Int64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint8.Marshal(v.Uint8, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint16.Marshal(v.Uint16, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint32.Marshal(v.Uint32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint64.Marshal(v.Uint64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Float32.Marshal(v.Float32, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Float64.Marshal(v.Float64, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Marshal(v.String, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Marshal(v.ByteSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = sliceslCn11zsaWfQVGdReH3fGAΞΞ.Marshal(v.StructSlice, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = array9uKLxr3eGSvem2N3bRAgvQΞΞ.Marshal(v.Array, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrpf4Anxqayoi8bPts2puSwwΞΞ.Marshal(v.PtrString, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrawIsoDu8N7DjfPXV9i5ntwΞΞ.Marshal(v.PtrStruct, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrpf4Anxqayoi8bPts2puSwwΞΞ.Marshal(v.NilPtr, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrX5YRX6Σq6dZ7AEhpIΣ2LagΞΞ.Marshal(v.PtrArray, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = maplQFpexMvkwOA59YRctlFLwΞΞ.Marshal(v.Map, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.TimeUnix.Marshal(v.Time, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceMUS.Marshal(v.Alias, w)
	n += n1
	if err != nil {
		return
	}
	n1, err = MyInterfaceMUS.Marshal(v.Interface, w)
	n += n1
	return
}

func (s complexStructMUS) Unmarshal(r muss.Reader) (v struct_testdata.ComplexStruct, n int, err error) {
	v.Bool, n, err = unsafe.Bool.Unmarshal(r)
	if err != nil {
		return
	}
	var n1 int
	v.Byte, n1, err = unsafe.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int8, n1, err = unsafe.Int8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int16, n1, err = unsafe.Int16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int32, n1, err = unsafe.Int32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Int64, n1, err = unsafe.Int64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint8, n1, err = unsafe.Uint8.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint16, n1, err = unsafe.Uint16.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint32, n1, err = unsafe.Uint32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Uint64, n1, err = unsafe.Uint64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float32, n1, err = unsafe.Float32.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Float64, n1, err = unsafe.Float64.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.String, n1, err = ord.String.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.ByteSlice, n1, err = ord.ByteSlice.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.StructSlice, n1, err = sliceslCn11zsaWfQVGdReH3fGAΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Array, n1, err = array9uKLxr3eGSvem2N3bRAgvQΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrString, n1, err = ptrpf4Anxqayoi8bPts2puSwwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrStruct, n1, err = ptrawIsoDu8N7DjfPXV9i5ntwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.NilPtr, n1, err = ptrpf4Anxqayoi8bPts2puSwwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.PtrArray, n1, err = ptrX5YRX6Σq6dZ7AEhpIΣ2LagΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Map, n1, err = maplQFpexMvkwOA59YRctlFLwΞΞ.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Time, n1, err = unsafe.TimeUnix.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Alias, n1, err = MySliceMUS.Unmarshal(r)
	n += n1
	if err != nil {
		return
	}
	v.Interface, n1, err = MyInterfaceMUS.Unmarshal(r)
	n += n1
	return
}

func (s complexStructMUS) Size(v struct_testdata.ComplexStruct) (size int) {
	size = unsafe.Bool.Size(v.Bool)
	size += unsafe.Uint8.Size(v.Byte)
	size += unsafe.Int8.Size(v.Int8)
	size += unsafe.Int16.Size(v.Int16)
	size += unsafe.Int32.Size(v.Int32)
	size += unsafe.Int64.Size(v.Int64)
	size += unsafe.Uint8.Size(v.Uint8)
	size += unsafe.Uint16.Size(v.Uint16)
	size += unsafe.Uint32.Size(v.Uint32)
	size += unsafe.Uint64.Size(v.Uint64)
	size += unsafe.Float32.Size(v.Float32)
	size += unsafe.Float64.Size(v.Float64)
	size += ord.String.Size(v.String)
	size += ord.ByteSlice.Size(v.ByteSlice)
	size += sliceslCn11zsaWfQVGdReH3fGAΞΞ.Size(v.StructSlice)
	size += array9uKLxr3eGSvem2N3bRAgvQΞΞ.Size(v.Array)
	size += ptrpf4Anxqayoi8bPts2puSwwΞΞ.Size(v.PtrString)
	size += ptrawIsoDu8N7DjfPXV9i5ntwΞΞ.Size(v.PtrStruct)
	size += ptrpf4Anxqayoi8bPts2puSwwΞΞ.Size(v.NilPtr)
	size += ptrX5YRX6Σq6dZ7AEhpIΣ2LagΞΞ.Size(v.PtrArray)
	size += maplQFpexMvkwOA59YRctlFLwΞΞ.Size(v.Map)
	size += unsafe.TimeUnix.Size(v.Time)
	size += MySliceMUS.Size(v.Alias)
	return size + MyInterfaceMUS.Size(v.Interface)
}

func (s complexStructMUS) Skip(r muss.Reader) (n int, err error) {
	n, err = unsafe.Bool.Skip(r)
	if err != nil {
		return
	}
	var n1 int
	n1, err = unsafe.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Int64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint8.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint16.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Uint64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Float32.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.Float64.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.String.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ord.ByteSlice.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = sliceslCn11zsaWfQVGdReH3fGAΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = array9uKLxr3eGSvem2N3bRAgvQΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrpf4Anxqayoi8bPts2puSwwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrawIsoDu8N7DjfPXV9i5ntwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrpf4Anxqayoi8bPts2puSwwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = ptrX5YRX6Σq6dZ7AEhpIΣ2LagΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = maplQFpexMvkwOA59YRctlFLwΞΞ.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = unsafe.TimeUnix.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = MySliceMUS.Skip(r)
	n += n1
	if err != nil {
		return
	}
	n1, err = MyInterfaceMUS.Skip(r)
	n += n1
	return
}
