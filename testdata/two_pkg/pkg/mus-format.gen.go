// Code generated by musgen-go. DO NOT EDIT.

package pkg

import (
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/varint"
)

var (
	slicem1sNfFcAieUocnhrtnZS4wΞΞ = ord.NewSliceSer[MyIntSerName](MyAwesomeIntMUS)
)

var MyIntMUS = myIntMUS{}

type myIntMUS struct{}

func (s myIntMUS) Marshal(v MyInt, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s myIntMUS) Unmarshal(bs []byte) (v MyInt, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyInt(tmp)
	return
}

func (s myIntMUS) Size(v MyInt) (size int) {
	return varint.Int.Size(int(v))
}

func (s myIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var MySliceMUS = mySliceMUS{}

type mySliceMUS struct{}

func (s mySliceMUS) Marshal(v MySlice, bs []byte) (n int) {
	return slicem1sNfFcAieUocnhrtnZS4wΞΞ.Marshal([]MyIntSerName(v), bs)
}

func (s mySliceMUS) Unmarshal(bs []byte) (v MySlice, n int, err error) {
	tmp, n, err := slicem1sNfFcAieUocnhrtnZS4wΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MySlice(tmp)
	return
}

func (s mySliceMUS) Size(v MySlice) (size int) {
	return slicem1sNfFcAieUocnhrtnZS4wΞΞ.Size([]MyIntSerName(v))
}

func (s mySliceMUS) Skip(bs []byte) (n int, err error) {
	return slicem1sNfFcAieUocnhrtnZS4wΞΞ.Skip(bs)
}

var MyAwesomeIntMUS = myAwesomeIntMUS{}

type myAwesomeIntMUS struct{}

func (s myAwesomeIntMUS) Marshal(v MyIntSerName, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s myAwesomeIntMUS) Unmarshal(bs []byte) (v MyIntSerName, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyIntSerName(tmp)
	return
}

func (s myAwesomeIntMUS) Size(v MyIntSerName) (size int) {
	return varint.Int.Size(int(v))
}

func (s myAwesomeIntMUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}
