// Code generated by musgen-go. DO NOT EDIT.

package testdata

import (
	com "github.com/mus-format/common-go"
	arrops "github.com/mus-format/mus-go/options/array"
	bslops "github.com/mus-format/mus-go/options/byte_slice"
	mapops "github.com/mus-format/mus-go/options/map"
	slops "github.com/mus-format/mus-go/options/slice"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/raw"
	"github.com/mus-format/mus-go/varint"
	"github.com/mus-format/musgen-go/testdata"
	generic_testdata "github.com/mus-format/musgen-go/testdata/generic"
)

var (
	array0Yu8J0KmMwd2NKKi7V6nwQΞΞ     = ord.NewArraySer[[3]int, int](varint.Int, arrops.WithLenSer[int](raw.Int))
	array8hpL0hPl6irTeFwbIlAigAΞΞ     = ord.NewValidArraySer[[3]int, int](raw.Int, arrops.WithLenSer[int](raw.Int), arrops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	arrayFfEDEuWYadaX1LtTxwnSyAΞΞ     = ord.NewArraySer[[3]int, int](varint.Int, arrops.WithLenSer[int](raw.Int))
	arrayXRyslcpkfsdG3Coo6EΔHMwΞΞ     = ord.NewArraySer[[3]int, int](varint.Int)
	arraygjTc3BNVKXWJ1EAv61dFpQΞΞ     = ord.NewArraySer[[3]int, int](varint.Int)
	arraywnBatGQeE52nQqNESNvaDgΞΞ     = ord.NewValidArraySer[[3]int, int](varint.Int, arrops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	arrayz1jQhL0FlcDWfA8VΔwkRPQΞΞ     = ord.NewArraySer[[3]int, int](raw.Int)
	byteSliceDv832MTbnHArVH5sxCoLLgΞΞ = ord.NewValidByteSliceSer(bslops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
	byteSliceLQFDjQIfAL7VNQnxYqZBGQΞΞ = ord.NewByteSliceSer(bslops.WithLenSer(raw.Int))
	byteSliceiqpZERvJNGsiYfaBH1FvRQΞΞ = ord.NewValidByteSliceSer(bslops.WithLenSer(raw.Int), bslops.WithLenValidator(com.ValidatorFn[int](testdata.ValidateLength)))
	map2eGQPSAqnne0FLfxxhZOΔwΞΞ       = ord.NewMapSer[*MyByteSlice, []generic_testdata.MySlice[generic_testdata.MyInt]](ptrxYSaKΔnaw2TQ8OPJIqgjUwΞΞ, slice6SsgeeAV6MyAf3XOXVsSDQΞΞ)
	mapCFjV9XMV7UFhFPeERm9vbQΞΞ       = ord.NewValidMapSer[int, string](varint.Int, ord.String, mapops.WithValueValidator[int, string](com.ValidatorFn[string](testdata.ValidateZeroValue[string])))
	mapHMbfhbWlΣhqJMQDYlnJΣdAΞΞ       = ord.NewMapSer[int, string](raw.Int, ord.String)
	mapQTzm7nUHKy2J03bIRdIO3wΞΞ       = ord.NewValidMapSer[int, string](varint.Int, ord.String, mapops.WithLenValidator[int, string](com.ValidatorFn[int](testdata.ValidateLength)))
	mapSHaAVqQqHbWAEknRRskbuQΞΞ       = ord.NewValidMapSer[int, string](raw.Int, ord.String, mapops.WithLenSer[int, string](raw.Int), mapops.WithLenValidator[int, string](com.ValidatorFn[int](testdata.ValidateLength)), mapops.WithKeyValidator[int, string](com.ValidatorFn[int](testdata.ValidateZeroValue[int])), mapops.WithValueValidator[int, string](com.ValidatorFn[string](testdata.ValidateZeroValue[string])))
	mapc0TI9ECuSIr1JHaQnqZYUQΞΞ       = ord.NewMapSer[int, string](varint.Int, ord.String)
	mapfHsX7eYXiAz8qLΣdK75q1wΞΞ       = ord.NewMapSer[int, string](varint.Int, ord.String)
	mapnBXoYfWaO6Z87BejsQ5SsAΞΞ       = ord.NewMapSer[int, string](varint.Int, ord.String, mapops.WithLenSer[int, string](raw.Int))
	mapt5ZXqKΔF4Jq0kCDXOr3czQΞΞ       = ord.NewValidMapSer[int, string](varint.Int, ord.String, mapops.WithKeyValidator[int, string](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	mapuiJypZp0uUosQ1WEΔ5L4ΔQΞΞ       = ord.NewMapSer[int, string](varint.Int, ord.String)
	mapwLUaOtLlkΔx8sB8sm6ddWQΞΞ       = ord.NewValidMapSer[[3]int, map[*MyByteSlice][]generic_testdata.MySlice[generic_testdata.MyInt]](arrayFfEDEuWYadaX1LtTxwnSyAΞΞ, map2eGQPSAqnne0FLfxxhZOΔwΞΞ, mapops.WithKeyValidator[[3]int, map[*MyByteSlice][]generic_testdata.MySlice[generic_testdata.MyInt]](com.ValidatorFn[[3]int](testdata.ValidateZeroValue[[3]int])))
	ptrxYSaKΔnaw2TQ8OPJIqgjUwΞΞ       = ord.NewPtrSer[MyByteSlice](MyByteSliceMUS)
	slice035MPdoaY4EoWpEBEEyYaAΞΞ     = ord.NewValidSliceSer[int](varint.Int, slops.WithLenValidator[int](com.ValidatorFn[int](testdata.ValidateLength)))
	slice0bc9eYfvstkΔlFXhTYeNSQΞΞ     = ord.NewSliceSer[int](varint.Int, slops.WithLenSer[int](raw.Int))
	slice2mncVQq8RSDoF2AyvΣjhNAΞΞ     = ord.NewSliceSer[int](varint.Int)
	slice6SsgeeAV6MyAf3XOXVsSDQΞΞ     = ord.NewSliceSer[generic_testdata.MySlice[generic_testdata.MyInt]](generic_testdata.MySliceMUS, slops.WithLenSer[generic_testdata.MySlice[generic_testdata.MyInt]](raw.Int))
	sliceGUWdRzMPE8Jhjtkc0AnzzgΞΞ     = ord.NewSliceSer[int](varint.Int)
	slicedXywYquYCKy33ZDT2LbSCQΞΞ     = ord.NewValidSliceSer[int](raw.Int, slops.WithLenSer[int](raw.Int), slops.WithLenValidator[int](com.ValidatorFn[int](testdata.ValidateLength)), slops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
	slicerjqJEIkMDgQLMΣlI5Zbt9wΞΞ     = ord.NewSliceSer[int](raw.Int)
	sliceΣ9FmhZX17JAkzUEiEvBFagΞΞ     = ord.NewValidSliceSer[int](varint.Int, slops.WithElemValidator[int](com.ValidatorFn[int](testdata.ValidateZeroValue[int])))
)

var MyArrayMUS = myArrayMUS{}

type myArrayMUS struct{}

func (s myArrayMUS) Marshal(v MyArray, bs []byte) (n int) {
	return arrayXRyslcpkfsdG3Coo6EΔHMwΞΞ.Marshal([3]int(v), bs)
}

func (s myArrayMUS) Unmarshal(bs []byte) (v MyArray, n int, err error) {
	tmp, n, err := arrayXRyslcpkfsdG3Coo6EΔHMwΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyArray(tmp)
	return
}

func (s myArrayMUS) Size(v MyArray) (size int) {
	return arrayXRyslcpkfsdG3Coo6EΔHMwΞΞ.Size([3]int(v))
}

func (s myArrayMUS) Skip(bs []byte) (n int, err error) {
	return arrayXRyslcpkfsdG3Coo6EΔHMwΞΞ.Skip(bs)
}

var LenEncodingMyArrayMUS = lenEncodingMyArrayMUS{}

type lenEncodingMyArrayMUS struct{}

func (s lenEncodingMyArrayMUS) Marshal(v LenEncodingMyArray, bs []byte) (n int) {
	return array0Yu8J0KmMwd2NKKi7V6nwQΞΞ.Marshal([3]int(v), bs)
}

func (s lenEncodingMyArrayMUS) Unmarshal(bs []byte) (v LenEncodingMyArray, n int, err error) {
	tmp, n, err := array0Yu8J0KmMwd2NKKi7V6nwQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyArray(tmp)
	return
}

func (s lenEncodingMyArrayMUS) Size(v LenEncodingMyArray) (size int) {
	return array0Yu8J0KmMwd2NKKi7V6nwQΞΞ.Size([3]int(v))
}

func (s lenEncodingMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return array0Yu8J0KmMwd2NKKi7V6nwQΞΞ.Skip(bs)
}

var ElemEncodingMyArrayMUS = elemEncodingMyArrayMUS{}

type elemEncodingMyArrayMUS struct{}

func (s elemEncodingMyArrayMUS) Marshal(v ElemEncodingMyArray, bs []byte) (n int) {
	return arrayz1jQhL0FlcDWfA8VΔwkRPQΞΞ.Marshal([3]int(v), bs)
}

func (s elemEncodingMyArrayMUS) Unmarshal(bs []byte) (v ElemEncodingMyArray, n int, err error) {
	tmp, n, err := arrayz1jQhL0FlcDWfA8VΔwkRPQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemEncodingMyArray(tmp)
	return
}

func (s elemEncodingMyArrayMUS) Size(v ElemEncodingMyArray) (size int) {
	return arrayz1jQhL0FlcDWfA8VΔwkRPQΞΞ.Size([3]int(v))
}

func (s elemEncodingMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arrayz1jQhL0FlcDWfA8VΔwkRPQΞΞ.Skip(bs)
}

var ElemValidMyArrayMUS = elemValidMyArrayMUS{}

type elemValidMyArrayMUS struct{}

func (s elemValidMyArrayMUS) Marshal(v ElemValidMyArray, bs []byte) (n int) {
	return arraywnBatGQeE52nQqNESNvaDgΞΞ.Marshal([3]int(v), bs)
}

func (s elemValidMyArrayMUS) Unmarshal(bs []byte) (v ElemValidMyArray, n int, err error) {
	tmp, n, err := arraywnBatGQeE52nQqNESNvaDgΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemValidMyArray(tmp)
	return
}

func (s elemValidMyArrayMUS) Size(v ElemValidMyArray) (size int) {
	return arraywnBatGQeE52nQqNESNvaDgΞΞ.Size([3]int(v))
}

func (s elemValidMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arraywnBatGQeE52nQqNESNvaDgΞΞ.Skip(bs)
}

var ValidMyArrayMUS = validMyArrayMUS{}

type validMyArrayMUS struct{}

func (s validMyArrayMUS) Marshal(v ValidMyArray, bs []byte) (n int) {
	return arraygjTc3BNVKXWJ1EAv61dFpQΞΞ.Marshal([3]int(v), bs)
}

func (s validMyArrayMUS) Unmarshal(bs []byte) (v ValidMyArray, n int, err error) {
	tmp, n, err := arraygjTc3BNVKXWJ1EAv61dFpQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyArray(tmp)
	err = testdata.ValidateZeroValue[ValidMyArray](v)
	return
}

func (s validMyArrayMUS) Size(v ValidMyArray) (size int) {
	return arraygjTc3BNVKXWJ1EAv61dFpQΞΞ.Size([3]int(v))
}

func (s validMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return arraygjTc3BNVKXWJ1EAv61dFpQΞΞ.Skip(bs)
}

var AllMyArrayMUS = allMyArrayMUS{}

type allMyArrayMUS struct{}

func (s allMyArrayMUS) Marshal(v AllMyArray, bs []byte) (n int) {
	return array8hpL0hPl6irTeFwbIlAigAΞΞ.Marshal([3]int(v), bs)
}

func (s allMyArrayMUS) Unmarshal(bs []byte) (v AllMyArray, n int, err error) {
	tmp, n, err := array8hpL0hPl6irTeFwbIlAigAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyArray(tmp)
	err = testdata.ValidateZeroValue[AllMyArray](v)
	return
}

func (s allMyArrayMUS) Size(v AllMyArray) (size int) {
	return array8hpL0hPl6irTeFwbIlAigAΞΞ.Size([3]int(v))
}

func (s allMyArrayMUS) Skip(bs []byte) (n int, err error) {
	return array8hpL0hPl6irTeFwbIlAigAΞΞ.Skip(bs)
}

var MyByteSliceMUS = myByteSliceMUS{}

type myByteSliceMUS struct{}

func (s myByteSliceMUS) Marshal(v MyByteSlice, bs []byte) (n int) {
	return ord.ByteSlice.Marshal([]uint8(v), bs)
}

func (s myByteSliceMUS) Unmarshal(bs []byte) (v MyByteSlice, n int, err error) {
	tmp, n, err := ord.ByteSlice.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyByteSlice(tmp)
	return
}

func (s myByteSliceMUS) Size(v MyByteSlice) (size int) {
	return ord.ByteSlice.Size([]uint8(v))
}

func (s myByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return ord.ByteSlice.Skip(bs)
}

var LenEncodingMyByteSliceMUS = lenEncodingMyByteSliceMUS{}

type lenEncodingMyByteSliceMUS struct{}

func (s lenEncodingMyByteSliceMUS) Marshal(v LenEncodingMyByteSlice, bs []byte) (n int) {
	return byteSliceLQFDjQIfAL7VNQnxYqZBGQΞΞ.Marshal([]uint8(v), bs)
}

func (s lenEncodingMyByteSliceMUS) Unmarshal(bs []byte) (v LenEncodingMyByteSlice, n int, err error) {
	tmp, n, err := byteSliceLQFDjQIfAL7VNQnxYqZBGQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyByteSlice(tmp)
	return
}

func (s lenEncodingMyByteSliceMUS) Size(v LenEncodingMyByteSlice) (size int) {
	return byteSliceLQFDjQIfAL7VNQnxYqZBGQΞΞ.Size([]uint8(v))
}

func (s lenEncodingMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return byteSliceLQFDjQIfAL7VNQnxYqZBGQΞΞ.Skip(bs)
}

var LenValidMyByteSliceMUS = lenValidMyByteSliceMUS{}

type lenValidMyByteSliceMUS struct{}

func (s lenValidMyByteSliceMUS) Marshal(v LenValidMyByteSlice, bs []byte) (n int) {
	return byteSliceDv832MTbnHArVH5sxCoLLgΞΞ.Marshal([]uint8(v), bs)
}

func (s lenValidMyByteSliceMUS) Unmarshal(bs []byte) (v LenValidMyByteSlice, n int, err error) {
	tmp, n, err := byteSliceDv832MTbnHArVH5sxCoLLgΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMyByteSlice(tmp)
	return
}

func (s lenValidMyByteSliceMUS) Size(v LenValidMyByteSlice) (size int) {
	return byteSliceDv832MTbnHArVH5sxCoLLgΞΞ.Size([]uint8(v))
}

func (s lenValidMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return byteSliceDv832MTbnHArVH5sxCoLLgΞΞ.Skip(bs)
}

var ValidMyByteSliceMUS = validMyByteSliceMUS{}

type validMyByteSliceMUS struct{}

func (s validMyByteSliceMUS) Marshal(v ValidMyByteSlice, bs []byte) (n int) {
	return ord.ByteSlice.Marshal([]uint8(v), bs)
}

func (s validMyByteSliceMUS) Unmarshal(bs []byte) (v ValidMyByteSlice, n int, err error) {
	tmp, n, err := ord.ByteSlice.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyByteSlice(tmp)
	err = ValidateByteSlice1(v)
	return
}

func (s validMyByteSliceMUS) Size(v ValidMyByteSlice) (size int) {
	return ord.ByteSlice.Size([]uint8(v))
}

func (s validMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return ord.ByteSlice.Skip(bs)
}

var AllMyByteSliceMUS = allMyByteSliceMUS{}

type allMyByteSliceMUS struct{}

func (s allMyByteSliceMUS) Marshal(v AllMyByteSlice, bs []byte) (n int) {
	return byteSliceiqpZERvJNGsiYfaBH1FvRQΞΞ.Marshal([]uint8(v), bs)
}

func (s allMyByteSliceMUS) Unmarshal(bs []byte) (v AllMyByteSlice, n int, err error) {
	tmp, n, err := byteSliceiqpZERvJNGsiYfaBH1FvRQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyByteSlice(tmp)
	err = ValidateByteSlice2(v)
	return
}

func (s allMyByteSliceMUS) Size(v AllMyByteSlice) (size int) {
	return byteSliceiqpZERvJNGsiYfaBH1FvRQΞΞ.Size([]uint8(v))
}

func (s allMyByteSliceMUS) Skip(bs []byte) (n int, err error) {
	return byteSliceiqpZERvJNGsiYfaBH1FvRQΞΞ.Skip(bs)
}

var MySliceMUS = mySliceMUS{}

type mySliceMUS struct{}

func (s mySliceMUS) Marshal(v MySlice, bs []byte) (n int) {
	return sliceGUWdRzMPE8Jhjtkc0AnzzgΞΞ.Marshal([]int(v), bs)
}

func (s mySliceMUS) Unmarshal(bs []byte) (v MySlice, n int, err error) {
	tmp, n, err := sliceGUWdRzMPE8Jhjtkc0AnzzgΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MySlice(tmp)
	return
}

func (s mySliceMUS) Size(v MySlice) (size int) {
	return sliceGUWdRzMPE8Jhjtkc0AnzzgΞΞ.Size([]int(v))
}

func (s mySliceMUS) Skip(bs []byte) (n int, err error) {
	return sliceGUWdRzMPE8Jhjtkc0AnzzgΞΞ.Skip(bs)
}

var LenEncodingMySliceMUS = lenEncodingMySliceMUS{}

type lenEncodingMySliceMUS struct{}

func (s lenEncodingMySliceMUS) Marshal(v LenEncodingMySlice, bs []byte) (n int) {
	return slice0bc9eYfvstkΔlFXhTYeNSQΞΞ.Marshal([]int(v), bs)
}

func (s lenEncodingMySliceMUS) Unmarshal(bs []byte) (v LenEncodingMySlice, n int, err error) {
	tmp, n, err := slice0bc9eYfvstkΔlFXhTYeNSQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMySlice(tmp)
	return
}

func (s lenEncodingMySliceMUS) Size(v LenEncodingMySlice) (size int) {
	return slice0bc9eYfvstkΔlFXhTYeNSQΞΞ.Size([]int(v))
}

func (s lenEncodingMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slice0bc9eYfvstkΔlFXhTYeNSQΞΞ.Skip(bs)
}

var LenValidMySliceMUS = lenValidMySliceMUS{}

type lenValidMySliceMUS struct{}

func (s lenValidMySliceMUS) Marshal(v LenValidMySlice, bs []byte) (n int) {
	return slice035MPdoaY4EoWpEBEEyYaAΞΞ.Marshal([]int(v), bs)
}

func (s lenValidMySliceMUS) Unmarshal(bs []byte) (v LenValidMySlice, n int, err error) {
	tmp, n, err := slice035MPdoaY4EoWpEBEEyYaAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMySlice(tmp)
	return
}

func (s lenValidMySliceMUS) Size(v LenValidMySlice) (size int) {
	return slice035MPdoaY4EoWpEBEEyYaAΞΞ.Size([]int(v))
}

func (s lenValidMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slice035MPdoaY4EoWpEBEEyYaAΞΞ.Skip(bs)
}

var ElemEncodingMySliceMUS = elemEncodingMySliceMUS{}

type elemEncodingMySliceMUS struct{}

func (s elemEncodingMySliceMUS) Marshal(v ElemEncodingMySlice, bs []byte) (n int) {
	return slicerjqJEIkMDgQLMΣlI5Zbt9wΞΞ.Marshal([]int(v), bs)
}

func (s elemEncodingMySliceMUS) Unmarshal(bs []byte) (v ElemEncodingMySlice, n int, err error) {
	tmp, n, err := slicerjqJEIkMDgQLMΣlI5Zbt9wΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemEncodingMySlice(tmp)
	return
}

func (s elemEncodingMySliceMUS) Size(v ElemEncodingMySlice) (size int) {
	return slicerjqJEIkMDgQLMΣlI5Zbt9wΞΞ.Size([]int(v))
}

func (s elemEncodingMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slicerjqJEIkMDgQLMΣlI5Zbt9wΞΞ.Skip(bs)
}

var ElemValidMySliceMUS = elemValidMySliceMUS{}

type elemValidMySliceMUS struct{}

func (s elemValidMySliceMUS) Marshal(v ElemValidMySlice, bs []byte) (n int) {
	return sliceΣ9FmhZX17JAkzUEiEvBFagΞΞ.Marshal([]int(v), bs)
}

func (s elemValidMySliceMUS) Unmarshal(bs []byte) (v ElemValidMySlice, n int, err error) {
	tmp, n, err := sliceΣ9FmhZX17JAkzUEiEvBFagΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemValidMySlice(tmp)
	return
}

func (s elemValidMySliceMUS) Size(v ElemValidMySlice) (size int) {
	return sliceΣ9FmhZX17JAkzUEiEvBFagΞΞ.Size([]int(v))
}

func (s elemValidMySliceMUS) Skip(bs []byte) (n int, err error) {
	return sliceΣ9FmhZX17JAkzUEiEvBFagΞΞ.Skip(bs)
}

var ValidMySliceMUS = validMySliceMUS{}

type validMySliceMUS struct{}

func (s validMySliceMUS) Marshal(v ValidMySlice, bs []byte) (n int) {
	return slice2mncVQq8RSDoF2AyvΣjhNAΞΞ.Marshal([]int(v), bs)
}

func (s validMySliceMUS) Unmarshal(bs []byte) (v ValidMySlice, n int, err error) {
	tmp, n, err := slice2mncVQq8RSDoF2AyvΣjhNAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMySlice(tmp)
	err = ValidateMySlice1(v)
	return
}

func (s validMySliceMUS) Size(v ValidMySlice) (size int) {
	return slice2mncVQq8RSDoF2AyvΣjhNAΞΞ.Size([]int(v))
}

func (s validMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slice2mncVQq8RSDoF2AyvΣjhNAΞΞ.Skip(bs)
}

var AllMySliceMUS = allMySliceMUS{}

type allMySliceMUS struct{}

func (s allMySliceMUS) Marshal(v AllMySlice, bs []byte) (n int) {
	return slicedXywYquYCKy33ZDT2LbSCQΞΞ.Marshal([]int(v), bs)
}

func (s allMySliceMUS) Unmarshal(bs []byte) (v AllMySlice, n int, err error) {
	tmp, n, err := slicedXywYquYCKy33ZDT2LbSCQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMySlice(tmp)
	err = ValidateMySlice2(v)
	return
}

func (s allMySliceMUS) Size(v AllMySlice) (size int) {
	return slicedXywYquYCKy33ZDT2LbSCQΞΞ.Size([]int(v))
}

func (s allMySliceMUS) Skip(bs []byte) (n int, err error) {
	return slicedXywYquYCKy33ZDT2LbSCQΞΞ.Skip(bs)
}

var MyMapMUS = myMapMUS{}

type myMapMUS struct{}

func (s myMapMUS) Marshal(v MyMap, bs []byte) (n int) {
	return mapfHsX7eYXiAz8qLΣdK75q1wΞΞ.Marshal(map[int]string(v), bs)
}

func (s myMapMUS) Unmarshal(bs []byte) (v MyMap, n int, err error) {
	tmp, n, err := mapfHsX7eYXiAz8qLΣdK75q1wΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = MyMap(tmp)
	return
}

func (s myMapMUS) Size(v MyMap) (size int) {
	return mapfHsX7eYXiAz8qLΣdK75q1wΞΞ.Size(map[int]string(v))
}

func (s myMapMUS) Skip(bs []byte) (n int, err error) {
	return mapfHsX7eYXiAz8qLΣdK75q1wΞΞ.Skip(bs)
}

var LenEncodingMyMapMUS = lenEncodingMyMapMUS{}

type lenEncodingMyMapMUS struct{}

func (s lenEncodingMyMapMUS) Marshal(v LenEncodingMyMap, bs []byte) (n int) {
	return mapnBXoYfWaO6Z87BejsQ5SsAΞΞ.Marshal(map[int]string(v), bs)
}

func (s lenEncodingMyMapMUS) Unmarshal(bs []byte) (v LenEncodingMyMap, n int, err error) {
	tmp, n, err := mapnBXoYfWaO6Z87BejsQ5SsAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenEncodingMyMap(tmp)
	return
}

func (s lenEncodingMyMapMUS) Size(v LenEncodingMyMap) (size int) {
	return mapnBXoYfWaO6Z87BejsQ5SsAΞΞ.Size(map[int]string(v))
}

func (s lenEncodingMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapnBXoYfWaO6Z87BejsQ5SsAΞΞ.Skip(bs)
}

var LenValidMyMapMUS = lenValidMyMapMUS{}

type lenValidMyMapMUS struct{}

func (s lenValidMyMapMUS) Marshal(v LenValidMyMap, bs []byte) (n int) {
	return mapQTzm7nUHKy2J03bIRdIO3wΞΞ.Marshal(map[int]string(v), bs)
}

func (s lenValidMyMapMUS) Unmarshal(bs []byte) (v LenValidMyMap, n int, err error) {
	tmp, n, err := mapQTzm7nUHKy2J03bIRdIO3wΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = LenValidMyMap(tmp)
	return
}

func (s lenValidMyMapMUS) Size(v LenValidMyMap) (size int) {
	return mapQTzm7nUHKy2J03bIRdIO3wΞΞ.Size(map[int]string(v))
}

func (s lenValidMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapQTzm7nUHKy2J03bIRdIO3wΞΞ.Skip(bs)
}

var KeyEncodingMyMapMUS = keyEncodingMyMapMUS{}

type keyEncodingMyMapMUS struct{}

func (s keyEncodingMyMapMUS) Marshal(v KeyEncodingMyMap, bs []byte) (n int) {
	return mapHMbfhbWlΣhqJMQDYlnJΣdAΞΞ.Marshal(map[int]string(v), bs)
}

func (s keyEncodingMyMapMUS) Unmarshal(bs []byte) (v KeyEncodingMyMap, n int, err error) {
	tmp, n, err := mapHMbfhbWlΣhqJMQDYlnJΣdAΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = KeyEncodingMyMap(tmp)
	return
}

func (s keyEncodingMyMapMUS) Size(v KeyEncodingMyMap) (size int) {
	return mapHMbfhbWlΣhqJMQDYlnJΣdAΞΞ.Size(map[int]string(v))
}

func (s keyEncodingMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapHMbfhbWlΣhqJMQDYlnJΣdAΞΞ.Skip(bs)
}

var KeyValidMyMapMUS = keyValidMyMapMUS{}

type keyValidMyMapMUS struct{}

func (s keyValidMyMapMUS) Marshal(v KeyValidMyMap, bs []byte) (n int) {
	return mapt5ZXqKΔF4Jq0kCDXOr3czQΞΞ.Marshal(map[int]string(v), bs)
}

func (s keyValidMyMapMUS) Unmarshal(bs []byte) (v KeyValidMyMap, n int, err error) {
	tmp, n, err := mapt5ZXqKΔF4Jq0kCDXOr3czQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = KeyValidMyMap(tmp)
	return
}

func (s keyValidMyMapMUS) Size(v KeyValidMyMap) (size int) {
	return mapt5ZXqKΔF4Jq0kCDXOr3czQΞΞ.Size(map[int]string(v))
}

func (s keyValidMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapt5ZXqKΔF4Jq0kCDXOr3czQΞΞ.Skip(bs)
}

var ElemEncodingMyMapMUS = elemEncodingMyMapMUS{}

type elemEncodingMyMapMUS struct{}

func (s elemEncodingMyMapMUS) Marshal(v ElemEncodingMyMap, bs []byte) (n int) {
	return mapc0TI9ECuSIr1JHaQnqZYUQΞΞ.Marshal(map[int]string(v), bs)
}

func (s elemEncodingMyMapMUS) Unmarshal(bs []byte) (v ElemEncodingMyMap, n int, err error) {
	tmp, n, err := mapc0TI9ECuSIr1JHaQnqZYUQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemEncodingMyMap(tmp)
	return
}

func (s elemEncodingMyMapMUS) Size(v ElemEncodingMyMap) (size int) {
	return mapc0TI9ECuSIr1JHaQnqZYUQΞΞ.Size(map[int]string(v))
}

func (s elemEncodingMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapc0TI9ECuSIr1JHaQnqZYUQΞΞ.Skip(bs)
}

var ElemValidMyMapMUS = elemValidMyMapMUS{}

type elemValidMyMapMUS struct{}

func (s elemValidMyMapMUS) Marshal(v ElemValidMyMap, bs []byte) (n int) {
	return mapCFjV9XMV7UFhFPeERm9vbQΞΞ.Marshal(map[int]string(v), bs)
}

func (s elemValidMyMapMUS) Unmarshal(bs []byte) (v ElemValidMyMap, n int, err error) {
	tmp, n, err := mapCFjV9XMV7UFhFPeERm9vbQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ElemValidMyMap(tmp)
	return
}

func (s elemValidMyMapMUS) Size(v ElemValidMyMap) (size int) {
	return mapCFjV9XMV7UFhFPeERm9vbQΞΞ.Size(map[int]string(v))
}

func (s elemValidMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapCFjV9XMV7UFhFPeERm9vbQΞΞ.Skip(bs)
}

var ValidMyMapMUS = validMyMapMUS{}

type validMyMapMUS struct{}

func (s validMyMapMUS) Marshal(v ValidMyMap, bs []byte) (n int) {
	return mapuiJypZp0uUosQ1WEΔ5L4ΔQΞΞ.Marshal(map[int]string(v), bs)
}

func (s validMyMapMUS) Unmarshal(bs []byte) (v ValidMyMap, n int, err error) {
	tmp, n, err := mapuiJypZp0uUosQ1WEΔ5L4ΔQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ValidMyMap(tmp)
	err = ValidateMyMap1(v)
	return
}

func (s validMyMapMUS) Size(v ValidMyMap) (size int) {
	return mapuiJypZp0uUosQ1WEΔ5L4ΔQΞΞ.Size(map[int]string(v))
}

func (s validMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapuiJypZp0uUosQ1WEΔ5L4ΔQΞΞ.Skip(bs)
}

var AllMyMapMUS = allMyMapMUS{}

type allMyMapMUS struct{}

func (s allMyMapMUS) Marshal(v AllMyMap, bs []byte) (n int) {
	return mapSHaAVqQqHbWAEknRRskbuQΞΞ.Marshal(map[int]string(v), bs)
}

func (s allMyMapMUS) Unmarshal(bs []byte) (v AllMyMap, n int, err error) {
	tmp, n, err := mapSHaAVqQqHbWAEknRRskbuQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = AllMyMap(tmp)
	err = ValidateMyMap2(v)
	return
}

func (s allMyMapMUS) Size(v AllMyMap) (size int) {
	return mapSHaAVqQqHbWAEknRRskbuQΞΞ.Size(map[int]string(v))
}

func (s allMyMapMUS) Skip(bs []byte) (n int, err error) {
	return mapSHaAVqQqHbWAEknRRskbuQΞΞ.Skip(bs)
}

var ComplexMapMUS = complexMapMUS{}

type complexMapMUS struct{}

func (s complexMapMUS) Marshal(v ComplexMap, bs []byte) (n int) {
	return mapwLUaOtLlkΔx8sB8sm6ddWQΞΞ.Marshal(map[[3]int]map[*MyByteSlice][]generic_testdata.MySlice[generic_testdata.MyInt](v), bs)
}

func (s complexMapMUS) Unmarshal(bs []byte) (v ComplexMap, n int, err error) {
	tmp, n, err := mapwLUaOtLlkΔx8sB8sm6ddWQΞΞ.Unmarshal(bs)
	if err != nil {
		return
	}
	v = ComplexMap(tmp)
	return
}

func (s complexMapMUS) Size(v ComplexMap) (size int) {
	return mapwLUaOtLlkΔx8sB8sm6ddWQΞΞ.Size(map[[3]int]map[*MyByteSlice][]generic_testdata.MySlice[generic_testdata.MyInt](v))
}

func (s complexMapMUS) Skip(bs []byte) (n int, err error) {
	return mapwLUaOtLlkΔx8sB8sm6ddWQΞΞ.Skip(bs)
}
