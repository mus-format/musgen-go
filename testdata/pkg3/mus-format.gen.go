// Code generated by musgen-go. DO NOT EDIT.

package pkg3

import (
	"fmt"

	dts "github.com/mus-format/mus-dts-go"
	"github.com/mus-format/mus-go/ord"
	"github.com/mus-format/mus-go/varint"
	"github.com/mus-format/musgen-go/testdata/pkg1"
)

var InterfaceImpl1MUS = interfaceImpl1MUS{}

type interfaceImpl1MUS struct{}

func (s interfaceImpl1MUS) Marshal(v pkg1.InterfaceImpl1, bs []byte) (n int) {
	return ord.String.Marshal(v.Str, bs)
}

func (s interfaceImpl1MUS) Unmarshal(bs []byte) (v pkg1.InterfaceImpl1, n int, err error) {
	v.Str, n, err = ord.String.Unmarshal(bs)
	return
}

func (s interfaceImpl1MUS) Size(v pkg1.InterfaceImpl1) (size int) {
	return ord.String.Size(v.Str)
}

func (s interfaceImpl1MUS) Skip(bs []byte) (n int, err error) {
	n, err = ord.String.Skip(bs)
	return
}

var InterfaceImpl2MUS = interfaceImpl2MUS{}

type interfaceImpl2MUS struct{}

func (s interfaceImpl2MUS) Marshal(v pkg1.InterfaceImpl2, bs []byte) (n int) {
	return varint.Int.Marshal(int(v), bs)
}

func (s interfaceImpl2MUS) Unmarshal(bs []byte) (v pkg1.InterfaceImpl2, n int, err error) {
	tmp, n, err := varint.Int.Unmarshal(bs)
	if err != nil {
		return
	}
	v = pkg1.InterfaceImpl2(tmp)
	return
}

func (s interfaceImpl2MUS) Size(v pkg1.InterfaceImpl2) (size int) {
	return varint.Int.Size(int(v))
}

func (s interfaceImpl2MUS) Skip(bs []byte) (n int, err error) {
	return varint.Int.Skip(bs)
}

var InterfaceImpl1DTS = dts.New[pkg1.InterfaceImpl1](InterfaceImpl1DTM, InterfaceImpl1MUS)
var InterfaceImpl2DTS = dts.New[pkg1.InterfaceImpl2](InterfaceImpl2DTM, InterfaceImpl2MUS)

var InterfaceMUS = interfaceMUS{}

type interfaceMUS struct{}

func (s interfaceMUS) Marshal(v pkg1.Interface, bs []byte) (n int) {
	switch t := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Marshal(t, bs)
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Marshal(t, bs)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceMUS) Unmarshal(bs []byte) (v pkg1.Interface, n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		v, n1, err = InterfaceImpl1DTS.UnmarshalData(bs[n:])
	case InterfaceImpl2DTM:
		v, n1, err = InterfaceImpl2DTS.UnmarshalData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}

func (s interfaceMUS) Size(v pkg1.Interface) (size int) {
	switch t := v.(type) {
	case InterfaceImpl1:
		return InterfaceImpl1DTS.Size(t)
	case InterfaceImpl2:
		return InterfaceImpl2DTS.Size(t)
	default:
		panic(fmt.Sprintf("unexpected %v type", t))
	}
}

func (s interfaceMUS) Skip(bs []byte) (n int, err error) {
	dtm, n, err := dts.DTMSer.Unmarshal(bs)
	if err != nil {
		return
	}
	var n1 int
	switch dtm {
	case InterfaceImpl1DTM:
		n1, err = InterfaceImpl1DTS.SkipData(bs[n:])
	case InterfaceImpl2DTM:
		n1, err = InterfaceImpl2DTS.SkipData(bs[n:])
	default:
		err = fmt.Errorf("unexpected %v DTM", dtm)
		return
	}
	n += n1
	return
}
